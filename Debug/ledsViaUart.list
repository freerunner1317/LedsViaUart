
ledsViaUart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047b8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08004870  08004870  00014870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049fc  080049fc  00020140  2**0
                  CONTENTS
  4 .ARM          00000000  080049fc  080049fc  00020140  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049fc  080049fc  00020140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049fc  080049fc  000149fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a00  08004a00  00014a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000140  20000000  08004a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000140  08004b44  00020140  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08004b44  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012179  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ca  00000000  00000000  000322e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00034ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  000358f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016afd  00000000  00000000  00036628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012fbb  00000000  00000000  0004d125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d55e  00000000  00000000  000600e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed63e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003360  00000000  00000000  000ed690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000140 	.word	0x20000140
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004858 	.word	0x08004858

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000144 	.word	0x20000144
 80000fc:	08004858 	.word	0x08004858

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__udivsi3>:
 8000110:	2200      	movs	r2, #0
 8000112:	0843      	lsrs	r3, r0, #1
 8000114:	428b      	cmp	r3, r1
 8000116:	d374      	bcc.n	8000202 <__udivsi3+0xf2>
 8000118:	0903      	lsrs	r3, r0, #4
 800011a:	428b      	cmp	r3, r1
 800011c:	d35f      	bcc.n	80001de <__udivsi3+0xce>
 800011e:	0a03      	lsrs	r3, r0, #8
 8000120:	428b      	cmp	r3, r1
 8000122:	d344      	bcc.n	80001ae <__udivsi3+0x9e>
 8000124:	0b03      	lsrs	r3, r0, #12
 8000126:	428b      	cmp	r3, r1
 8000128:	d328      	bcc.n	800017c <__udivsi3+0x6c>
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d30d      	bcc.n	800014c <__udivsi3+0x3c>
 8000130:	22ff      	movs	r2, #255	; 0xff
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	ba12      	rev	r2, r2
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d302      	bcc.n	8000142 <__udivsi3+0x32>
 800013c:	1212      	asrs	r2, r2, #8
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	d065      	beq.n	800020e <__udivsi3+0xfe>
 8000142:	0b03      	lsrs	r3, r0, #12
 8000144:	428b      	cmp	r3, r1
 8000146:	d319      	bcc.n	800017c <__udivsi3+0x6c>
 8000148:	e000      	b.n	800014c <__udivsi3+0x3c>
 800014a:	0a09      	lsrs	r1, r1, #8
 800014c:	0bc3      	lsrs	r3, r0, #15
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x46>
 8000152:	03cb      	lsls	r3, r1, #15
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b83      	lsrs	r3, r0, #14
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x52>
 800015e:	038b      	lsls	r3, r1, #14
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b43      	lsrs	r3, r0, #13
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x5e>
 800016a:	034b      	lsls	r3, r1, #13
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b03      	lsrs	r3, r0, #12
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x6a>
 8000176:	030b      	lsls	r3, r1, #12
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0ac3      	lsrs	r3, r0, #11
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x76>
 8000182:	02cb      	lsls	r3, r1, #11
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a83      	lsrs	r3, r0, #10
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x82>
 800018e:	028b      	lsls	r3, r1, #10
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a43      	lsrs	r3, r0, #9
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x8e>
 800019a:	024b      	lsls	r3, r1, #9
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a03      	lsrs	r3, r0, #8
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x9a>
 80001a6:	020b      	lsls	r3, r1, #8
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	d2cd      	bcs.n	800014a <__udivsi3+0x3a>
 80001ae:	09c3      	lsrs	r3, r0, #7
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xa8>
 80001b4:	01cb      	lsls	r3, r1, #7
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0983      	lsrs	r3, r0, #6
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xb4>
 80001c0:	018b      	lsls	r3, r1, #6
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0943      	lsrs	r3, r0, #5
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xc0>
 80001cc:	014b      	lsls	r3, r1, #5
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0903      	lsrs	r3, r0, #4
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xcc>
 80001d8:	010b      	lsls	r3, r1, #4
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	08c3      	lsrs	r3, r0, #3
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xd8>
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0883      	lsrs	r3, r0, #2
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xe4>
 80001f0:	008b      	lsls	r3, r1, #2
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0843      	lsrs	r3, r0, #1
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xf0>
 80001fc:	004b      	lsls	r3, r1, #1
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	d200      	bcs.n	8000208 <__udivsi3+0xf8>
 8000206:	4601      	mov	r1, r0
 8000208:	4152      	adcs	r2, r2
 800020a:	4610      	mov	r0, r2
 800020c:	4770      	bx	lr
 800020e:	e7ff      	b.n	8000210 <__udivsi3+0x100>
 8000210:	b501      	push	{r0, lr}
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f8f0 	bl	80003f8 <__aeabi_idiv0>
 8000218:	bd02      	pop	{r1, pc}
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_uidivmod>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d0f7      	beq.n	8000210 <__udivsi3+0x100>
 8000220:	e776      	b.n	8000110 <__udivsi3>
 8000222:	4770      	bx	lr

08000224 <__divsi3>:
 8000224:	4603      	mov	r3, r0
 8000226:	430b      	orrs	r3, r1
 8000228:	d47f      	bmi.n	800032a <__divsi3+0x106>
 800022a:	2200      	movs	r2, #0
 800022c:	0843      	lsrs	r3, r0, #1
 800022e:	428b      	cmp	r3, r1
 8000230:	d374      	bcc.n	800031c <__divsi3+0xf8>
 8000232:	0903      	lsrs	r3, r0, #4
 8000234:	428b      	cmp	r3, r1
 8000236:	d35f      	bcc.n	80002f8 <__divsi3+0xd4>
 8000238:	0a03      	lsrs	r3, r0, #8
 800023a:	428b      	cmp	r3, r1
 800023c:	d344      	bcc.n	80002c8 <__divsi3+0xa4>
 800023e:	0b03      	lsrs	r3, r0, #12
 8000240:	428b      	cmp	r3, r1
 8000242:	d328      	bcc.n	8000296 <__divsi3+0x72>
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d30d      	bcc.n	8000266 <__divsi3+0x42>
 800024a:	22ff      	movs	r2, #255	; 0xff
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	ba12      	rev	r2, r2
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d302      	bcc.n	800025c <__divsi3+0x38>
 8000256:	1212      	asrs	r2, r2, #8
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	d065      	beq.n	8000328 <__divsi3+0x104>
 800025c:	0b03      	lsrs	r3, r0, #12
 800025e:	428b      	cmp	r3, r1
 8000260:	d319      	bcc.n	8000296 <__divsi3+0x72>
 8000262:	e000      	b.n	8000266 <__divsi3+0x42>
 8000264:	0a09      	lsrs	r1, r1, #8
 8000266:	0bc3      	lsrs	r3, r0, #15
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x4c>
 800026c:	03cb      	lsls	r3, r1, #15
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b83      	lsrs	r3, r0, #14
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x58>
 8000278:	038b      	lsls	r3, r1, #14
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b43      	lsrs	r3, r0, #13
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x64>
 8000284:	034b      	lsls	r3, r1, #13
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b03      	lsrs	r3, r0, #12
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x70>
 8000290:	030b      	lsls	r3, r1, #12
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0ac3      	lsrs	r3, r0, #11
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x7c>
 800029c:	02cb      	lsls	r3, r1, #11
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a83      	lsrs	r3, r0, #10
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x88>
 80002a8:	028b      	lsls	r3, r1, #10
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a43      	lsrs	r3, r0, #9
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x94>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a03      	lsrs	r3, r0, #8
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0xa0>
 80002c0:	020b      	lsls	r3, r1, #8
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	d2cd      	bcs.n	8000264 <__divsi3+0x40>
 80002c8:	09c3      	lsrs	r3, r0, #7
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xae>
 80002ce:	01cb      	lsls	r3, r1, #7
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0983      	lsrs	r3, r0, #6
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xba>
 80002da:	018b      	lsls	r3, r1, #6
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0943      	lsrs	r3, r0, #5
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xc6>
 80002e6:	014b      	lsls	r3, r1, #5
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0903      	lsrs	r3, r0, #4
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xd2>
 80002f2:	010b      	lsls	r3, r1, #4
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	08c3      	lsrs	r3, r0, #3
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xde>
 80002fe:	00cb      	lsls	r3, r1, #3
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0883      	lsrs	r3, r0, #2
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xea>
 800030a:	008b      	lsls	r3, r1, #2
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0843      	lsrs	r3, r0, #1
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xf6>
 8000316:	004b      	lsls	r3, r1, #1
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	1a41      	subs	r1, r0, r1
 800031e:	d200      	bcs.n	8000322 <__divsi3+0xfe>
 8000320:	4601      	mov	r1, r0
 8000322:	4152      	adcs	r2, r2
 8000324:	4610      	mov	r0, r2
 8000326:	4770      	bx	lr
 8000328:	e05d      	b.n	80003e6 <__divsi3+0x1c2>
 800032a:	0fca      	lsrs	r2, r1, #31
 800032c:	d000      	beq.n	8000330 <__divsi3+0x10c>
 800032e:	4249      	negs	r1, r1
 8000330:	1003      	asrs	r3, r0, #32
 8000332:	d300      	bcc.n	8000336 <__divsi3+0x112>
 8000334:	4240      	negs	r0, r0
 8000336:	4053      	eors	r3, r2
 8000338:	2200      	movs	r2, #0
 800033a:	469c      	mov	ip, r3
 800033c:	0903      	lsrs	r3, r0, #4
 800033e:	428b      	cmp	r3, r1
 8000340:	d32d      	bcc.n	800039e <__divsi3+0x17a>
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d312      	bcc.n	800036e <__divsi3+0x14a>
 8000348:	22fc      	movs	r2, #252	; 0xfc
 800034a:	0189      	lsls	r1, r1, #6
 800034c:	ba12      	rev	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d30c      	bcc.n	800036e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d308      	bcc.n	800036e <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d304      	bcc.n	800036e <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	d03a      	beq.n	80003de <__divsi3+0x1ba>
 8000368:	1192      	asrs	r2, r2, #6
 800036a:	e000      	b.n	800036e <__divsi3+0x14a>
 800036c:	0989      	lsrs	r1, r1, #6
 800036e:	09c3      	lsrs	r3, r0, #7
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x154>
 8000374:	01cb      	lsls	r3, r1, #7
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0983      	lsrs	r3, r0, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x160>
 8000380:	018b      	lsls	r3, r1, #6
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0943      	lsrs	r3, r0, #5
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x16c>
 800038c:	014b      	lsls	r3, r1, #5
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0903      	lsrs	r3, r0, #4
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x178>
 8000398:	010b      	lsls	r3, r1, #4
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	08c3      	lsrs	r3, r0, #3
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x184>
 80003a4:	00cb      	lsls	r3, r1, #3
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0883      	lsrs	r3, r0, #2
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x190>
 80003b0:	008b      	lsls	r3, r1, #2
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	d2d9      	bcs.n	800036c <__divsi3+0x148>
 80003b8:	0843      	lsrs	r3, r0, #1
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d301      	bcc.n	80003c2 <__divsi3+0x19e>
 80003be:	004b      	lsls	r3, r1, #1
 80003c0:	1ac0      	subs	r0, r0, r3
 80003c2:	4152      	adcs	r2, r2
 80003c4:	1a41      	subs	r1, r0, r1
 80003c6:	d200      	bcs.n	80003ca <__divsi3+0x1a6>
 80003c8:	4601      	mov	r1, r0
 80003ca:	4663      	mov	r3, ip
 80003cc:	4152      	adcs	r2, r2
 80003ce:	105b      	asrs	r3, r3, #1
 80003d0:	4610      	mov	r0, r2
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x1b4>
 80003d4:	4240      	negs	r0, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d500      	bpl.n	80003dc <__divsi3+0x1b8>
 80003da:	4249      	negs	r1, r1
 80003dc:	4770      	bx	lr
 80003de:	4663      	mov	r3, ip
 80003e0:	105b      	asrs	r3, r3, #1
 80003e2:	d300      	bcc.n	80003e6 <__divsi3+0x1c2>
 80003e4:	4240      	negs	r0, r0
 80003e6:	b501      	push	{r0, lr}
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 f805 	bl	80003f8 <__aeabi_idiv0>
 80003ee:	bd02      	pop	{r1, pc}

080003f0 <__aeabi_idivmod>:
 80003f0:	2900      	cmp	r1, #0
 80003f2:	d0f8      	beq.n	80003e6 <__divsi3+0x1c2>
 80003f4:	e716      	b.n	8000224 <__divsi3>
 80003f6:	4770      	bx	lr

080003f8 <__aeabi_idiv0>:
 80003f8:	4770      	bx	lr
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <TimerBlinkIT>:
uint8_t OutOfRangeMes[50] = "OutOfRange\n";
uint8_t EndOfParsingMes[50] = "EndOfParsing\n";
uint8_t ParsingMes[50] = "Parsing";
int CurrentPeriod = 1000;

void TimerBlinkIT(){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_9);
 8000400:	2380      	movs	r3, #128	; 0x80
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	4a03      	ldr	r2, [pc, #12]	; (8000414 <TimerBlinkIT+0x18>)
 8000406:	0019      	movs	r1, r3
 8000408:	0010      	movs	r0, r2
 800040a:	f000 fee4 	bl	80011d6 <HAL_GPIO_TogglePin>
}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	50000c00 	.word	0x50000c00

08000418 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000418:	b590      	push	{r4, r7, lr}
 800041a:	b091      	sub	sp, #68	; 0x44
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]

  if(huart == &huart2) {
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	4b4e      	ldr	r3, [pc, #312]	; (800055c <HAL_UART_RxCpltCallback+0x144>)
 8000424:	429a      	cmp	r2, r3
 8000426:	d000      	beq.n	800042a <HAL_UART_RxCpltCallback+0x12>
 8000428:	e093      	b.n	8000552 <HAL_UART_RxCpltCallback+0x13a>
	  //HAL_UART_Transmit_IT(&huart2, buf, 1);
	  //HAL_UART_Transmit(&huart2, test, strlen((const char*)test), 100);
	  HAL_UART_Receive_IT(&huart2, RxBuf, 1);
 800042a:	494d      	ldr	r1, [pc, #308]	; (8000560 <HAL_UART_RxCpltCallback+0x148>)
 800042c:	4b4b      	ldr	r3, [pc, #300]	; (800055c <HAL_UART_RxCpltCallback+0x144>)
 800042e:	2201      	movs	r2, #1
 8000430:	0018      	movs	r0, r3
 8000432:	f002 f921 	bl	8002678 <HAL_UART_Receive_IT>
//		  HAL_FLASH_Program_IT(FLASH_CR_PG, 0x0801F800, 1);
//	  }else{
//		  HAL_UART_Transmit(&huart2, WrongSeqMes, strlen((const char*)WrongSeqMes), 100);
//	  }
	  //HAL_UART_Transmit(&huart2, ParsingMes, strlen((const char*)ParsingMes), 100);
	  if (ParsingSTATUS == WAITING){
 8000436:	4b4b      	ldr	r3, [pc, #300]	; (8000564 <HAL_UART_RxCpltCallback+0x14c>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d11e      	bne.n	800047c <HAL_UART_RxCpltCallback+0x64>
		  if(RxBuf[0] == FIRSTCHAR){
 800043e:	4b48      	ldr	r3, [pc, #288]	; (8000560 <HAL_UART_RxCpltCallback+0x148>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b3a      	cmp	r3, #58	; 0x3a
 8000444:	d10e      	bne.n	8000464 <HAL_UART_RxCpltCallback+0x4c>
			  ParsingSTATUS = PARSING;
 8000446:	4b47      	ldr	r3, [pc, #284]	; (8000564 <HAL_UART_RxCpltCallback+0x14c>)
 8000448:	2201      	movs	r2, #1
 800044a:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit_IT(&huart2, ParsingMes, strlen((const char*)ParsingMes));
 800044c:	4b46      	ldr	r3, [pc, #280]	; (8000568 <HAL_UART_RxCpltCallback+0x150>)
 800044e:	0018      	movs	r0, r3
 8000450:	f7ff fe56 	bl	8000100 <strlen>
 8000454:	0003      	movs	r3, r0
 8000456:	b29a      	uxth	r2, r3
 8000458:	4943      	ldr	r1, [pc, #268]	; (8000568 <HAL_UART_RxCpltCallback+0x150>)
 800045a:	4b40      	ldr	r3, [pc, #256]	; (800055c <HAL_UART_RxCpltCallback+0x144>)
 800045c:	0018      	movs	r0, r3
 800045e:	f002 f863 	bl	8002528 <HAL_UART_Transmit_IT>
				  ParsingSTATUS = WAITING;
			  }
		  }
	  }
  }
}
 8000462:	e076      	b.n	8000552 <HAL_UART_RxCpltCallback+0x13a>
			  HAL_UART_Transmit_IT(&huart2, WrongSeqMes, strlen((const char*)WrongSeqMes));
 8000464:	4b41      	ldr	r3, [pc, #260]	; (800056c <HAL_UART_RxCpltCallback+0x154>)
 8000466:	0018      	movs	r0, r3
 8000468:	f7ff fe4a 	bl	8000100 <strlen>
 800046c:	0003      	movs	r3, r0
 800046e:	b29a      	uxth	r2, r3
 8000470:	493e      	ldr	r1, [pc, #248]	; (800056c <HAL_UART_RxCpltCallback+0x154>)
 8000472:	4b3a      	ldr	r3, [pc, #232]	; (800055c <HAL_UART_RxCpltCallback+0x144>)
 8000474:	0018      	movs	r0, r3
 8000476:	f002 f857 	bl	8002528 <HAL_UART_Transmit_IT>
}
 800047a:	e06a      	b.n	8000552 <HAL_UART_RxCpltCallback+0x13a>
	  }else if(ParsingSTATUS == PARSING){
 800047c:	4b39      	ldr	r3, [pc, #228]	; (8000564 <HAL_UART_RxCpltCallback+0x14c>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d166      	bne.n	8000552 <HAL_UART_RxCpltCallback+0x13a>
		  if(RxBuf[0] == LASTCHAR){
 8000484:	4b36      	ldr	r3, [pc, #216]	; (8000560 <HAL_UART_RxCpltCallback+0x148>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b3b      	cmp	r3, #59	; 0x3b
 800048a:	d127      	bne.n	80004dc <HAL_UART_RxCpltCallback+0xc4>
			  ParsingSTATUS = EndOfParsing;
 800048c:	4b35      	ldr	r3, [pc, #212]	; (8000564 <HAL_UART_RxCpltCallback+0x14c>)
 800048e:	2202      	movs	r2, #2
 8000490:	701a      	strb	r2, [r3, #0]
			  uint8_t temp[50] = {};
 8000492:	240c      	movs	r4, #12
 8000494:	193b      	adds	r3, r7, r4
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	3304      	adds	r3, #4
 800049c:	222e      	movs	r2, #46	; 0x2e
 800049e:	2100      	movs	r1, #0
 80004a0:	0018      	movs	r0, r3
 80004a2:	f004 f929 	bl	80046f8 <memset>
			  strcat((char *)temp, (char *)EndOfParsingMes);
 80004a6:	4a32      	ldr	r2, [pc, #200]	; (8000570 <HAL_UART_RxCpltCallback+0x158>)
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	0011      	movs	r1, r2
 80004ac:	0018      	movs	r0, r3
 80004ae:	f004 f92b 	bl	8004708 <strcat>
			  strcat((char *)temp, (char *)RxMessage);
 80004b2:	4a30      	ldr	r2, [pc, #192]	; (8000574 <HAL_UART_RxCpltCallback+0x15c>)
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	0011      	movs	r1, r2
 80004b8:	0018      	movs	r0, r3
 80004ba:	f004 f925 	bl	8004708 <strcat>
			  HAL_UART_Transmit_IT(&huart2, temp, strlen((const char*)temp));
 80004be:	193b      	adds	r3, r7, r4
 80004c0:	0018      	movs	r0, r3
 80004c2:	f7ff fe1d 	bl	8000100 <strlen>
 80004c6:	0003      	movs	r3, r0
 80004c8:	b29a      	uxth	r2, r3
 80004ca:	1939      	adds	r1, r7, r4
 80004cc:	4b23      	ldr	r3, [pc, #140]	; (800055c <HAL_UART_RxCpltCallback+0x144>)
 80004ce:	0018      	movs	r0, r3
 80004d0:	f002 f82a 	bl	8002528 <HAL_UART_Transmit_IT>
			  LastCharCount = 0;
 80004d4:	4b28      	ldr	r3, [pc, #160]	; (8000578 <HAL_UART_RxCpltCallback+0x160>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	701a      	strb	r2, [r3, #0]
}
 80004da:	e03a      	b.n	8000552 <HAL_UART_RxCpltCallback+0x13a>
			  if (LastCharCount < 100){
 80004dc:	4b26      	ldr	r3, [pc, #152]	; (8000578 <HAL_UART_RxCpltCallback+0x160>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b63      	cmp	r3, #99	; 0x63
 80004e2:	d825      	bhi.n	8000530 <HAL_UART_RxCpltCallback+0x118>
				  if (RxBuf[0] >= 0x30 && RxBuf[0] <= 0x39){
 80004e4:	4b1e      	ldr	r3, [pc, #120]	; (8000560 <HAL_UART_RxCpltCallback+0x148>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b2f      	cmp	r3, #47	; 0x2f
 80004ea:	d90f      	bls.n	800050c <HAL_UART_RxCpltCallback+0xf4>
 80004ec:	4b1c      	ldr	r3, [pc, #112]	; (8000560 <HAL_UART_RxCpltCallback+0x148>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b39      	cmp	r3, #57	; 0x39
 80004f2:	d80b      	bhi.n	800050c <HAL_UART_RxCpltCallback+0xf4>
					  RxMessage[LastCharCount++] = RxBuf[0];
 80004f4:	4b20      	ldr	r3, [pc, #128]	; (8000578 <HAL_UART_RxCpltCallback+0x160>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	1c5a      	adds	r2, r3, #1
 80004fa:	b2d1      	uxtb	r1, r2
 80004fc:	4a1e      	ldr	r2, [pc, #120]	; (8000578 <HAL_UART_RxCpltCallback+0x160>)
 80004fe:	7011      	strb	r1, [r2, #0]
 8000500:	001a      	movs	r2, r3
 8000502:	4b17      	ldr	r3, [pc, #92]	; (8000560 <HAL_UART_RxCpltCallback+0x148>)
 8000504:	7819      	ldrb	r1, [r3, #0]
 8000506:	4b1b      	ldr	r3, [pc, #108]	; (8000574 <HAL_UART_RxCpltCallback+0x15c>)
 8000508:	5499      	strb	r1, [r3, r2]
}
 800050a:	e022      	b.n	8000552 <HAL_UART_RxCpltCallback+0x13a>
					  HAL_UART_Transmit_IT(&huart2, WrongSeqMes, strlen((const char*)WrongSeqMes));
 800050c:	4b17      	ldr	r3, [pc, #92]	; (800056c <HAL_UART_RxCpltCallback+0x154>)
 800050e:	0018      	movs	r0, r3
 8000510:	f7ff fdf6 	bl	8000100 <strlen>
 8000514:	0003      	movs	r3, r0
 8000516:	b29a      	uxth	r2, r3
 8000518:	4914      	ldr	r1, [pc, #80]	; (800056c <HAL_UART_RxCpltCallback+0x154>)
 800051a:	4b10      	ldr	r3, [pc, #64]	; (800055c <HAL_UART_RxCpltCallback+0x144>)
 800051c:	0018      	movs	r0, r3
 800051e:	f002 f803 	bl	8002528 <HAL_UART_Transmit_IT>
					  ParsingSTATUS = WAITING;
 8000522:	4b10      	ldr	r3, [pc, #64]	; (8000564 <HAL_UART_RxCpltCallback+0x14c>)
 8000524:	2200      	movs	r2, #0
 8000526:	701a      	strb	r2, [r3, #0]
					  LastCharCount = 0;
 8000528:	4b13      	ldr	r3, [pc, #76]	; (8000578 <HAL_UART_RxCpltCallback+0x160>)
 800052a:	2200      	movs	r2, #0
 800052c:	701a      	strb	r2, [r3, #0]
}
 800052e:	e010      	b.n	8000552 <HAL_UART_RxCpltCallback+0x13a>
				  HAL_UART_Transmit_IT(&huart2, OutOfRangeMes, strlen((const char*)OutOfRangeMes));
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_UART_RxCpltCallback+0x164>)
 8000532:	0018      	movs	r0, r3
 8000534:	f7ff fde4 	bl	8000100 <strlen>
 8000538:	0003      	movs	r3, r0
 800053a:	b29a      	uxth	r2, r3
 800053c:	490f      	ldr	r1, [pc, #60]	; (800057c <HAL_UART_RxCpltCallback+0x164>)
 800053e:	4b07      	ldr	r3, [pc, #28]	; (800055c <HAL_UART_RxCpltCallback+0x144>)
 8000540:	0018      	movs	r0, r3
 8000542:	f001 fff1 	bl	8002528 <HAL_UART_Transmit_IT>
				  LastCharCount = 0;
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <HAL_UART_RxCpltCallback+0x160>)
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]
				  ParsingSTATUS = WAITING;
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <HAL_UART_RxCpltCallback+0x14c>)
 800054e:	2200      	movs	r2, #0
 8000550:	701a      	strb	r2, [r3, #0]
}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	b011      	add	sp, #68	; 0x44
 8000558:	bd90      	pop	{r4, r7, pc}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	200001e4 	.word	0x200001e4
 8000560:	20000160 	.word	0x20000160
 8000564:	2000015c 	.word	0x2000015c
 8000568:	2000009c 	.word	0x2000009c
 800056c:	20000000 	.word	0x20000000
 8000570:	20000068 	.word	0x20000068
 8000574:	20000164 	.word	0x20000164
 8000578:	2000015d 	.word	0x2000015d
 800057c:	20000034 	.word	0x20000034

08000580 <ChangeDelayBlinking>:


void ChangeDelayBlinking(){
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
	if (ParsingSTATUS == EndOfParsing){
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <ChangeDelayBlinking+0x30>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b02      	cmp	r3, #2
 800058c:	d10b      	bne.n	80005a6 <ChangeDelayBlinking+0x26>
		 ParsingSTATUS = WAITING;
 800058e:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <ChangeDelayBlinking+0x30>)
 8000590:	2200      	movs	r2, #0
 8000592:	701a      	strb	r2, [r3, #0]

		 int period = atoi((const char*)RxMessage);
 8000594:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <ChangeDelayBlinking+0x34>)
 8000596:	0018      	movs	r0, r3
 8000598:	f004 f87e 	bl	8004698 <atoi>
 800059c:	0003      	movs	r3, r0
 800059e:	607b      	str	r3, [r7, #4]
		 TIM6->ARR = period;
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <ChangeDelayBlinking+0x38>)
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b002      	add	sp, #8
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	2000015c 	.word	0x2000015c
 80005b4:	20000164 	.word	0x20000164
 80005b8:	40001000 	.word	0x40001000

080005bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b089      	sub	sp, #36	; 0x24
 80005c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	240c      	movs	r4, #12
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	0018      	movs	r0, r3
 80005c8:	2314      	movs	r3, #20
 80005ca:	001a      	movs	r2, r3
 80005cc:	2100      	movs	r1, #0
 80005ce:	f004 f893 	bl	80046f8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005d2:	4b21      	ldr	r3, [pc, #132]	; (8000658 <MX_GPIO_Init+0x9c>)
 80005d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005d6:	4b20      	ldr	r3, [pc, #128]	; (8000658 <MX_GPIO_Init+0x9c>)
 80005d8:	2120      	movs	r1, #32
 80005da:	430a      	orrs	r2, r1
 80005dc:	635a      	str	r2, [r3, #52]	; 0x34
 80005de:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <MX_GPIO_Init+0x9c>)
 80005e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005e2:	2220      	movs	r2, #32
 80005e4:	4013      	ands	r3, r2
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <MX_GPIO_Init+0x9c>)
 80005ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005ee:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <MX_GPIO_Init+0x9c>)
 80005f0:	2101      	movs	r1, #1
 80005f2:	430a      	orrs	r2, r1
 80005f4:	635a      	str	r2, [r3, #52]	; 0x34
 80005f6:	4b18      	ldr	r3, [pc, #96]	; (8000658 <MX_GPIO_Init+0x9c>)
 80005f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005fa:	2201      	movs	r2, #1
 80005fc:	4013      	ands	r3, r2
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <MX_GPIO_Init+0x9c>)
 8000604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000606:	4b14      	ldr	r3, [pc, #80]	; (8000658 <MX_GPIO_Init+0x9c>)
 8000608:	2108      	movs	r1, #8
 800060a:	430a      	orrs	r2, r1
 800060c:	635a      	str	r2, [r3, #52]	; 0x34
 800060e:	4b12      	ldr	r3, [pc, #72]	; (8000658 <MX_GPIO_Init+0x9c>)
 8000610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000612:	2208      	movs	r2, #8
 8000614:	4013      	ands	r3, r2
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 800061a:	2380      	movs	r3, #128	; 0x80
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	480f      	ldr	r0, [pc, #60]	; (800065c <MX_GPIO_Init+0xa0>)
 8000620:	2200      	movs	r2, #0
 8000622:	0019      	movs	r1, r3
 8000624:	f000 fdba 	bl	800119c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000628:	193b      	adds	r3, r7, r4
 800062a:	2280      	movs	r2, #128	; 0x80
 800062c:	0092      	lsls	r2, r2, #2
 800062e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000630:	193b      	adds	r3, r7, r4
 8000632:	2201      	movs	r2, #1
 8000634:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	193b      	adds	r3, r7, r4
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	193b      	adds	r3, r7, r4
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000642:	193b      	adds	r3, r7, r4
 8000644:	4a05      	ldr	r2, [pc, #20]	; (800065c <MX_GPIO_Init+0xa0>)
 8000646:	0019      	movs	r1, r3
 8000648:	0010      	movs	r0, r2
 800064a:	f000 fc43 	bl	8000ed4 <HAL_GPIO_Init>

}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	b009      	add	sp, #36	; 0x24
 8000654:	bd90      	pop	{r4, r7, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	40021000 	.word	0x40021000
 800065c:	50000c00 	.word	0x50000c00

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000664:	f000 fa06 	bl	8000a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000668:	f000 f814 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066c:	f7ff ffa6 	bl	80005bc <MX_GPIO_Init>
  MX_TIM6_Init();
 8000670:	f000 f8ba 	bl	80007e8 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000674:	f000 f91e 	bl	80008b4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, RxBuf, 1);
 8000678:	4904      	ldr	r1, [pc, #16]	; (800068c <main+0x2c>)
 800067a:	4b05      	ldr	r3, [pc, #20]	; (8000690 <main+0x30>)
 800067c:	2201      	movs	r2, #1
 800067e:	0018      	movs	r0, r3
 8000680:	f001 fffa 	bl	8002678 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	ChangeDelayBlinking();
 8000684:	f7ff ff7c 	bl	8000580 <ChangeDelayBlinking>
  {
 8000688:	e7fc      	b.n	8000684 <main+0x24>
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	20000160 	.word	0x20000160
 8000690:	200001e4 	.word	0x200001e4

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b093      	sub	sp, #76	; 0x4c
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	2414      	movs	r4, #20
 800069c:	193b      	adds	r3, r7, r4
 800069e:	0018      	movs	r0, r3
 80006a0:	2334      	movs	r3, #52	; 0x34
 80006a2:	001a      	movs	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	f004 f827 	bl	80046f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	0018      	movs	r0, r3
 80006ae:	2310      	movs	r3, #16
 80006b0:	001a      	movs	r2, r3
 80006b2:	2100      	movs	r1, #0
 80006b4:	f004 f820 	bl	80046f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	0018      	movs	r0, r3
 80006be:	f000 fda5 	bl	800120c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2202      	movs	r2, #2
 80006c6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2280      	movs	r2, #128	; 0x80
 80006cc:	0052      	lsls	r2, r2, #1
 80006ce:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	2240      	movs	r2, #64	; 0x40
 80006da:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	0018      	movs	r0, r3
 80006e6:	f000 fddd 	bl	80012a4 <HAL_RCC_OscConfig>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006ee:	f000 f819 	bl	8000724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2207      	movs	r2, #7
 80006f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2100      	movs	r1, #0
 800070e:	0018      	movs	r0, r3
 8000710:	f001 f8d8 	bl	80018c4 <HAL_RCC_ClockConfig>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000718:	f000 f804 	bl	8000724 <Error_Handler>
  }
}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	b013      	add	sp, #76	; 0x4c
 8000722:	bd90      	pop	{r4, r7, pc}

08000724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072c:	e7fe      	b.n	800072c <Error_Handler+0x8>
	...

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <HAL_MspInit+0x44>)
 8000738:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <HAL_MspInit+0x44>)
 800073c:	2101      	movs	r1, #1
 800073e:	430a      	orrs	r2, r1
 8000740:	641a      	str	r2, [r3, #64]	; 0x40
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <HAL_MspInit+0x44>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	2201      	movs	r2, #1
 8000748:	4013      	ands	r3, r2
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <HAL_MspInit+0x44>)
 8000750:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <HAL_MspInit+0x44>)
 8000754:	2180      	movs	r1, #128	; 0x80
 8000756:	0549      	lsls	r1, r1, #21
 8000758:	430a      	orrs	r2, r1
 800075a:	63da      	str	r2, [r3, #60]	; 0x3c
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <HAL_MspInit+0x44>)
 800075e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000760:	2380      	movs	r3, #128	; 0x80
 8000762:	055b      	lsls	r3, r3, #21
 8000764:	4013      	ands	r3, r2
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b002      	add	sp, #8
 8000770:	bd80      	pop	{r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	40021000 	.word	0x40021000

08000778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800077c:	e7fe      	b.n	800077c <NMI_Handler+0x4>

0800077e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <HardFault_Handler+0x4>

08000784 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800079c:	f000 f9d4 	bl	8000b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80007ac:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <TIM6_IRQHandler+0x18>)
 80007ae:	0018      	movs	r0, r3
 80007b0:	f001 fc14 	bl	8001fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */
  TimerBlinkIT();
 80007b4:	f7ff fe22 	bl	80003fc <TimerBlinkIT>

  /* USER CODE END TIM6_IRQn 1 */
}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	20000198 	.word	0x20000198

080007c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007c8:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <USART2_IRQHandler+0x14>)
 80007ca:	0018      	movs	r0, r3
 80007cc:	f001 ffac 	bl	8002728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007d0:	46c0      	nop			; (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	200001e4 	.word	0x200001e4

080007dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	0018      	movs	r0, r3
 80007f2:	230c      	movs	r3, #12
 80007f4:	001a      	movs	r2, r3
 80007f6:	2100      	movs	r1, #0
 80007f8:	f003 ff7e 	bl	80046f8 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007fc:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_TIM6_Init+0x74>)
 80007fe:	4a18      	ldr	r2, [pc, #96]	; (8000860 <MX_TIM6_Init+0x78>)
 8000800:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 12000;
 8000802:	4b16      	ldr	r3, [pc, #88]	; (800085c <MX_TIM6_Init+0x74>)
 8000804:	4a17      	ldr	r2, [pc, #92]	; (8000864 <MX_TIM6_Init+0x7c>)
 8000806:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_TIM6_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_TIM6_Init+0x74>)
 8000810:	22fa      	movs	r2, #250	; 0xfa
 8000812:	0092      	lsls	r2, r2, #2
 8000814:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_TIM6_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_TIM6_Init+0x74>)
 800081e:	0018      	movs	r0, r3
 8000820:	f001 fb2e 	bl	8001e80 <HAL_TIM_Base_Init>
 8000824:	1e03      	subs	r3, r0, #0
 8000826:	d001      	beq.n	800082c <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8000828:	f7ff ff7c 	bl	8000724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000838:	1d3a      	adds	r2, r7, #4
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_TIM6_Init+0x74>)
 800083c:	0011      	movs	r1, r2
 800083e:	0018      	movs	r0, r3
 8000840:	f001 fd9c 	bl	800237c <HAL_TIMEx_MasterConfigSynchronization>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8000848:	f7ff ff6c 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 800084c:	4b03      	ldr	r3, [pc, #12]	; (800085c <MX_TIM6_Init+0x74>)
 800084e:	0018      	movs	r0, r3
 8000850:	f001 fb6e 	bl	8001f30 <HAL_TIM_Base_Start_IT>

  /* USER CODE END TIM6_Init 2 */

}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	b004      	add	sp, #16
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000198 	.word	0x20000198
 8000860:	40001000 	.word	0x40001000
 8000864:	00002ee0 	.word	0x00002ee0

08000868 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0d      	ldr	r2, [pc, #52]	; (80008ac <HAL_TIM_Base_MspInit+0x44>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d113      	bne.n	80008a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <HAL_TIM_Base_MspInit+0x48>)
 800087c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <HAL_TIM_Base_MspInit+0x48>)
 8000880:	2110      	movs	r1, #16
 8000882:	430a      	orrs	r2, r1
 8000884:	63da      	str	r2, [r3, #60]	; 0x3c
 8000886:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <HAL_TIM_Base_MspInit+0x48>)
 8000888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800088a:	2210      	movs	r2, #16
 800088c:	4013      	ands	r3, r2
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	2011      	movs	r0, #17
 8000898:	f000 fa1e 	bl	8000cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800089c:	2011      	movs	r0, #17
 800089e:	f000 fa30 	bl	8000d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b004      	add	sp, #16
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	40001000 	.word	0x40001000
 80008b0:	40021000 	.word	0x40021000

080008b4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b8:	4b23      	ldr	r3, [pc, #140]	; (8000948 <MX_USART2_UART_Init+0x94>)
 80008ba:	4a24      	ldr	r2, [pc, #144]	; (800094c <MX_USART2_UART_Init+0x98>)
 80008bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008be:	4b22      	ldr	r3, [pc, #136]	; (8000948 <MX_USART2_UART_Init+0x94>)
 80008c0:	22e1      	movs	r2, #225	; 0xe1
 80008c2:	0252      	lsls	r2, r2, #9
 80008c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b20      	ldr	r3, [pc, #128]	; (8000948 <MX_USART2_UART_Init+0x94>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <MX_USART2_UART_Init+0x94>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <MX_USART2_UART_Init+0x94>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <MX_USART2_UART_Init+0x94>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <MX_USART2_UART_Init+0x94>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b18      	ldr	r3, [pc, #96]	; (8000948 <MX_USART2_UART_Init+0x94>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ea:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_USART2_UART_Init+0x94>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <MX_USART2_UART_Init+0x94>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_USART2_UART_Init+0x94>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_USART2_UART_Init+0x94>)
 80008fe:	0018      	movs	r0, r3
 8000900:	f001 fdbc 	bl	800247c <HAL_UART_Init>
 8000904:	1e03      	subs	r3, r0, #0
 8000906:	d001      	beq.n	800090c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000908:	f7ff ff0c 	bl	8000724 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800090c:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_USART2_UART_Init+0x94>)
 800090e:	2100      	movs	r1, #0
 8000910:	0018      	movs	r0, r3
 8000912:	f003 fde1 	bl	80044d8 <HAL_UARTEx_SetTxFifoThreshold>
 8000916:	1e03      	subs	r3, r0, #0
 8000918:	d001      	beq.n	800091e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800091a:	f7ff ff03 	bl	8000724 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800091e:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <MX_USART2_UART_Init+0x94>)
 8000920:	2100      	movs	r1, #0
 8000922:	0018      	movs	r0, r3
 8000924:	f003 fe18 	bl	8004558 <HAL_UARTEx_SetRxFifoThreshold>
 8000928:	1e03      	subs	r3, r0, #0
 800092a:	d001      	beq.n	8000930 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800092c:	f7ff fefa 	bl	8000724 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <MX_USART2_UART_Init+0x94>)
 8000932:	0018      	movs	r0, r3
 8000934:	f003 fd96 	bl	8004464 <HAL_UARTEx_DisableFifoMode>
 8000938:	1e03      	subs	r3, r0, #0
 800093a:	d001      	beq.n	8000940 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800093c:	f7ff fef2 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	200001e4 	.word	0x200001e4
 800094c:	40004400 	.word	0x40004400

08000950 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b091      	sub	sp, #68	; 0x44
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	232c      	movs	r3, #44	; 0x2c
 800095a:	18fb      	adds	r3, r7, r3
 800095c:	0018      	movs	r0, r3
 800095e:	2314      	movs	r3, #20
 8000960:	001a      	movs	r2, r3
 8000962:	2100      	movs	r1, #0
 8000964:	f003 fec8 	bl	80046f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000968:	2410      	movs	r4, #16
 800096a:	193b      	adds	r3, r7, r4
 800096c:	0018      	movs	r0, r3
 800096e:	231c      	movs	r3, #28
 8000970:	001a      	movs	r2, r3
 8000972:	2100      	movs	r1, #0
 8000974:	f003 fec0 	bl	80046f8 <memset>
  if(uartHandle->Instance==USART2)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a26      	ldr	r2, [pc, #152]	; (8000a18 <HAL_UART_MspInit+0xc8>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d146      	bne.n	8000a10 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000982:	193b      	adds	r3, r7, r4
 8000984:	2202      	movs	r2, #2
 8000986:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000988:	193b      	adds	r3, r7, r4
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800098e:	193b      	adds	r3, r7, r4
 8000990:	0018      	movs	r0, r3
 8000992:	f001 f941 	bl	8001c18 <HAL_RCCEx_PeriphCLKConfig>
 8000996:	1e03      	subs	r3, r0, #0
 8000998:	d001      	beq.n	800099e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800099a:	f7ff fec3 	bl	8000724 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800099e:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <HAL_UART_MspInit+0xcc>)
 80009a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009a2:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <HAL_UART_MspInit+0xcc>)
 80009a4:	2180      	movs	r1, #128	; 0x80
 80009a6:	0289      	lsls	r1, r1, #10
 80009a8:	430a      	orrs	r2, r1
 80009aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <HAL_UART_MspInit+0xcc>)
 80009ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	029b      	lsls	r3, r3, #10
 80009b4:	4013      	ands	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <HAL_UART_MspInit+0xcc>)
 80009bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <HAL_UART_MspInit+0xcc>)
 80009c0:	2101      	movs	r1, #1
 80009c2:	430a      	orrs	r2, r1
 80009c4:	635a      	str	r2, [r3, #52]	; 0x34
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_UART_MspInit+0xcc>)
 80009c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ca:	2201      	movs	r2, #1
 80009cc:	4013      	ands	r3, r2
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009d2:	212c      	movs	r1, #44	; 0x2c
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	220c      	movs	r2, #12
 80009d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2202      	movs	r2, #2
 80009de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2202      	movs	r2, #2
 80009ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2201      	movs	r2, #1
 80009f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	187a      	adds	r2, r7, r1
 80009f4:	23a0      	movs	r3, #160	; 0xa0
 80009f6:	05db      	lsls	r3, r3, #23
 80009f8:	0011      	movs	r1, r2
 80009fa:	0018      	movs	r0, r3
 80009fc:	f000 fa6a 	bl	8000ed4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2100      	movs	r1, #0
 8000a04:	201c      	movs	r0, #28
 8000a06:	f000 f967 	bl	8000cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a0a:	201c      	movs	r0, #28
 8000a0c:	f000 f979 	bl	8000d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b011      	add	sp, #68	; 0x44
 8000a16:	bd90      	pop	{r4, r7, pc}
 8000a18:	40004400 	.word	0x40004400
 8000a1c:	40021000 	.word	0x40021000

08000a20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a20:	480d      	ldr	r0, [pc, #52]	; (8000a58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a22:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a24:	f7ff feda 	bl	80007dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a28:	480c      	ldr	r0, [pc, #48]	; (8000a5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a2a:	490d      	ldr	r1, [pc, #52]	; (8000a60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <LoopForever+0xe>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a40:	4c0a      	ldr	r4, [pc, #40]	; (8000a6c <LoopForever+0x16>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a4e:	f003 fe2f 	bl	80046b0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a52:	f7ff fe05 	bl	8000660 <main>

08000a56 <LoopForever>:

LoopForever:
  b LoopForever
 8000a56:	e7fe      	b.n	8000a56 <LoopForever>
  ldr   r0, =_estack
 8000a58:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a60:	20000140 	.word	0x20000140
  ldr r2, =_sidata
 8000a64:	08004a04 	.word	0x08004a04
  ldr r2, =_sbss
 8000a68:	20000140 	.word	0x20000140
  ldr r4, =_ebss
 8000a6c:	2000027c 	.word	0x2000027c

08000a70 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC1_IRQHandler>
	...

08000a74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <HAL_Init+0x3c>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <HAL_Init+0x3c>)
 8000a86:	2180      	movs	r1, #128	; 0x80
 8000a88:	0049      	lsls	r1, r1, #1
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a8e:	2003      	movs	r0, #3
 8000a90:	f000 f810 	bl	8000ab4 <HAL_InitTick>
 8000a94:	1e03      	subs	r3, r0, #0
 8000a96:	d003      	beq.n	8000aa0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a98:	1dfb      	adds	r3, r7, #7
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	701a      	strb	r2, [r3, #0]
 8000a9e:	e001      	b.n	8000aa4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000aa0:	f7ff fe46 	bl	8000730 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aa4:	1dfb      	adds	r3, r7, #7
 8000aa6:	781b      	ldrb	r3, [r3, #0]
}
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b002      	add	sp, #8
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40022000 	.word	0x40022000

08000ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000abc:	230f      	movs	r3, #15
 8000abe:	18fb      	adds	r3, r7, r3
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <HAL_InitTick+0x88>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d02b      	beq.n	8000b24 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000acc:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <HAL_InitTick+0x8c>)
 8000ace:	681c      	ldr	r4, [r3, #0]
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <HAL_InitTick+0x88>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	23fa      	movs	r3, #250	; 0xfa
 8000ad8:	0098      	lsls	r0, r3, #2
 8000ada:	f7ff fb19 	bl	8000110 <__udivsi3>
 8000ade:	0003      	movs	r3, r0
 8000ae0:	0019      	movs	r1, r3
 8000ae2:	0020      	movs	r0, r4
 8000ae4:	f7ff fb14 	bl	8000110 <__udivsi3>
 8000ae8:	0003      	movs	r3, r0
 8000aea:	0018      	movs	r0, r3
 8000aec:	f000 f919 	bl	8000d22 <HAL_SYSTICK_Config>
 8000af0:	1e03      	subs	r3, r0, #0
 8000af2:	d112      	bne.n	8000b1a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b03      	cmp	r3, #3
 8000af8:	d80a      	bhi.n	8000b10 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	2301      	movs	r3, #1
 8000afe:	425b      	negs	r3, r3
 8000b00:	2200      	movs	r2, #0
 8000b02:	0018      	movs	r0, r3
 8000b04:	f000 f8e8 	bl	8000cd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <HAL_InitTick+0x90>)
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	e00d      	b.n	8000b2c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b10:	230f      	movs	r3, #15
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	2201      	movs	r2, #1
 8000b16:	701a      	strb	r2, [r3, #0]
 8000b18:	e008      	b.n	8000b2c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b1a:	230f      	movs	r3, #15
 8000b1c:	18fb      	adds	r3, r7, r3
 8000b1e:	2201      	movs	r2, #1
 8000b20:	701a      	strb	r2, [r3, #0]
 8000b22:	e003      	b.n	8000b2c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b24:	230f      	movs	r3, #15
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	2201      	movs	r2, #1
 8000b2a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b2c:	230f      	movs	r3, #15
 8000b2e:	18fb      	adds	r3, r7, r3
 8000b30:	781b      	ldrb	r3, [r3, #0]
}
 8000b32:	0018      	movs	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b005      	add	sp, #20
 8000b38:	bd90      	pop	{r4, r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	200000d8 	.word	0x200000d8
 8000b40:	200000d0 	.word	0x200000d0
 8000b44:	200000d4 	.word	0x200000d4

08000b48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <HAL_IncTick+0x1c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	001a      	movs	r2, r3
 8000b52:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <HAL_IncTick+0x20>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	18d2      	adds	r2, r2, r3
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <HAL_IncTick+0x20>)
 8000b5a:	601a      	str	r2, [r3, #0]
}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	200000d8 	.word	0x200000d8
 8000b68:	20000278 	.word	0x20000278

08000b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b70:	4b02      	ldr	r3, [pc, #8]	; (8000b7c <HAL_GetTick+0x10>)
 8000b72:	681b      	ldr	r3, [r3, #0]
}
 8000b74:	0018      	movs	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	20000278 	.word	0x20000278

08000b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	0002      	movs	r2, r0
 8000b88:	1dfb      	adds	r3, r7, #7
 8000b8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b8c:	1dfb      	adds	r3, r7, #7
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b7f      	cmp	r3, #127	; 0x7f
 8000b92:	d809      	bhi.n	8000ba8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b94:	1dfb      	adds	r3, r7, #7
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	001a      	movs	r2, r3
 8000b9a:	231f      	movs	r3, #31
 8000b9c:	401a      	ands	r2, r3
 8000b9e:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <__NVIC_EnableIRQ+0x30>)
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4091      	lsls	r1, r2
 8000ba4:	000a      	movs	r2, r1
 8000ba6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000ba8:	46c0      	nop			; (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b002      	add	sp, #8
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	e000e100 	.word	0xe000e100

08000bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	0002      	movs	r2, r0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	1dfb      	adds	r3, r7, #7
 8000bc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b7f      	cmp	r3, #127	; 0x7f
 8000bc8:	d828      	bhi.n	8000c1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bca:	4a2f      	ldr	r2, [pc, #188]	; (8000c88 <__NVIC_SetPriority+0xd4>)
 8000bcc:	1dfb      	adds	r3, r7, #7
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b25b      	sxtb	r3, r3
 8000bd2:	089b      	lsrs	r3, r3, #2
 8000bd4:	33c0      	adds	r3, #192	; 0xc0
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	589b      	ldr	r3, [r3, r2]
 8000bda:	1dfa      	adds	r2, r7, #7
 8000bdc:	7812      	ldrb	r2, [r2, #0]
 8000bde:	0011      	movs	r1, r2
 8000be0:	2203      	movs	r2, #3
 8000be2:	400a      	ands	r2, r1
 8000be4:	00d2      	lsls	r2, r2, #3
 8000be6:	21ff      	movs	r1, #255	; 0xff
 8000be8:	4091      	lsls	r1, r2
 8000bea:	000a      	movs	r2, r1
 8000bec:	43d2      	mvns	r2, r2
 8000bee:	401a      	ands	r2, r3
 8000bf0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	019b      	lsls	r3, r3, #6
 8000bf6:	22ff      	movs	r2, #255	; 0xff
 8000bf8:	401a      	ands	r2, r3
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	0018      	movs	r0, r3
 8000c00:	2303      	movs	r3, #3
 8000c02:	4003      	ands	r3, r0
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c08:	481f      	ldr	r0, [pc, #124]	; (8000c88 <__NVIC_SetPriority+0xd4>)
 8000c0a:	1dfb      	adds	r3, r7, #7
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b25b      	sxtb	r3, r3
 8000c10:	089b      	lsrs	r3, r3, #2
 8000c12:	430a      	orrs	r2, r1
 8000c14:	33c0      	adds	r3, #192	; 0xc0
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c1a:	e031      	b.n	8000c80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c1c:	4a1b      	ldr	r2, [pc, #108]	; (8000c8c <__NVIC_SetPriority+0xd8>)
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	0019      	movs	r1, r3
 8000c24:	230f      	movs	r3, #15
 8000c26:	400b      	ands	r3, r1
 8000c28:	3b08      	subs	r3, #8
 8000c2a:	089b      	lsrs	r3, r3, #2
 8000c2c:	3306      	adds	r3, #6
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	18d3      	adds	r3, r2, r3
 8000c32:	3304      	adds	r3, #4
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	1dfa      	adds	r2, r7, #7
 8000c38:	7812      	ldrb	r2, [r2, #0]
 8000c3a:	0011      	movs	r1, r2
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	400a      	ands	r2, r1
 8000c40:	00d2      	lsls	r2, r2, #3
 8000c42:	21ff      	movs	r1, #255	; 0xff
 8000c44:	4091      	lsls	r1, r2
 8000c46:	000a      	movs	r2, r1
 8000c48:	43d2      	mvns	r2, r2
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	019b      	lsls	r3, r3, #6
 8000c52:	22ff      	movs	r2, #255	; 0xff
 8000c54:	401a      	ands	r2, r3
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	4003      	ands	r3, r0
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c64:	4809      	ldr	r0, [pc, #36]	; (8000c8c <__NVIC_SetPriority+0xd8>)
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	001c      	movs	r4, r3
 8000c6c:	230f      	movs	r3, #15
 8000c6e:	4023      	ands	r3, r4
 8000c70:	3b08      	subs	r3, #8
 8000c72:	089b      	lsrs	r3, r3, #2
 8000c74:	430a      	orrs	r2, r1
 8000c76:	3306      	adds	r3, #6
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	18c3      	adds	r3, r0, r3
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	601a      	str	r2, [r3, #0]
}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b003      	add	sp, #12
 8000c86:	bd90      	pop	{r4, r7, pc}
 8000c88:	e000e100 	.word	0xe000e100
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	1e5a      	subs	r2, r3, #1
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	045b      	lsls	r3, r3, #17
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d301      	bcc.n	8000ca8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e010      	b.n	8000cca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <SysTick_Config+0x44>)
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	3a01      	subs	r2, #1
 8000cae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	425b      	negs	r3, r3
 8000cb4:	2103      	movs	r1, #3
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f7ff ff7c 	bl	8000bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <SysTick_Config+0x44>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <SysTick_Config+0x44>)
 8000cc4:	2207      	movs	r2, #7
 8000cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	0018      	movs	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b002      	add	sp, #8
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	e000e010 	.word	0xe000e010

08000cd8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	210f      	movs	r1, #15
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	1c02      	adds	r2, r0, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	b25b      	sxtb	r3, r3
 8000cf2:	0011      	movs	r1, r2
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f7ff ff5d 	bl	8000bb4 <__NVIC_SetPriority>
}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b004      	add	sp, #16
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	0002      	movs	r2, r0
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d0e:	1dfb      	adds	r3, r7, #7
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	b25b      	sxtb	r3, r3
 8000d14:	0018      	movs	r0, r3
 8000d16:	f7ff ff33 	bl	8000b80 <__NVIC_EnableIRQ>
}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b002      	add	sp, #8
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f7ff ffaf 	bl	8000c90 <SysTick_Config>
 8000d32:	0003      	movs	r3, r0
}
 8000d34:	0018      	movs	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b002      	add	sp, #8
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e050      	b.n	8000df0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2225      	movs	r2, #37	; 0x25
 8000d52:	5c9b      	ldrb	r3, [r3, r2]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d008      	beq.n	8000d6c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2204      	movs	r2, #4
 8000d5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2224      	movs	r2, #36	; 0x24
 8000d64:	2100      	movs	r1, #0
 8000d66:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e041      	b.n	8000df0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	210e      	movs	r1, #14
 8000d78:	438a      	bics	r2, r1
 8000d7a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	491c      	ldr	r1, [pc, #112]	; (8000df8 <HAL_DMA_Abort+0xbc>)
 8000d88:	400a      	ands	r2, r1
 8000d8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2101      	movs	r1, #1
 8000d98:	438a      	bics	r2, r1
 8000d9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <HAL_DMA_Abort+0xc0>)
 8000d9e:	6859      	ldr	r1, [r3, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	221c      	movs	r2, #28
 8000da6:	4013      	ands	r3, r2
 8000da8:	2201      	movs	r2, #1
 8000daa:	409a      	lsls	r2, r3
 8000dac:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <HAL_DMA_Abort+0xc0>)
 8000dae:	430a      	orrs	r2, r1
 8000db0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000dba:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d00c      	beq.n	8000dde <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dce:	490a      	ldr	r1, [pc, #40]	; (8000df8 <HAL_DMA_Abort+0xbc>)
 8000dd0:	400a      	ands	r2, r1
 8000dd2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000ddc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2225      	movs	r2, #37	; 0x25
 8000de2:	2101      	movs	r1, #1
 8000de4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2224      	movs	r2, #36	; 0x24
 8000dea:	2100      	movs	r1, #0
 8000dec:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	0018      	movs	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b002      	add	sp, #8
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	fffffeff 	.word	0xfffffeff
 8000dfc:	40020000 	.word	0x40020000

08000e00 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e08:	210f      	movs	r1, #15
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2225      	movs	r2, #37	; 0x25
 8000e14:	5c9b      	ldrb	r3, [r3, r2]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d006      	beq.n	8000e2a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2204      	movs	r2, #4
 8000e20:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	2201      	movs	r2, #1
 8000e26:	701a      	strb	r2, [r3, #0]
 8000e28:	e049      	b.n	8000ebe <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	210e      	movs	r1, #14
 8000e36:	438a      	bics	r2, r1
 8000e38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2101      	movs	r1, #1
 8000e46:	438a      	bics	r2, r1
 8000e48:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e54:	491d      	ldr	r1, [pc, #116]	; (8000ecc <HAL_DMA_Abort_IT+0xcc>)
 8000e56:	400a      	ands	r2, r1
 8000e58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000e5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <HAL_DMA_Abort_IT+0xd0>)
 8000e5c:	6859      	ldr	r1, [r3, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	221c      	movs	r2, #28
 8000e64:	4013      	ands	r3, r2
 8000e66:	2201      	movs	r2, #1
 8000e68:	409a      	lsls	r2, r3
 8000e6a:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <HAL_DMA_Abort_IT+0xd0>)
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000e78:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00c      	beq.n	8000e9c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e8c:	490f      	ldr	r1, [pc, #60]	; (8000ecc <HAL_DMA_Abort_IT+0xcc>)
 8000e8e:	400a      	ands	r2, r1
 8000e90:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000e9a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2225      	movs	r2, #37	; 0x25
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2224      	movs	r2, #36	; 0x24
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d004      	beq.n	8000ebe <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	0010      	movs	r0, r2
 8000ebc:	4798      	blx	r3
    }
  }
  return status;
 8000ebe:	230f      	movs	r3, #15
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	781b      	ldrb	r3, [r3, #0]
}
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b004      	add	sp, #16
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	fffffeff 	.word	0xfffffeff
 8000ed0:	40020000 	.word	0x40020000

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee2:	e147      	b.n	8001174 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2101      	movs	r1, #1
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	4091      	lsls	r1, r2
 8000eee:	000a      	movs	r2, r1
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d100      	bne.n	8000efc <HAL_GPIO_Init+0x28>
 8000efa:	e138      	b.n	800116e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2203      	movs	r2, #3
 8000f02:	4013      	ands	r3, r2
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d005      	beq.n	8000f14 <HAL_GPIO_Init+0x40>
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	4013      	ands	r3, r2
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d130      	bne.n	8000f76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	409a      	lsls	r2, r3
 8000f22:	0013      	movs	r3, r2
 8000f24:	43da      	mvns	r2, r3
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	68da      	ldr	r2, [r3, #12]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	409a      	lsls	r2, r3
 8000f36:	0013      	movs	r3, r2
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	0013      	movs	r3, r2
 8000f52:	43da      	mvns	r2, r3
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	091b      	lsrs	r3, r3, #4
 8000f60:	2201      	movs	r2, #1
 8000f62:	401a      	ands	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	409a      	lsls	r2, r3
 8000f68:	0013      	movs	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d017      	beq.n	8000fb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	409a      	lsls	r2, r3
 8000f90:	0013      	movs	r3, r2
 8000f92:	43da      	mvns	r2, r3
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	0013      	movs	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	4013      	ands	r3, r2
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d123      	bne.n	8001006 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	08da      	lsrs	r2, r3, #3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3208      	adds	r2, #8
 8000fc6:	0092      	lsls	r2, r2, #2
 8000fc8:	58d3      	ldr	r3, [r2, r3]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	2207      	movs	r2, #7
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	220f      	movs	r2, #15
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	691a      	ldr	r2, [r3, #16]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	2107      	movs	r1, #7
 8000fea:	400b      	ands	r3, r1
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	0013      	movs	r3, r2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	08da      	lsrs	r2, r3, #3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3208      	adds	r2, #8
 8001000:	0092      	lsls	r2, r2, #2
 8001002:	6939      	ldr	r1, [r7, #16]
 8001004:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	2203      	movs	r2, #3
 8001012:	409a      	lsls	r2, r3
 8001014:	0013      	movs	r3, r2
 8001016:	43da      	mvns	r2, r3
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2203      	movs	r2, #3
 8001024:	401a      	ands	r2, r3
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	409a      	lsls	r2, r3
 800102c:	0013      	movs	r3, r2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	23c0      	movs	r3, #192	; 0xc0
 8001040:	029b      	lsls	r3, r3, #10
 8001042:	4013      	ands	r3, r2
 8001044:	d100      	bne.n	8001048 <HAL_GPIO_Init+0x174>
 8001046:	e092      	b.n	800116e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001048:	4a50      	ldr	r2, [pc, #320]	; (800118c <HAL_GPIO_Init+0x2b8>)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	3318      	adds	r3, #24
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	589b      	ldr	r3, [r3, r2]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	2203      	movs	r2, #3
 800105a:	4013      	ands	r3, r2
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	220f      	movs	r2, #15
 8001060:	409a      	lsls	r2, r3
 8001062:	0013      	movs	r3, r2
 8001064:	43da      	mvns	r2, r3
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	23a0      	movs	r3, #160	; 0xa0
 8001070:	05db      	lsls	r3, r3, #23
 8001072:	429a      	cmp	r2, r3
 8001074:	d013      	beq.n	800109e <HAL_GPIO_Init+0x1ca>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a45      	ldr	r2, [pc, #276]	; (8001190 <HAL_GPIO_Init+0x2bc>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d00d      	beq.n	800109a <HAL_GPIO_Init+0x1c6>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a44      	ldr	r2, [pc, #272]	; (8001194 <HAL_GPIO_Init+0x2c0>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d007      	beq.n	8001096 <HAL_GPIO_Init+0x1c2>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a43      	ldr	r2, [pc, #268]	; (8001198 <HAL_GPIO_Init+0x2c4>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d101      	bne.n	8001092 <HAL_GPIO_Init+0x1be>
 800108e:	2303      	movs	r3, #3
 8001090:	e006      	b.n	80010a0 <HAL_GPIO_Init+0x1cc>
 8001092:	2305      	movs	r3, #5
 8001094:	e004      	b.n	80010a0 <HAL_GPIO_Init+0x1cc>
 8001096:	2302      	movs	r3, #2
 8001098:	e002      	b.n	80010a0 <HAL_GPIO_Init+0x1cc>
 800109a:	2301      	movs	r3, #1
 800109c:	e000      	b.n	80010a0 <HAL_GPIO_Init+0x1cc>
 800109e:	2300      	movs	r3, #0
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	2103      	movs	r1, #3
 80010a4:	400a      	ands	r2, r1
 80010a6:	00d2      	lsls	r2, r2, #3
 80010a8:	4093      	lsls	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80010b0:	4936      	ldr	r1, [pc, #216]	; (800118c <HAL_GPIO_Init+0x2b8>)
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	089b      	lsrs	r3, r3, #2
 80010b6:	3318      	adds	r3, #24
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010be:	4b33      	ldr	r3, [pc, #204]	; (800118c <HAL_GPIO_Init+0x2b8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	43da      	mvns	r2, r3
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	2380      	movs	r3, #128	; 0x80
 80010d4:	035b      	lsls	r3, r3, #13
 80010d6:	4013      	ands	r3, r2
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4313      	orrs	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010e2:	4b2a      	ldr	r3, [pc, #168]	; (800118c <HAL_GPIO_Init+0x2b8>)
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80010e8:	4b28      	ldr	r3, [pc, #160]	; (800118c <HAL_GPIO_Init+0x2b8>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	43da      	mvns	r2, r3
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	2380      	movs	r3, #128	; 0x80
 80010fe:	039b      	lsls	r3, r3, #14
 8001100:	4013      	ands	r3, r2
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800110c:	4b1f      	ldr	r3, [pc, #124]	; (800118c <HAL_GPIO_Init+0x2b8>)
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001112:	4a1e      	ldr	r2, [pc, #120]	; (800118c <HAL_GPIO_Init+0x2b8>)
 8001114:	2384      	movs	r3, #132	; 0x84
 8001116:	58d3      	ldr	r3, [r2, r3]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	43da      	mvns	r2, r3
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	2380      	movs	r3, #128	; 0x80
 800112a:	029b      	lsls	r3, r3, #10
 800112c:	4013      	ands	r3, r2
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001138:	4914      	ldr	r1, [pc, #80]	; (800118c <HAL_GPIO_Init+0x2b8>)
 800113a:	2284      	movs	r2, #132	; 0x84
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001140:	4a12      	ldr	r2, [pc, #72]	; (800118c <HAL_GPIO_Init+0x2b8>)
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	58d3      	ldr	r3, [r2, r3]
 8001146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	43da      	mvns	r2, r3
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	2380      	movs	r3, #128	; 0x80
 8001158:	025b      	lsls	r3, r3, #9
 800115a:	4013      	ands	r3, r2
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001166:	4909      	ldr	r1, [pc, #36]	; (800118c <HAL_GPIO_Init+0x2b8>)
 8001168:	2280      	movs	r2, #128	; 0x80
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	3301      	adds	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	40da      	lsrs	r2, r3
 800117c:	1e13      	subs	r3, r2, #0
 800117e:	d000      	beq.n	8001182 <HAL_GPIO_Init+0x2ae>
 8001180:	e6b0      	b.n	8000ee4 <HAL_GPIO_Init+0x10>
  }
}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	46c0      	nop			; (mov r8, r8)
 8001186:	46bd      	mov	sp, r7
 8001188:	b006      	add	sp, #24
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40021800 	.word	0x40021800
 8001190:	50000400 	.word	0x50000400
 8001194:	50000800 	.word	0x50000800
 8001198:	50000c00 	.word	0x50000c00

0800119c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	0008      	movs	r0, r1
 80011a6:	0011      	movs	r1, r2
 80011a8:	1cbb      	adds	r3, r7, #2
 80011aa:	1c02      	adds	r2, r0, #0
 80011ac:	801a      	strh	r2, [r3, #0]
 80011ae:	1c7b      	adds	r3, r7, #1
 80011b0:	1c0a      	adds	r2, r1, #0
 80011b2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011b4:	1c7b      	adds	r3, r7, #1
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d004      	beq.n	80011c6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011bc:	1cbb      	adds	r3, r7, #2
 80011be:	881a      	ldrh	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011c4:	e003      	b.n	80011ce <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011c6:	1cbb      	adds	r3, r7, #2
 80011c8:	881a      	ldrh	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b002      	add	sp, #8
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b084      	sub	sp, #16
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	000a      	movs	r2, r1
 80011e0:	1cbb      	adds	r3, r7, #2
 80011e2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011ea:	1cbb      	adds	r3, r7, #2
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	4013      	ands	r3, r2
 80011f2:	041a      	lsls	r2, r3, #16
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	1cb9      	adds	r1, r7, #2
 80011fa:	8809      	ldrh	r1, [r1, #0]
 80011fc:	400b      	ands	r3, r1
 80011fe:	431a      	orrs	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	619a      	str	r2, [r3, #24]
}
 8001204:	46c0      	nop			; (mov r8, r8)
 8001206:	46bd      	mov	sp, r7
 8001208:	b004      	add	sp, #16
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001214:	4b19      	ldr	r3, [pc, #100]	; (800127c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a19      	ldr	r2, [pc, #100]	; (8001280 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800121a:	4013      	ands	r3, r2
 800121c:	0019      	movs	r1, r3
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	430a      	orrs	r2, r1
 8001224:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	429a      	cmp	r2, r3
 800122e:	d11f      	bne.n	8001270 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	0013      	movs	r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	189b      	adds	r3, r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	4912      	ldr	r1, [pc, #72]	; (8001288 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800123e:	0018      	movs	r0, r3
 8001240:	f7fe ff66 	bl	8000110 <__udivsi3>
 8001244:	0003      	movs	r3, r0
 8001246:	3301      	adds	r3, #1
 8001248:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800124a:	e008      	b.n	800125e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	3b01      	subs	r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	e001      	b.n	800125e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e009      	b.n	8001272 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800125e:	4b07      	ldr	r3, [pc, #28]	; (800127c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001260:	695a      	ldr	r2, [r3, #20]
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	401a      	ands	r2, r3
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	429a      	cmp	r2, r3
 800126e:	d0ed      	beq.n	800124c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	0018      	movs	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	b004      	add	sp, #16
 8001278:	bd80      	pop	{r7, pc}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	40007000 	.word	0x40007000
 8001280:	fffff9ff 	.word	0xfffff9ff
 8001284:	200000d0 	.word	0x200000d0
 8001288:	000f4240 	.word	0x000f4240

0800128c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	23e0      	movs	r3, #224	; 0xe0
 8001296:	01db      	lsls	r3, r3, #7
 8001298:	4013      	ands	r3, r2
}
 800129a:	0018      	movs	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40021000 	.word	0x40021000

080012a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e2f3      	b.n	800189e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2201      	movs	r2, #1
 80012bc:	4013      	ands	r3, r2
 80012be:	d100      	bne.n	80012c2 <HAL_RCC_OscConfig+0x1e>
 80012c0:	e07c      	b.n	80013bc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012c2:	4bc3      	ldr	r3, [pc, #780]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	2238      	movs	r2, #56	; 0x38
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012cc:	4bc0      	ldr	r3, [pc, #768]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	2203      	movs	r2, #3
 80012d2:	4013      	ands	r3, r2
 80012d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	2b10      	cmp	r3, #16
 80012da:	d102      	bne.n	80012e2 <HAL_RCC_OscConfig+0x3e>
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d002      	beq.n	80012e8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	2b08      	cmp	r3, #8
 80012e6:	d10b      	bne.n	8001300 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e8:	4bb9      	ldr	r3, [pc, #740]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	029b      	lsls	r3, r3, #10
 80012f0:	4013      	ands	r3, r2
 80012f2:	d062      	beq.n	80013ba <HAL_RCC_OscConfig+0x116>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d15e      	bne.n	80013ba <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e2ce      	b.n	800189e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	025b      	lsls	r3, r3, #9
 8001308:	429a      	cmp	r2, r3
 800130a:	d107      	bne.n	800131c <HAL_RCC_OscConfig+0x78>
 800130c:	4bb0      	ldr	r3, [pc, #704]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4baf      	ldr	r3, [pc, #700]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 8001312:	2180      	movs	r1, #128	; 0x80
 8001314:	0249      	lsls	r1, r1, #9
 8001316:	430a      	orrs	r2, r1
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	e020      	b.n	800135e <HAL_RCC_OscConfig+0xba>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	23a0      	movs	r3, #160	; 0xa0
 8001322:	02db      	lsls	r3, r3, #11
 8001324:	429a      	cmp	r2, r3
 8001326:	d10e      	bne.n	8001346 <HAL_RCC_OscConfig+0xa2>
 8001328:	4ba9      	ldr	r3, [pc, #676]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4ba8      	ldr	r3, [pc, #672]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 800132e:	2180      	movs	r1, #128	; 0x80
 8001330:	02c9      	lsls	r1, r1, #11
 8001332:	430a      	orrs	r2, r1
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	4ba6      	ldr	r3, [pc, #664]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4ba5      	ldr	r3, [pc, #660]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 800133c:	2180      	movs	r1, #128	; 0x80
 800133e:	0249      	lsls	r1, r1, #9
 8001340:	430a      	orrs	r2, r1
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	e00b      	b.n	800135e <HAL_RCC_OscConfig+0xba>
 8001346:	4ba2      	ldr	r3, [pc, #648]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	4ba1      	ldr	r3, [pc, #644]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 800134c:	49a1      	ldr	r1, [pc, #644]	; (80015d4 <HAL_RCC_OscConfig+0x330>)
 800134e:	400a      	ands	r2, r1
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	4b9f      	ldr	r3, [pc, #636]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4b9e      	ldr	r3, [pc, #632]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 8001358:	499f      	ldr	r1, [pc, #636]	; (80015d8 <HAL_RCC_OscConfig+0x334>)
 800135a:	400a      	ands	r2, r1
 800135c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d014      	beq.n	8001390 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001366:	f7ff fc01 	bl	8000b6c <HAL_GetTick>
 800136a:	0003      	movs	r3, r0
 800136c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001370:	f7ff fbfc 	bl	8000b6c <HAL_GetTick>
 8001374:	0002      	movs	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b64      	cmp	r3, #100	; 0x64
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e28d      	b.n	800189e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001382:	4b93      	ldr	r3, [pc, #588]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	029b      	lsls	r3, r3, #10
 800138a:	4013      	ands	r3, r2
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0xcc>
 800138e:	e015      	b.n	80013bc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001390:	f7ff fbec 	bl	8000b6c <HAL_GetTick>
 8001394:	0003      	movs	r3, r0
 8001396:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800139a:	f7ff fbe7 	bl	8000b6c <HAL_GetTick>
 800139e:	0002      	movs	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b64      	cmp	r3, #100	; 0x64
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e278      	b.n	800189e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ac:	4b88      	ldr	r3, [pc, #544]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	029b      	lsls	r3, r3, #10
 80013b4:	4013      	ands	r3, r2
 80013b6:	d1f0      	bne.n	800139a <HAL_RCC_OscConfig+0xf6>
 80013b8:	e000      	b.n	80013bc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ba:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2202      	movs	r2, #2
 80013c2:	4013      	ands	r3, r2
 80013c4:	d100      	bne.n	80013c8 <HAL_RCC_OscConfig+0x124>
 80013c6:	e099      	b.n	80014fc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013c8:	4b81      	ldr	r3, [pc, #516]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	2238      	movs	r2, #56	; 0x38
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013d2:	4b7f      	ldr	r3, [pc, #508]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	2203      	movs	r2, #3
 80013d8:	4013      	ands	r3, r2
 80013da:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	2b10      	cmp	r3, #16
 80013e0:	d102      	bne.n	80013e8 <HAL_RCC_OscConfig+0x144>
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d002      	beq.n	80013ee <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d135      	bne.n	800145a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013ee:	4b78      	ldr	r3, [pc, #480]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	2380      	movs	r3, #128	; 0x80
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4013      	ands	r3, r2
 80013f8:	d005      	beq.n	8001406 <HAL_RCC_OscConfig+0x162>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e24b      	b.n	800189e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001406:	4b72      	ldr	r3, [pc, #456]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	4a74      	ldr	r2, [pc, #464]	; (80015dc <HAL_RCC_OscConfig+0x338>)
 800140c:	4013      	ands	r3, r2
 800140e:	0019      	movs	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	695b      	ldr	r3, [r3, #20]
 8001414:	021a      	lsls	r2, r3, #8
 8001416:	4b6e      	ldr	r3, [pc, #440]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 8001418:	430a      	orrs	r2, r1
 800141a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d112      	bne.n	8001448 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001422:	4b6b      	ldr	r3, [pc, #428]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a6e      	ldr	r2, [pc, #440]	; (80015e0 <HAL_RCC_OscConfig+0x33c>)
 8001428:	4013      	ands	r3, r2
 800142a:	0019      	movs	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691a      	ldr	r2, [r3, #16]
 8001430:	4b67      	ldr	r3, [pc, #412]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 8001432:	430a      	orrs	r2, r1
 8001434:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001436:	4b66      	ldr	r3, [pc, #408]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	0adb      	lsrs	r3, r3, #11
 800143c:	2207      	movs	r2, #7
 800143e:	4013      	ands	r3, r2
 8001440:	4a68      	ldr	r2, [pc, #416]	; (80015e4 <HAL_RCC_OscConfig+0x340>)
 8001442:	40da      	lsrs	r2, r3
 8001444:	4b68      	ldr	r3, [pc, #416]	; (80015e8 <HAL_RCC_OscConfig+0x344>)
 8001446:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001448:	4b68      	ldr	r3, [pc, #416]	; (80015ec <HAL_RCC_OscConfig+0x348>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	0018      	movs	r0, r3
 800144e:	f7ff fb31 	bl	8000ab4 <HAL_InitTick>
 8001452:	1e03      	subs	r3, r0, #0
 8001454:	d051      	beq.n	80014fa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e221      	b.n	800189e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d030      	beq.n	80014c4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001462:	4b5b      	ldr	r3, [pc, #364]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a5e      	ldr	r2, [pc, #376]	; (80015e0 <HAL_RCC_OscConfig+0x33c>)
 8001468:	4013      	ands	r3, r2
 800146a:	0019      	movs	r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691a      	ldr	r2, [r3, #16]
 8001470:	4b57      	ldr	r3, [pc, #348]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 8001472:	430a      	orrs	r2, r1
 8001474:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001476:	4b56      	ldr	r3, [pc, #344]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	4b55      	ldr	r3, [pc, #340]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 800147c:	2180      	movs	r1, #128	; 0x80
 800147e:	0049      	lsls	r1, r1, #1
 8001480:	430a      	orrs	r2, r1
 8001482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001484:	f7ff fb72 	bl	8000b6c <HAL_GetTick>
 8001488:	0003      	movs	r3, r0
 800148a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800148e:	f7ff fb6d 	bl	8000b6c <HAL_GetTick>
 8001492:	0002      	movs	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e1fe      	b.n	800189e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014a0:	4b4b      	ldr	r3, [pc, #300]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	2380      	movs	r3, #128	; 0x80
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	4013      	ands	r3, r2
 80014aa:	d0f0      	beq.n	800148e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ac:	4b48      	ldr	r3, [pc, #288]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	4a4a      	ldr	r2, [pc, #296]	; (80015dc <HAL_RCC_OscConfig+0x338>)
 80014b2:	4013      	ands	r3, r2
 80014b4:	0019      	movs	r1, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	021a      	lsls	r2, r3, #8
 80014bc:	4b44      	ldr	r3, [pc, #272]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 80014be:	430a      	orrs	r2, r1
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	e01b      	b.n	80014fc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80014c4:	4b42      	ldr	r3, [pc, #264]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b41      	ldr	r3, [pc, #260]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 80014ca:	4949      	ldr	r1, [pc, #292]	; (80015f0 <HAL_RCC_OscConfig+0x34c>)
 80014cc:	400a      	ands	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d0:	f7ff fb4c 	bl	8000b6c <HAL_GetTick>
 80014d4:	0003      	movs	r3, r0
 80014d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014da:	f7ff fb47 	bl	8000b6c <HAL_GetTick>
 80014de:	0002      	movs	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e1d8      	b.n	800189e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014ec:	4b38      	ldr	r3, [pc, #224]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	4013      	ands	r3, r2
 80014f6:	d1f0      	bne.n	80014da <HAL_RCC_OscConfig+0x236>
 80014f8:	e000      	b.n	80014fc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014fa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2208      	movs	r2, #8
 8001502:	4013      	ands	r3, r2
 8001504:	d047      	beq.n	8001596 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001506:	4b32      	ldr	r3, [pc, #200]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2238      	movs	r2, #56	; 0x38
 800150c:	4013      	ands	r3, r2
 800150e:	2b18      	cmp	r3, #24
 8001510:	d10a      	bne.n	8001528 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001512:	4b2f      	ldr	r3, [pc, #188]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 8001514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001516:	2202      	movs	r2, #2
 8001518:	4013      	ands	r3, r2
 800151a:	d03c      	beq.n	8001596 <HAL_RCC_OscConfig+0x2f2>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d138      	bne.n	8001596 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e1ba      	b.n	800189e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d019      	beq.n	8001564 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001530:	4b27      	ldr	r3, [pc, #156]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 8001532:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001534:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 8001536:	2101      	movs	r1, #1
 8001538:	430a      	orrs	r2, r1
 800153a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff fb16 	bl	8000b6c <HAL_GetTick>
 8001540:	0003      	movs	r3, r0
 8001542:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001546:	f7ff fb11 	bl	8000b6c <HAL_GetTick>
 800154a:	0002      	movs	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e1a2      	b.n	800189e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 800155a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800155c:	2202      	movs	r2, #2
 800155e:	4013      	ands	r3, r2
 8001560:	d0f1      	beq.n	8001546 <HAL_RCC_OscConfig+0x2a2>
 8001562:	e018      	b.n	8001596 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001564:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 8001566:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001568:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 800156a:	2101      	movs	r1, #1
 800156c:	438a      	bics	r2, r1
 800156e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001570:	f7ff fafc 	bl	8000b6c <HAL_GetTick>
 8001574:	0003      	movs	r3, r0
 8001576:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157a:	f7ff faf7 	bl	8000b6c <HAL_GetTick>
 800157e:	0002      	movs	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e188      	b.n	800189e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800158c:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 800158e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001590:	2202      	movs	r2, #2
 8001592:	4013      	ands	r3, r2
 8001594:	d1f1      	bne.n	800157a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2204      	movs	r2, #4
 800159c:	4013      	ands	r3, r2
 800159e:	d100      	bne.n	80015a2 <HAL_RCC_OscConfig+0x2fe>
 80015a0:	e0c6      	b.n	8001730 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015a2:	231f      	movs	r3, #31
 80015a4:	18fb      	adds	r3, r7, r3
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2238      	movs	r2, #56	; 0x38
 80015b0:	4013      	ands	r3, r2
 80015b2:	2b20      	cmp	r3, #32
 80015b4:	d11e      	bne.n	80015f4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_RCC_OscConfig+0x32c>)
 80015b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ba:	2202      	movs	r2, #2
 80015bc:	4013      	ands	r3, r2
 80015be:	d100      	bne.n	80015c2 <HAL_RCC_OscConfig+0x31e>
 80015c0:	e0b6      	b.n	8001730 <HAL_RCC_OscConfig+0x48c>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d000      	beq.n	80015cc <HAL_RCC_OscConfig+0x328>
 80015ca:	e0b1      	b.n	8001730 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e166      	b.n	800189e <HAL_RCC_OscConfig+0x5fa>
 80015d0:	40021000 	.word	0x40021000
 80015d4:	fffeffff 	.word	0xfffeffff
 80015d8:	fffbffff 	.word	0xfffbffff
 80015dc:	ffff80ff 	.word	0xffff80ff
 80015e0:	ffffc7ff 	.word	0xffffc7ff
 80015e4:	00f42400 	.word	0x00f42400
 80015e8:	200000d0 	.word	0x200000d0
 80015ec:	200000d4 	.word	0x200000d4
 80015f0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80015f4:	4bac      	ldr	r3, [pc, #688]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 80015f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	055b      	lsls	r3, r3, #21
 80015fc:	4013      	ands	r3, r2
 80015fe:	d101      	bne.n	8001604 <HAL_RCC_OscConfig+0x360>
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <HAL_RCC_OscConfig+0x362>
 8001604:	2300      	movs	r3, #0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d011      	beq.n	800162e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	4ba7      	ldr	r3, [pc, #668]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 800160c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800160e:	4ba6      	ldr	r3, [pc, #664]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 8001610:	2180      	movs	r1, #128	; 0x80
 8001612:	0549      	lsls	r1, r1, #21
 8001614:	430a      	orrs	r2, r1
 8001616:	63da      	str	r2, [r3, #60]	; 0x3c
 8001618:	4ba3      	ldr	r3, [pc, #652]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 800161a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	055b      	lsls	r3, r3, #21
 8001620:	4013      	ands	r3, r2
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001626:	231f      	movs	r3, #31
 8001628:	18fb      	adds	r3, r7, r3
 800162a:	2201      	movs	r2, #1
 800162c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800162e:	4b9f      	ldr	r3, [pc, #636]	; (80018ac <HAL_RCC_OscConfig+0x608>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4013      	ands	r3, r2
 8001638:	d11a      	bne.n	8001670 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800163a:	4b9c      	ldr	r3, [pc, #624]	; (80018ac <HAL_RCC_OscConfig+0x608>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	4b9b      	ldr	r3, [pc, #620]	; (80018ac <HAL_RCC_OscConfig+0x608>)
 8001640:	2180      	movs	r1, #128	; 0x80
 8001642:	0049      	lsls	r1, r1, #1
 8001644:	430a      	orrs	r2, r1
 8001646:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001648:	f7ff fa90 	bl	8000b6c <HAL_GetTick>
 800164c:	0003      	movs	r3, r0
 800164e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001652:	f7ff fa8b 	bl	8000b6c <HAL_GetTick>
 8001656:	0002      	movs	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e11c      	b.n	800189e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001664:	4b91      	ldr	r3, [pc, #580]	; (80018ac <HAL_RCC_OscConfig+0x608>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4013      	ands	r3, r2
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d106      	bne.n	8001686 <HAL_RCC_OscConfig+0x3e2>
 8001678:	4b8b      	ldr	r3, [pc, #556]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 800167a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800167c:	4b8a      	ldr	r3, [pc, #552]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 800167e:	2101      	movs	r1, #1
 8001680:	430a      	orrs	r2, r1
 8001682:	65da      	str	r2, [r3, #92]	; 0x5c
 8001684:	e01c      	b.n	80016c0 <HAL_RCC_OscConfig+0x41c>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b05      	cmp	r3, #5
 800168c:	d10c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x404>
 800168e:	4b86      	ldr	r3, [pc, #536]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 8001690:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001692:	4b85      	ldr	r3, [pc, #532]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 8001694:	2104      	movs	r1, #4
 8001696:	430a      	orrs	r2, r1
 8001698:	65da      	str	r2, [r3, #92]	; 0x5c
 800169a:	4b83      	ldr	r3, [pc, #524]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 800169c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800169e:	4b82      	ldr	r3, [pc, #520]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 80016a0:	2101      	movs	r1, #1
 80016a2:	430a      	orrs	r2, r1
 80016a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80016a6:	e00b      	b.n	80016c0 <HAL_RCC_OscConfig+0x41c>
 80016a8:	4b7f      	ldr	r3, [pc, #508]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 80016aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016ac:	4b7e      	ldr	r3, [pc, #504]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 80016ae:	2101      	movs	r1, #1
 80016b0:	438a      	bics	r2, r1
 80016b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80016b4:	4b7c      	ldr	r3, [pc, #496]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 80016b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016b8:	4b7b      	ldr	r3, [pc, #492]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 80016ba:	2104      	movs	r1, #4
 80016bc:	438a      	bics	r2, r1
 80016be:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d014      	beq.n	80016f2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c8:	f7ff fa50 	bl	8000b6c <HAL_GetTick>
 80016cc:	0003      	movs	r3, r0
 80016ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016d0:	e009      	b.n	80016e6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d2:	f7ff fa4b 	bl	8000b6c <HAL_GetTick>
 80016d6:	0002      	movs	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	4a74      	ldr	r2, [pc, #464]	; (80018b0 <HAL_RCC_OscConfig+0x60c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e0db      	b.n	800189e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016e6:	4b70      	ldr	r3, [pc, #448]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 80016e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ea:	2202      	movs	r2, #2
 80016ec:	4013      	ands	r3, r2
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x42e>
 80016f0:	e013      	b.n	800171a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f2:	f7ff fa3b 	bl	8000b6c <HAL_GetTick>
 80016f6:	0003      	movs	r3, r0
 80016f8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016fa:	e009      	b.n	8001710 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fc:	f7ff fa36 	bl	8000b6c <HAL_GetTick>
 8001700:	0002      	movs	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	4a6a      	ldr	r2, [pc, #424]	; (80018b0 <HAL_RCC_OscConfig+0x60c>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e0c6      	b.n	800189e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001710:	4b65      	ldr	r3, [pc, #404]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 8001712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001714:	2202      	movs	r2, #2
 8001716:	4013      	ands	r3, r2
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800171a:	231f      	movs	r3, #31
 800171c:	18fb      	adds	r3, r7, r3
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d105      	bne.n	8001730 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001724:	4b60      	ldr	r3, [pc, #384]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 8001726:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001728:	4b5f      	ldr	r3, [pc, #380]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 800172a:	4962      	ldr	r1, [pc, #392]	; (80018b4 <HAL_RCC_OscConfig+0x610>)
 800172c:	400a      	ands	r2, r1
 800172e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d100      	bne.n	800173a <HAL_RCC_OscConfig+0x496>
 8001738:	e0b0      	b.n	800189c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800173a:	4b5b      	ldr	r3, [pc, #364]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2238      	movs	r2, #56	; 0x38
 8001740:	4013      	ands	r3, r2
 8001742:	2b10      	cmp	r3, #16
 8001744:	d100      	bne.n	8001748 <HAL_RCC_OscConfig+0x4a4>
 8001746:	e078      	b.n	800183a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d153      	bne.n	80017f8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001750:	4b55      	ldr	r3, [pc, #340]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b54      	ldr	r3, [pc, #336]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 8001756:	4958      	ldr	r1, [pc, #352]	; (80018b8 <HAL_RCC_OscConfig+0x614>)
 8001758:	400a      	ands	r2, r1
 800175a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175c:	f7ff fa06 	bl	8000b6c <HAL_GetTick>
 8001760:	0003      	movs	r3, r0
 8001762:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001766:	f7ff fa01 	bl	8000b6c <HAL_GetTick>
 800176a:	0002      	movs	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e092      	b.n	800189e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001778:	4b4b      	ldr	r3, [pc, #300]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	049b      	lsls	r3, r3, #18
 8001780:	4013      	ands	r3, r2
 8001782:	d1f0      	bne.n	8001766 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001784:	4b48      	ldr	r3, [pc, #288]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	4a4c      	ldr	r2, [pc, #304]	; (80018bc <HAL_RCC_OscConfig+0x618>)
 800178a:	4013      	ands	r3, r2
 800178c:	0019      	movs	r1, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1a      	ldr	r2, [r3, #32]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	431a      	orrs	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	431a      	orrs	r2, r3
 80017ac:	4b3e      	ldr	r3, [pc, #248]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 80017ae:	430a      	orrs	r2, r1
 80017b0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b2:	4b3d      	ldr	r3, [pc, #244]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4b3c      	ldr	r3, [pc, #240]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 80017b8:	2180      	movs	r1, #128	; 0x80
 80017ba:	0449      	lsls	r1, r1, #17
 80017bc:	430a      	orrs	r2, r1
 80017be:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80017c0:	4b39      	ldr	r3, [pc, #228]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	4b38      	ldr	r3, [pc, #224]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 80017c6:	2180      	movs	r1, #128	; 0x80
 80017c8:	0549      	lsls	r1, r1, #21
 80017ca:	430a      	orrs	r2, r1
 80017cc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ce:	f7ff f9cd 	bl	8000b6c <HAL_GetTick>
 80017d2:	0003      	movs	r3, r0
 80017d4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d8:	f7ff f9c8 	bl	8000b6c <HAL_GetTick>
 80017dc:	0002      	movs	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e059      	b.n	800189e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ea:	4b2f      	ldr	r3, [pc, #188]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	049b      	lsls	r3, r3, #18
 80017f2:	4013      	ands	r3, r2
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x534>
 80017f6:	e051      	b.n	800189c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f8:	4b2b      	ldr	r3, [pc, #172]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 80017fe:	492e      	ldr	r1, [pc, #184]	; (80018b8 <HAL_RCC_OscConfig+0x614>)
 8001800:	400a      	ands	r2, r1
 8001802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001804:	f7ff f9b2 	bl	8000b6c <HAL_GetTick>
 8001808:	0003      	movs	r3, r0
 800180a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180e:	f7ff f9ad 	bl	8000b6c <HAL_GetTick>
 8001812:	0002      	movs	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e03e      	b.n	800189e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001820:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	049b      	lsls	r3, r3, #18
 8001828:	4013      	ands	r3, r2
 800182a:	d1f0      	bne.n	800180e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800182c:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 8001832:	4923      	ldr	r1, [pc, #140]	; (80018c0 <HAL_RCC_OscConfig+0x61c>)
 8001834:	400a      	ands	r2, r1
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	e030      	b.n	800189c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d101      	bne.n	8001846 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e02b      	b.n	800189e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001846:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <HAL_RCC_OscConfig+0x604>)
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	2203      	movs	r2, #3
 8001850:	401a      	ands	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	429a      	cmp	r2, r3
 8001858:	d11e      	bne.n	8001898 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	2270      	movs	r2, #112	; 0x70
 800185e:	401a      	ands	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d117      	bne.n	8001898 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	23fe      	movs	r3, #254	; 0xfe
 800186c:	01db      	lsls	r3, r3, #7
 800186e:	401a      	ands	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001874:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001876:	429a      	cmp	r2, r3
 8001878:	d10e      	bne.n	8001898 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	23f8      	movs	r3, #248	; 0xf8
 800187e:	039b      	lsls	r3, r3, #14
 8001880:	401a      	ands	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001886:	429a      	cmp	r2, r3
 8001888:	d106      	bne.n	8001898 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	0f5b      	lsrs	r3, r3, #29
 800188e:	075a      	lsls	r2, r3, #29
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001894:	429a      	cmp	r2, r3
 8001896:	d001      	beq.n	800189c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	0018      	movs	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b008      	add	sp, #32
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40007000 	.word	0x40007000
 80018b0:	00001388 	.word	0x00001388
 80018b4:	efffffff 	.word	0xefffffff
 80018b8:	feffffff 	.word	0xfeffffff
 80018bc:	1fc1808c 	.word	0x1fc1808c
 80018c0:	effefffc 	.word	0xeffefffc

080018c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0e9      	b.n	8001aac <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018d8:	4b76      	ldr	r3, [pc, #472]	; (8001ab4 <HAL_RCC_ClockConfig+0x1f0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2207      	movs	r2, #7
 80018de:	4013      	ands	r3, r2
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d91e      	bls.n	8001924 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e6:	4b73      	ldr	r3, [pc, #460]	; (8001ab4 <HAL_RCC_ClockConfig+0x1f0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2207      	movs	r2, #7
 80018ec:	4393      	bics	r3, r2
 80018ee:	0019      	movs	r1, r3
 80018f0:	4b70      	ldr	r3, [pc, #448]	; (8001ab4 <HAL_RCC_ClockConfig+0x1f0>)
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018f8:	f7ff f938 	bl	8000b6c <HAL_GetTick>
 80018fc:	0003      	movs	r3, r0
 80018fe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001900:	e009      	b.n	8001916 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001902:	f7ff f933 	bl	8000b6c <HAL_GetTick>
 8001906:	0002      	movs	r2, r0
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	4a6a      	ldr	r2, [pc, #424]	; (8001ab8 <HAL_RCC_ClockConfig+0x1f4>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e0ca      	b.n	8001aac <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001916:	4b67      	ldr	r3, [pc, #412]	; (8001ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2207      	movs	r2, #7
 800191c:	4013      	ands	r3, r2
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d1ee      	bne.n	8001902 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2202      	movs	r2, #2
 800192a:	4013      	ands	r3, r2
 800192c:	d015      	beq.n	800195a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2204      	movs	r2, #4
 8001934:	4013      	ands	r3, r2
 8001936:	d006      	beq.n	8001946 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001938:	4b60      	ldr	r3, [pc, #384]	; (8001abc <HAL_RCC_ClockConfig+0x1f8>)
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	4b5f      	ldr	r3, [pc, #380]	; (8001abc <HAL_RCC_ClockConfig+0x1f8>)
 800193e:	21e0      	movs	r1, #224	; 0xe0
 8001940:	01c9      	lsls	r1, r1, #7
 8001942:	430a      	orrs	r2, r1
 8001944:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001946:	4b5d      	ldr	r3, [pc, #372]	; (8001abc <HAL_RCC_ClockConfig+0x1f8>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	4a5d      	ldr	r2, [pc, #372]	; (8001ac0 <HAL_RCC_ClockConfig+0x1fc>)
 800194c:	4013      	ands	r3, r2
 800194e:	0019      	movs	r1, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	4b59      	ldr	r3, [pc, #356]	; (8001abc <HAL_RCC_ClockConfig+0x1f8>)
 8001956:	430a      	orrs	r2, r1
 8001958:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2201      	movs	r2, #1
 8001960:	4013      	ands	r3, r2
 8001962:	d057      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d107      	bne.n	800197c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800196c:	4b53      	ldr	r3, [pc, #332]	; (8001abc <HAL_RCC_ClockConfig+0x1f8>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	029b      	lsls	r3, r3, #10
 8001974:	4013      	ands	r3, r2
 8001976:	d12b      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e097      	b.n	8001aac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b02      	cmp	r3, #2
 8001982:	d107      	bne.n	8001994 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001984:	4b4d      	ldr	r3, [pc, #308]	; (8001abc <HAL_RCC_ClockConfig+0x1f8>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	049b      	lsls	r3, r3, #18
 800198c:	4013      	ands	r3, r2
 800198e:	d11f      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e08b      	b.n	8001aac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d107      	bne.n	80019ac <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800199c:	4b47      	ldr	r3, [pc, #284]	; (8001abc <HAL_RCC_ClockConfig+0x1f8>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	4013      	ands	r3, r2
 80019a6:	d113      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e07f      	b.n	8001aac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	d106      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019b4:	4b41      	ldr	r3, [pc, #260]	; (8001abc <HAL_RCC_ClockConfig+0x1f8>)
 80019b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b8:	2202      	movs	r2, #2
 80019ba:	4013      	ands	r3, r2
 80019bc:	d108      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e074      	b.n	8001aac <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019c2:	4b3e      	ldr	r3, [pc, #248]	; (8001abc <HAL_RCC_ClockConfig+0x1f8>)
 80019c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c6:	2202      	movs	r2, #2
 80019c8:	4013      	ands	r3, r2
 80019ca:	d101      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e06d      	b.n	8001aac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019d0:	4b3a      	ldr	r3, [pc, #232]	; (8001abc <HAL_RCC_ClockConfig+0x1f8>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	2207      	movs	r2, #7
 80019d6:	4393      	bics	r3, r2
 80019d8:	0019      	movs	r1, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	4b37      	ldr	r3, [pc, #220]	; (8001abc <HAL_RCC_ClockConfig+0x1f8>)
 80019e0:	430a      	orrs	r2, r1
 80019e2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019e4:	f7ff f8c2 	bl	8000b6c <HAL_GetTick>
 80019e8:	0003      	movs	r3, r0
 80019ea:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ec:	e009      	b.n	8001a02 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ee:	f7ff f8bd 	bl	8000b6c <HAL_GetTick>
 80019f2:	0002      	movs	r2, r0
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	4a2f      	ldr	r2, [pc, #188]	; (8001ab8 <HAL_RCC_ClockConfig+0x1f4>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e054      	b.n	8001aac <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a02:	4b2e      	ldr	r3, [pc, #184]	; (8001abc <HAL_RCC_ClockConfig+0x1f8>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2238      	movs	r2, #56	; 0x38
 8001a08:	401a      	ands	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d1ec      	bne.n	80019ee <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a14:	4b27      	ldr	r3, [pc, #156]	; (8001ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2207      	movs	r2, #7
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d21e      	bcs.n	8001a60 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a22:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2207      	movs	r2, #7
 8001a28:	4393      	bics	r3, r2
 8001a2a:	0019      	movs	r1, r3
 8001a2c:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a34:	f7ff f89a 	bl	8000b6c <HAL_GetTick>
 8001a38:	0003      	movs	r3, r0
 8001a3a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a3c:	e009      	b.n	8001a52 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3e:	f7ff f895 	bl	8000b6c <HAL_GetTick>
 8001a42:	0002      	movs	r2, r0
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	4a1b      	ldr	r2, [pc, #108]	; (8001ab8 <HAL_RCC_ClockConfig+0x1f4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e02c      	b.n	8001aac <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a52:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2207      	movs	r2, #7
 8001a58:	4013      	ands	r3, r2
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d1ee      	bne.n	8001a3e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2204      	movs	r2, #4
 8001a66:	4013      	ands	r3, r2
 8001a68:	d009      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <HAL_RCC_ClockConfig+0x1f8>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	4a15      	ldr	r2, [pc, #84]	; (8001ac4 <HAL_RCC_ClockConfig+0x200>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	0019      	movs	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	4b10      	ldr	r3, [pc, #64]	; (8001abc <HAL_RCC_ClockConfig+0x1f8>)
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001a7e:	f000 f829 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 8001a82:	0001      	movs	r1, r0
 8001a84:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <HAL_RCC_ClockConfig+0x1f8>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	0a1b      	lsrs	r3, r3, #8
 8001a8a:	220f      	movs	r2, #15
 8001a8c:	401a      	ands	r2, r3
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <HAL_RCC_ClockConfig+0x204>)
 8001a90:	0092      	lsls	r2, r2, #2
 8001a92:	58d3      	ldr	r3, [r2, r3]
 8001a94:	221f      	movs	r2, #31
 8001a96:	4013      	ands	r3, r2
 8001a98:	000a      	movs	r2, r1
 8001a9a:	40da      	lsrs	r2, r3
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <HAL_RCC_ClockConfig+0x208>)
 8001a9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <HAL_RCC_ClockConfig+0x20c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f7ff f805 	bl	8000ab4 <HAL_InitTick>
 8001aaa:	0003      	movs	r3, r0
}
 8001aac:	0018      	movs	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b004      	add	sp, #16
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40022000 	.word	0x40022000
 8001ab8:	00001388 	.word	0x00001388
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	fffff0ff 	.word	0xfffff0ff
 8001ac4:	ffff8fff 	.word	0xffff8fff
 8001ac8:	08004870 	.word	0x08004870
 8001acc:	200000d0 	.word	0x200000d0
 8001ad0:	200000d4 	.word	0x200000d4

08001ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ada:	4b3c      	ldr	r3, [pc, #240]	; (8001bcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2238      	movs	r2, #56	; 0x38
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d10f      	bne.n	8001b04 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ae4:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	0adb      	lsrs	r3, r3, #11
 8001aea:	2207      	movs	r2, #7
 8001aec:	4013      	ands	r3, r2
 8001aee:	2201      	movs	r2, #1
 8001af0:	409a      	lsls	r2, r3
 8001af2:	0013      	movs	r3, r2
 8001af4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001af6:	6839      	ldr	r1, [r7, #0]
 8001af8:	4835      	ldr	r0, [pc, #212]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001afa:	f7fe fb09 	bl	8000110 <__udivsi3>
 8001afe:	0003      	movs	r3, r0
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	e05d      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b04:	4b31      	ldr	r3, [pc, #196]	; (8001bcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2238      	movs	r2, #56	; 0x38
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d102      	bne.n	8001b16 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b10:	4b30      	ldr	r3, [pc, #192]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	e054      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b16:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2238      	movs	r2, #56	; 0x38
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b10      	cmp	r3, #16
 8001b20:	d138      	bne.n	8001b94 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b22:	4b2a      	ldr	r3, [pc, #168]	; (8001bcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	2203      	movs	r2, #3
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b2c:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	2207      	movs	r2, #7
 8001b34:	4013      	ands	r3, r2
 8001b36:	3301      	adds	r3, #1
 8001b38:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	d10d      	bne.n	8001b5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	4824      	ldr	r0, [pc, #144]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b44:	f7fe fae4 	bl	8000110 <__udivsi3>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	0019      	movs	r1, r3
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	227f      	movs	r2, #127	; 0x7f
 8001b54:	4013      	ands	r3, r2
 8001b56:	434b      	muls	r3, r1
 8001b58:	617b      	str	r3, [r7, #20]
        break;
 8001b5a:	e00d      	b.n	8001b78 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	481c      	ldr	r0, [pc, #112]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b60:	f7fe fad6 	bl	8000110 <__udivsi3>
 8001b64:	0003      	movs	r3, r0
 8001b66:	0019      	movs	r1, r3
 8001b68:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	227f      	movs	r2, #127	; 0x7f
 8001b70:	4013      	ands	r3, r2
 8001b72:	434b      	muls	r3, r1
 8001b74:	617b      	str	r3, [r7, #20]
        break;
 8001b76:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001b78:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	0f5b      	lsrs	r3, r3, #29
 8001b7e:	2207      	movs	r2, #7
 8001b80:	4013      	ands	r3, r2
 8001b82:	3301      	adds	r3, #1
 8001b84:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	6978      	ldr	r0, [r7, #20]
 8001b8a:	f7fe fac1 	bl	8000110 <__udivsi3>
 8001b8e:	0003      	movs	r3, r0
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	e015      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b94:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2238      	movs	r2, #56	; 0x38
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b20      	cmp	r3, #32
 8001b9e:	d103      	bne.n	8001ba8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	021b      	lsls	r3, r3, #8
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	e00b      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	2238      	movs	r2, #56	; 0x38
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b18      	cmp	r3, #24
 8001bb2:	d103      	bne.n	8001bbc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001bb4:	23fa      	movs	r3, #250	; 0xfa
 8001bb6:	01db      	lsls	r3, r3, #7
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	e001      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001bc0:	693b      	ldr	r3, [r7, #16]
}
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	b006      	add	sp, #24
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	00f42400 	.word	0x00f42400
 8001bd4:	00b71b00 	.word	0x00b71b00

08001bd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bdc:	4b02      	ldr	r3, [pc, #8]	; (8001be8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bde:	681b      	ldr	r3, [r3, #0]
}
 8001be0:	0018      	movs	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	200000d0 	.word	0x200000d0

08001bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bec:	b5b0      	push	{r4, r5, r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001bf0:	f7ff fff2 	bl	8001bd8 <HAL_RCC_GetHCLKFreq>
 8001bf4:	0004      	movs	r4, r0
 8001bf6:	f7ff fb49 	bl	800128c <LL_RCC_GetAPB1Prescaler>
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	0b1a      	lsrs	r2, r3, #12
 8001bfe:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c00:	0092      	lsls	r2, r2, #2
 8001c02:	58d3      	ldr	r3, [r2, r3]
 8001c04:	221f      	movs	r2, #31
 8001c06:	4013      	ands	r3, r2
 8001c08:	40dc      	lsrs	r4, r3
 8001c0a:	0023      	movs	r3, r4
}
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bdb0      	pop	{r4, r5, r7, pc}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	080048b0 	.word	0x080048b0

08001c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001c20:	2313      	movs	r3, #19
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c28:	2312      	movs	r3, #18
 8001c2a:	18fb      	adds	r3, r7, r3
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	2380      	movs	r3, #128	; 0x80
 8001c36:	029b      	lsls	r3, r3, #10
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d100      	bne.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001c3c:	e0a3      	b.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c3e:	2011      	movs	r0, #17
 8001c40:	183b      	adds	r3, r7, r0
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c46:	4b86      	ldr	r3, [pc, #536]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	055b      	lsls	r3, r3, #21
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d110      	bne.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c52:	4b83      	ldr	r3, [pc, #524]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c56:	4b82      	ldr	r3, [pc, #520]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c58:	2180      	movs	r1, #128	; 0x80
 8001c5a:	0549      	lsls	r1, r1, #21
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c60:	4b7f      	ldr	r3, [pc, #508]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	055b      	lsls	r3, r3, #21
 8001c68:	4013      	ands	r3, r2
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c6e:	183b      	adds	r3, r7, r0
 8001c70:	2201      	movs	r2, #1
 8001c72:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c74:	4b7b      	ldr	r3, [pc, #492]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4b7a      	ldr	r3, [pc, #488]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c7a:	2180      	movs	r1, #128	; 0x80
 8001c7c:	0049      	lsls	r1, r1, #1
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c82:	f7fe ff73 	bl	8000b6c <HAL_GetTick>
 8001c86:	0003      	movs	r3, r0
 8001c88:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c8a:	e00b      	b.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c8c:	f7fe ff6e 	bl	8000b6c <HAL_GetTick>
 8001c90:	0002      	movs	r2, r0
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d904      	bls.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001c9a:	2313      	movs	r3, #19
 8001c9c:	18fb      	adds	r3, r7, r3
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	701a      	strb	r2, [r3, #0]
        break;
 8001ca2:	e005      	b.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ca4:	4b6f      	ldr	r3, [pc, #444]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	2380      	movs	r3, #128	; 0x80
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4013      	ands	r3, r2
 8001cae:	d0ed      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001cb0:	2313      	movs	r3, #19
 8001cb2:	18fb      	adds	r3, r7, r3
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d154      	bne.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001cba:	4b69      	ldr	r3, [pc, #420]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cbc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cbe:	23c0      	movs	r3, #192	; 0xc0
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d019      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d014      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001cd6:	4b62      	ldr	r3, [pc, #392]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cda:	4a63      	ldr	r2, [pc, #396]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ce0:	4b5f      	ldr	r3, [pc, #380]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ce2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ce4:	4b5e      	ldr	r3, [pc, #376]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ce6:	2180      	movs	r1, #128	; 0x80
 8001ce8:	0249      	lsls	r1, r1, #9
 8001cea:	430a      	orrs	r2, r1
 8001cec:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cee:	4b5c      	ldr	r3, [pc, #368]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cf0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cf2:	4b5b      	ldr	r3, [pc, #364]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cf4:	495d      	ldr	r1, [pc, #372]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001cf6:	400a      	ands	r2, r1
 8001cf8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001cfa:	4b59      	ldr	r3, [pc, #356]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	2201      	movs	r2, #1
 8001d04:	4013      	ands	r3, r2
 8001d06:	d016      	beq.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7fe ff30 	bl	8000b6c <HAL_GetTick>
 8001d0c:	0003      	movs	r3, r0
 8001d0e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d10:	e00c      	b.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d12:	f7fe ff2b 	bl	8000b6c <HAL_GetTick>
 8001d16:	0002      	movs	r2, r0
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	4a54      	ldr	r2, [pc, #336]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d904      	bls.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001d22:	2313      	movs	r3, #19
 8001d24:	18fb      	adds	r3, r7, r3
 8001d26:	2203      	movs	r2, #3
 8001d28:	701a      	strb	r2, [r3, #0]
            break;
 8001d2a:	e004      	b.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d2c:	4b4c      	ldr	r3, [pc, #304]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d30:	2202      	movs	r2, #2
 8001d32:	4013      	ands	r3, r2
 8001d34:	d0ed      	beq.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001d36:	2313      	movs	r3, #19
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10a      	bne.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d40:	4b47      	ldr	r3, [pc, #284]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d44:	4a48      	ldr	r2, [pc, #288]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001d46:	4013      	ands	r3, r2
 8001d48:	0019      	movs	r1, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699a      	ldr	r2, [r3, #24]
 8001d4e:	4b44      	ldr	r3, [pc, #272]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d50:	430a      	orrs	r2, r1
 8001d52:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d54:	e00c      	b.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d56:	2312      	movs	r3, #18
 8001d58:	18fb      	adds	r3, r7, r3
 8001d5a:	2213      	movs	r2, #19
 8001d5c:	18ba      	adds	r2, r7, r2
 8001d5e:	7812      	ldrb	r2, [r2, #0]
 8001d60:	701a      	strb	r2, [r3, #0]
 8001d62:	e005      	b.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d64:	2312      	movs	r3, #18
 8001d66:	18fb      	adds	r3, r7, r3
 8001d68:	2213      	movs	r2, #19
 8001d6a:	18ba      	adds	r2, r7, r2
 8001d6c:	7812      	ldrb	r2, [r2, #0]
 8001d6e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d70:	2311      	movs	r3, #17
 8001d72:	18fb      	adds	r3, r7, r3
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d105      	bne.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d7a:	4b39      	ldr	r3, [pc, #228]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d7e:	4b38      	ldr	r3, [pc, #224]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d80:	493c      	ldr	r1, [pc, #240]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001d82:	400a      	ands	r2, r1
 8001d84:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d009      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d90:	4b33      	ldr	r3, [pc, #204]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d94:	2203      	movs	r2, #3
 8001d96:	4393      	bics	r3, r2
 8001d98:	0019      	movs	r1, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	4b30      	ldr	r3, [pc, #192]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001da0:	430a      	orrs	r2, r1
 8001da2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2202      	movs	r2, #2
 8001daa:	4013      	ands	r3, r2
 8001dac:	d009      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dae:	4b2c      	ldr	r3, [pc, #176]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db2:	220c      	movs	r2, #12
 8001db4:	4393      	bics	r3, r2
 8001db6:	0019      	movs	r1, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d009      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dcc:	4b24      	ldr	r3, [pc, #144]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd0:	4a29      	ldr	r2, [pc, #164]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	01db      	lsls	r3, r3, #7
 8001de8:	4013      	ands	r3, r2
 8001dea:	d015      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001dec:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	0899      	lsrs	r1, r3, #2
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	695a      	ldr	r2, [r3, #20]
 8001df8:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695a      	ldr	r2, [r3, #20]
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	05db      	lsls	r3, r3, #23
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d106      	bne.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e10:	2180      	movs	r1, #128	; 0x80
 8001e12:	0249      	lsls	r1, r1, #9
 8001e14:	430a      	orrs	r2, r1
 8001e16:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	4013      	ands	r3, r2
 8001e22:	d016      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001e24:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e28:	4a14      	ldr	r2, [pc, #80]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	0019      	movs	r1, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e34:	430a      	orrs	r2, r1
 8001e36:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691a      	ldr	r2, [r3, #16]
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	01db      	lsls	r3, r3, #7
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d106      	bne.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e4a:	2180      	movs	r1, #128	; 0x80
 8001e4c:	0249      	lsls	r1, r1, #9
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001e52:	2312      	movs	r3, #18
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	781b      	ldrb	r3, [r3, #0]
}
 8001e58:	0018      	movs	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b006      	add	sp, #24
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40007000 	.word	0x40007000
 8001e68:	fffffcff 	.word	0xfffffcff
 8001e6c:	fffeffff 	.word	0xfffeffff
 8001e70:	00001388 	.word	0x00001388
 8001e74:	efffffff 	.word	0xefffffff
 8001e78:	ffffcfff 	.word	0xffffcfff
 8001e7c:	ffff3fff 	.word	0xffff3fff

08001e80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e04a      	b.n	8001f28 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	223d      	movs	r2, #61	; 0x3d
 8001e96:	5c9b      	ldrb	r3, [r3, r2]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d107      	bne.n	8001eae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	223c      	movs	r2, #60	; 0x3c
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f7fe fcdd 	bl	8000868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	223d      	movs	r2, #61	; 0x3d
 8001eb2:	2102      	movs	r1, #2
 8001eb4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	0010      	movs	r0, r2
 8001ec2:	f000 f9e5 	bl	8002290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2248      	movs	r2, #72	; 0x48
 8001eca:	2101      	movs	r1, #1
 8001ecc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	223e      	movs	r2, #62	; 0x3e
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	5499      	strb	r1, [r3, r2]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	223f      	movs	r2, #63	; 0x3f
 8001eda:	2101      	movs	r1, #1
 8001edc:	5499      	strb	r1, [r3, r2]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2240      	movs	r2, #64	; 0x40
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	5499      	strb	r1, [r3, r2]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2241      	movs	r2, #65	; 0x41
 8001eea:	2101      	movs	r1, #1
 8001eec:	5499      	strb	r1, [r3, r2]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2242      	movs	r2, #66	; 0x42
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	5499      	strb	r1, [r3, r2]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2243      	movs	r2, #67	; 0x43
 8001efa:	2101      	movs	r1, #1
 8001efc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2244      	movs	r2, #68	; 0x44
 8001f02:	2101      	movs	r1, #1
 8001f04:	5499      	strb	r1, [r3, r2]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2245      	movs	r2, #69	; 0x45
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	5499      	strb	r1, [r3, r2]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2246      	movs	r2, #70	; 0x46
 8001f12:	2101      	movs	r1, #1
 8001f14:	5499      	strb	r1, [r3, r2]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2247      	movs	r2, #71	; 0x47
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	223d      	movs	r2, #61	; 0x3d
 8001f22:	2101      	movs	r1, #1
 8001f24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	0018      	movs	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b002      	add	sp, #8
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	223d      	movs	r2, #61	; 0x3d
 8001f3c:	5c9b      	ldrb	r3, [r3, r2]
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d001      	beq.n	8001f48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e03c      	b.n	8001fc2 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	223d      	movs	r2, #61	; 0x3d
 8001f4c:	2102      	movs	r1, #2
 8001f4e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a19      	ldr	r2, [pc, #100]	; (8001fcc <HAL_TIM_Base_Start_IT+0x9c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d009      	beq.n	8001f7e <HAL_TIM_Base_Start_IT+0x4e>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a18      	ldr	r2, [pc, #96]	; (8001fd0 <HAL_TIM_Base_Start_IT+0xa0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d004      	beq.n	8001f7e <HAL_TIM_Base_Start_IT+0x4e>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a16      	ldr	r2, [pc, #88]	; (8001fd4 <HAL_TIM_Base_Start_IT+0xa4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d116      	bne.n	8001fac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	4a14      	ldr	r2, [pc, #80]	; (8001fd8 <HAL_TIM_Base_Start_IT+0xa8>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2b06      	cmp	r3, #6
 8001f8e:	d016      	beq.n	8001fbe <HAL_TIM_Base_Start_IT+0x8e>
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	2380      	movs	r3, #128	; 0x80
 8001f94:	025b      	lsls	r3, r3, #9
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d011      	beq.n	8001fbe <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001faa:	e008      	b.n	8001fbe <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	e000      	b.n	8001fc0 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fbe:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b004      	add	sp, #16
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	40012c00 	.word	0x40012c00
 8001fd0:	40000400 	.word	0x40000400
 8001fd4:	40014000 	.word	0x40014000
 8001fd8:	00010007 	.word	0x00010007

08001fdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	2202      	movs	r2, #2
 8001fec:	4013      	ands	r3, r2
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d124      	bne.n	800203c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d11d      	bne.n	800203c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2203      	movs	r2, #3
 8002006:	4252      	negs	r2, r2
 8002008:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	2203      	movs	r2, #3
 8002018:	4013      	ands	r3, r2
 800201a:	d004      	beq.n	8002026 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	0018      	movs	r0, r3
 8002020:	f000 f91e 	bl	8002260 <HAL_TIM_IC_CaptureCallback>
 8002024:	e007      	b.n	8002036 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	0018      	movs	r0, r3
 800202a:	f000 f911 	bl	8002250 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	0018      	movs	r0, r3
 8002032:	f000 f91d 	bl	8002270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	2204      	movs	r2, #4
 8002044:	4013      	ands	r3, r2
 8002046:	2b04      	cmp	r3, #4
 8002048:	d125      	bne.n	8002096 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2204      	movs	r2, #4
 8002052:	4013      	ands	r3, r2
 8002054:	2b04      	cmp	r3, #4
 8002056:	d11e      	bne.n	8002096 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2205      	movs	r2, #5
 800205e:	4252      	negs	r2, r2
 8002060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2202      	movs	r2, #2
 8002066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	699a      	ldr	r2, [r3, #24]
 800206e:	23c0      	movs	r3, #192	; 0xc0
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4013      	ands	r3, r2
 8002074:	d004      	beq.n	8002080 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	0018      	movs	r0, r3
 800207a:	f000 f8f1 	bl	8002260 <HAL_TIM_IC_CaptureCallback>
 800207e:	e007      	b.n	8002090 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	0018      	movs	r0, r3
 8002084:	f000 f8e4 	bl	8002250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	0018      	movs	r0, r3
 800208c:	f000 f8f0 	bl	8002270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	2208      	movs	r2, #8
 800209e:	4013      	ands	r3, r2
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d124      	bne.n	80020ee <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	2208      	movs	r2, #8
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d11d      	bne.n	80020ee <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2209      	movs	r2, #9
 80020b8:	4252      	negs	r2, r2
 80020ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2204      	movs	r2, #4
 80020c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	2203      	movs	r2, #3
 80020ca:	4013      	ands	r3, r2
 80020cc:	d004      	beq.n	80020d8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	0018      	movs	r0, r3
 80020d2:	f000 f8c5 	bl	8002260 <HAL_TIM_IC_CaptureCallback>
 80020d6:	e007      	b.n	80020e8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	0018      	movs	r0, r3
 80020dc:	f000 f8b8 	bl	8002250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	0018      	movs	r0, r3
 80020e4:	f000 f8c4 	bl	8002270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	2210      	movs	r2, #16
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b10      	cmp	r3, #16
 80020fa:	d125      	bne.n	8002148 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	2210      	movs	r2, #16
 8002104:	4013      	ands	r3, r2
 8002106:	2b10      	cmp	r3, #16
 8002108:	d11e      	bne.n	8002148 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2211      	movs	r2, #17
 8002110:	4252      	negs	r2, r2
 8002112:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2208      	movs	r2, #8
 8002118:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	69da      	ldr	r2, [r3, #28]
 8002120:	23c0      	movs	r3, #192	; 0xc0
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4013      	ands	r3, r2
 8002126:	d004      	beq.n	8002132 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	0018      	movs	r0, r3
 800212c:	f000 f898 	bl	8002260 <HAL_TIM_IC_CaptureCallback>
 8002130:	e007      	b.n	8002142 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	0018      	movs	r0, r3
 8002136:	f000 f88b 	bl	8002250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	0018      	movs	r0, r3
 800213e:	f000 f897 	bl	8002270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	2201      	movs	r2, #1
 8002150:	4013      	ands	r3, r2
 8002152:	2b01      	cmp	r3, #1
 8002154:	d10f      	bne.n	8002176 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2201      	movs	r2, #1
 800215e:	4013      	ands	r3, r2
 8002160:	2b01      	cmp	r3, #1
 8002162:	d108      	bne.n	8002176 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2202      	movs	r2, #2
 800216a:	4252      	negs	r2, r2
 800216c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	0018      	movs	r0, r3
 8002172:	f000 f865 	bl	8002240 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	2280      	movs	r2, #128	; 0x80
 800217e:	4013      	ands	r3, r2
 8002180:	2b80      	cmp	r3, #128	; 0x80
 8002182:	d10f      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	2280      	movs	r2, #128	; 0x80
 800218c:	4013      	ands	r3, r2
 800218e:	2b80      	cmp	r3, #128	; 0x80
 8002190:	d108      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2281      	movs	r2, #129	; 0x81
 8002198:	4252      	negs	r2, r2
 800219a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	0018      	movs	r0, r3
 80021a0:	f000 f95c 	bl	800245c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	691a      	ldr	r2, [r3, #16]
 80021aa:	2380      	movs	r3, #128	; 0x80
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	401a      	ands	r2, r3
 80021b0:	2380      	movs	r3, #128	; 0x80
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d10e      	bne.n	80021d6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	2280      	movs	r2, #128	; 0x80
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b80      	cmp	r3, #128	; 0x80
 80021c4:	d107      	bne.n	80021d6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a1c      	ldr	r2, [pc, #112]	; (800223c <HAL_TIM_IRQHandler+0x260>)
 80021cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	0018      	movs	r0, r3
 80021d2:	f000 f94b 	bl	800246c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	2240      	movs	r2, #64	; 0x40
 80021de:	4013      	ands	r3, r2
 80021e0:	2b40      	cmp	r3, #64	; 0x40
 80021e2:	d10f      	bne.n	8002204 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2240      	movs	r2, #64	; 0x40
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b40      	cmp	r3, #64	; 0x40
 80021f0:	d108      	bne.n	8002204 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2241      	movs	r2, #65	; 0x41
 80021f8:	4252      	negs	r2, r2
 80021fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	0018      	movs	r0, r3
 8002200:	f000 f83e 	bl	8002280 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	2220      	movs	r2, #32
 800220c:	4013      	ands	r3, r2
 800220e:	2b20      	cmp	r3, #32
 8002210:	d10f      	bne.n	8002232 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2220      	movs	r2, #32
 800221a:	4013      	ands	r3, r2
 800221c:	2b20      	cmp	r3, #32
 800221e:	d108      	bne.n	8002232 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2221      	movs	r2, #33	; 0x21
 8002226:	4252      	negs	r2, r2
 8002228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	0018      	movs	r0, r3
 800222e:	f000 f90d 	bl	800244c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	46bd      	mov	sp, r7
 8002236:	b002      	add	sp, #8
 8002238:	bd80      	pop	{r7, pc}
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	fffffeff 	.word	0xfffffeff

08002240 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002248:	46c0      	nop			; (mov r8, r8)
 800224a:	46bd      	mov	sp, r7
 800224c:	b002      	add	sp, #8
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002258:	46c0      	nop			; (mov r8, r8)
 800225a:	46bd      	mov	sp, r7
 800225c:	b002      	add	sp, #8
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002268:	46c0      	nop			; (mov r8, r8)
 800226a:	46bd      	mov	sp, r7
 800226c:	b002      	add	sp, #8
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002278:	46c0      	nop			; (mov r8, r8)
 800227a:	46bd      	mov	sp, r7
 800227c:	b002      	add	sp, #8
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002288:	46c0      	nop			; (mov r8, r8)
 800228a:	46bd      	mov	sp, r7
 800228c:	b002      	add	sp, #8
 800228e:	bd80      	pop	{r7, pc}

08002290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a2f      	ldr	r2, [pc, #188]	; (8002360 <TIM_Base_SetConfig+0xd0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d003      	beq.n	80022b0 <TIM_Base_SetConfig+0x20>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a2e      	ldr	r2, [pc, #184]	; (8002364 <TIM_Base_SetConfig+0xd4>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d108      	bne.n	80022c2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2270      	movs	r2, #112	; 0x70
 80022b4:	4393      	bics	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	4313      	orrs	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a26      	ldr	r2, [pc, #152]	; (8002360 <TIM_Base_SetConfig+0xd0>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d013      	beq.n	80022f2 <TIM_Base_SetConfig+0x62>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a25      	ldr	r2, [pc, #148]	; (8002364 <TIM_Base_SetConfig+0xd4>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00f      	beq.n	80022f2 <TIM_Base_SetConfig+0x62>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a24      	ldr	r2, [pc, #144]	; (8002368 <TIM_Base_SetConfig+0xd8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00b      	beq.n	80022f2 <TIM_Base_SetConfig+0x62>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a23      	ldr	r2, [pc, #140]	; (800236c <TIM_Base_SetConfig+0xdc>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d007      	beq.n	80022f2 <TIM_Base_SetConfig+0x62>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a22      	ldr	r2, [pc, #136]	; (8002370 <TIM_Base_SetConfig+0xe0>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d003      	beq.n	80022f2 <TIM_Base_SetConfig+0x62>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a21      	ldr	r2, [pc, #132]	; (8002374 <TIM_Base_SetConfig+0xe4>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d108      	bne.n	8002304 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	4a20      	ldr	r2, [pc, #128]	; (8002378 <TIM_Base_SetConfig+0xe8>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	4313      	orrs	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2280      	movs	r2, #128	; 0x80
 8002308:	4393      	bics	r3, r2
 800230a:	001a      	movs	r2, r3
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	4313      	orrs	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a0c      	ldr	r2, [pc, #48]	; (8002360 <TIM_Base_SetConfig+0xd0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d00b      	beq.n	800234a <TIM_Base_SetConfig+0xba>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a0d      	ldr	r2, [pc, #52]	; (800236c <TIM_Base_SetConfig+0xdc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d007      	beq.n	800234a <TIM_Base_SetConfig+0xba>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a0c      	ldr	r2, [pc, #48]	; (8002370 <TIM_Base_SetConfig+0xe0>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d003      	beq.n	800234a <TIM_Base_SetConfig+0xba>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a0b      	ldr	r2, [pc, #44]	; (8002374 <TIM_Base_SetConfig+0xe4>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d103      	bne.n	8002352 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	691a      	ldr	r2, [r3, #16]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	615a      	str	r2, [r3, #20]
}
 8002358:	46c0      	nop			; (mov r8, r8)
 800235a:	46bd      	mov	sp, r7
 800235c:	b004      	add	sp, #16
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40012c00 	.word	0x40012c00
 8002364:	40000400 	.word	0x40000400
 8002368:	40002000 	.word	0x40002000
 800236c:	40014000 	.word	0x40014000
 8002370:	40014400 	.word	0x40014400
 8002374:	40014800 	.word	0x40014800
 8002378:	fffffcff 	.word	0xfffffcff

0800237c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	223c      	movs	r2, #60	; 0x3c
 800238a:	5c9b      	ldrb	r3, [r3, r2]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002390:	2302      	movs	r3, #2
 8002392:	e04f      	b.n	8002434 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	223c      	movs	r2, #60	; 0x3c
 8002398:	2101      	movs	r1, #1
 800239a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	223d      	movs	r2, #61	; 0x3d
 80023a0:	2102      	movs	r1, #2
 80023a2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a20      	ldr	r2, [pc, #128]	; (800243c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d108      	bne.n	80023d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4a1f      	ldr	r2, [pc, #124]	; (8002440 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2270      	movs	r2, #112	; 0x70
 80023d4:	4393      	bics	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	4313      	orrs	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a13      	ldr	r2, [pc, #76]	; (800243c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d009      	beq.n	8002408 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a12      	ldr	r2, [pc, #72]	; (8002444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d004      	beq.n	8002408 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a11      	ldr	r2, [pc, #68]	; (8002448 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d10c      	bne.n	8002422 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2280      	movs	r2, #128	; 0x80
 800240c:	4393      	bics	r3, r2
 800240e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	4313      	orrs	r3, r2
 8002418:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	223d      	movs	r2, #61	; 0x3d
 8002426:	2101      	movs	r1, #1
 8002428:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	223c      	movs	r2, #60	; 0x3c
 800242e:	2100      	movs	r1, #0
 8002430:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	0018      	movs	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	b004      	add	sp, #16
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40012c00 	.word	0x40012c00
 8002440:	ff0fffff 	.word	0xff0fffff
 8002444:	40000400 	.word	0x40000400
 8002448:	40014000 	.word	0x40014000

0800244c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002454:	46c0      	nop			; (mov r8, r8)
 8002456:	46bd      	mov	sp, r7
 8002458:	b002      	add	sp, #8
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002464:	46c0      	nop			; (mov r8, r8)
 8002466:	46bd      	mov	sp, r7
 8002468:	b002      	add	sp, #8
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	b002      	add	sp, #8
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e046      	b.n	800251c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2288      	movs	r2, #136	; 0x88
 8002492:	589b      	ldr	r3, [r3, r2]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d107      	bne.n	80024a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2284      	movs	r2, #132	; 0x84
 800249c:	2100      	movs	r1, #0
 800249e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	0018      	movs	r0, r3
 80024a4:	f7fe fa54 	bl	8000950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2288      	movs	r2, #136	; 0x88
 80024ac:	2124      	movs	r1, #36	; 0x24
 80024ae:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2101      	movs	r1, #1
 80024bc:	438a      	bics	r2, r1
 80024be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	0018      	movs	r0, r3
 80024c4:	f000 fc72 	bl	8002dac <UART_SetConfig>
 80024c8:	0003      	movs	r3, r0
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e024      	b.n	800251c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	0018      	movs	r0, r3
 80024de:	f000 fe09 	bl	80030f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	490d      	ldr	r1, [pc, #52]	; (8002524 <HAL_UART_Init+0xa8>)
 80024ee:	400a      	ands	r2, r1
 80024f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	212a      	movs	r1, #42	; 0x2a
 80024fe:	438a      	bics	r2, r1
 8002500:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2101      	movs	r1, #1
 800250e:	430a      	orrs	r2, r1
 8002510:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	0018      	movs	r0, r3
 8002516:	f000 fea1 	bl	800325c <UART_CheckIdleState>
 800251a:	0003      	movs	r3, r0
}
 800251c:	0018      	movs	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	b002      	add	sp, #8
 8002522:	bd80      	pop	{r7, pc}
 8002524:	ffffb7ff 	.word	0xffffb7ff

08002528 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08c      	sub	sp, #48	; 0x30
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	1dbb      	adds	r3, r7, #6
 8002534:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2288      	movs	r2, #136	; 0x88
 800253a:	589b      	ldr	r3, [r3, r2]
 800253c:	2b20      	cmp	r3, #32
 800253e:	d000      	beq.n	8002542 <HAL_UART_Transmit_IT+0x1a>
 8002540:	e08d      	b.n	800265e <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_UART_Transmit_IT+0x28>
 8002548:	1dbb      	adds	r3, r7, #6
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e085      	b.n	8002660 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	015b      	lsls	r3, r3, #5
 800255c:	429a      	cmp	r2, r3
 800255e:	d109      	bne.n	8002574 <HAL_UART_Transmit_IT+0x4c>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d105      	bne.n	8002574 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2201      	movs	r2, #1
 800256c:	4013      	ands	r3, r2
 800256e:	d001      	beq.n	8002574 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e075      	b.n	8002660 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1dba      	adds	r2, r7, #6
 800257e:	2154      	movs	r1, #84	; 0x54
 8002580:	8812      	ldrh	r2, [r2, #0]
 8002582:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	1dba      	adds	r2, r7, #6
 8002588:	2156      	movs	r1, #86	; 0x56
 800258a:	8812      	ldrh	r2, [r2, #0]
 800258c:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2290      	movs	r2, #144	; 0x90
 8002598:	2100      	movs	r1, #0
 800259a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2288      	movs	r2, #136	; 0x88
 80025a0:	2121      	movs	r1, #33	; 0x21
 80025a2:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80025a8:	2380      	movs	r3, #128	; 0x80
 80025aa:	059b      	lsls	r3, r3, #22
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d12a      	bne.n	8002606 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	015b      	lsls	r3, r3, #5
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d107      	bne.n	80025cc <HAL_UART_Transmit_IT+0xa4>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d103      	bne.n	80025cc <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4a28      	ldr	r2, [pc, #160]	; (8002668 <HAL_UART_Transmit_IT+0x140>)
 80025c8:	679a      	str	r2, [r3, #120]	; 0x78
 80025ca:	e002      	b.n	80025d2 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4a27      	ldr	r2, [pc, #156]	; (800266c <HAL_UART_Transmit_IT+0x144>)
 80025d0:	679a      	str	r2, [r3, #120]	; 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025d2:	f3ef 8310 	mrs	r3, PRIMASK
 80025d6:	61fb      	str	r3, [r7, #28]
  return(result);
 80025d8:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80025da:	62bb      	str	r3, [r7, #40]	; 0x28
 80025dc:	2301      	movs	r3, #1
 80025de:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	f383 8810 	msr	PRIMASK, r3
}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2180      	movs	r1, #128	; 0x80
 80025f4:	0409      	lsls	r1, r1, #16
 80025f6:	430a      	orrs	r2, r1
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	f383 8810 	msr	PRIMASK, r3
}
 8002604:	e029      	b.n	800265a <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	2380      	movs	r3, #128	; 0x80
 800260c:	015b      	lsls	r3, r3, #5
 800260e:	429a      	cmp	r2, r3
 8002610:	d107      	bne.n	8002622 <HAL_UART_Transmit_IT+0xfa>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d103      	bne.n	8002622 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4a14      	ldr	r2, [pc, #80]	; (8002670 <HAL_UART_Transmit_IT+0x148>)
 800261e:	679a      	str	r2, [r3, #120]	; 0x78
 8002620:	e002      	b.n	8002628 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4a13      	ldr	r2, [pc, #76]	; (8002674 <HAL_UART_Transmit_IT+0x14c>)
 8002626:	679a      	str	r2, [r3, #120]	; 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002628:	f3ef 8310 	mrs	r3, PRIMASK
 800262c:	613b      	str	r3, [r7, #16]
  return(result);
 800262e:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002632:	2301      	movs	r3, #1
 8002634:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f383 8810 	msr	PRIMASK, r3
}
 800263c:	46c0      	nop			; (mov r8, r8)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2180      	movs	r1, #128	; 0x80
 800264a:	430a      	orrs	r2, r1
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002650:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	f383 8810 	msr	PRIMASK, r3
}
 8002658:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	e000      	b.n	8002660 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 800265e:	2302      	movs	r3, #2
  }
}
 8002660:	0018      	movs	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	b00c      	add	sp, #48	; 0x30
 8002666:	bd80      	pop	{r7, pc}
 8002668:	08003a29 	.word	0x08003a29
 800266c:	0800393d 	.word	0x0800393d
 8002670:	0800387f 	.word	0x0800387f
 8002674:	080037cb 	.word	0x080037cb

08002678 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	1dbb      	adds	r3, r7, #6
 8002684:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	228c      	movs	r2, #140	; 0x8c
 800268a:	589b      	ldr	r3, [r3, r2]
 800268c:	2b20      	cmp	r3, #32
 800268e:	d145      	bne.n	800271c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_UART_Receive_IT+0x26>
 8002696:	1dbb      	adds	r3, r7, #6
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e03d      	b.n	800271e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	2380      	movs	r3, #128	; 0x80
 80026a8:	015b      	lsls	r3, r3, #5
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d109      	bne.n	80026c2 <HAL_UART_Receive_IT+0x4a>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d105      	bne.n	80026c2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2201      	movs	r2, #1
 80026ba:	4013      	ands	r3, r2
 80026bc:	d001      	beq.n	80026c2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e02d      	b.n	800271e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	2380      	movs	r3, #128	; 0x80
 80026d0:	041b      	lsls	r3, r3, #16
 80026d2:	4013      	ands	r3, r2
 80026d4:	d019      	beq.n	800270a <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026d6:	f3ef 8310 	mrs	r3, PRIMASK
 80026da:	613b      	str	r3, [r7, #16]
  return(result);
 80026dc:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80026de:	61fb      	str	r3, [r7, #28]
 80026e0:	2301      	movs	r3, #1
 80026e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f383 8810 	msr	PRIMASK, r3
}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2180      	movs	r1, #128	; 0x80
 80026f8:	04c9      	lsls	r1, r1, #19
 80026fa:	430a      	orrs	r2, r1
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	f383 8810 	msr	PRIMASK, r3
}
 8002708:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800270a:	1dbb      	adds	r3, r7, #6
 800270c:	881a      	ldrh	r2, [r3, #0]
 800270e:	68b9      	ldr	r1, [r7, #8]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	0018      	movs	r0, r3
 8002714:	f000 feb8 	bl	8003488 <UART_Start_Receive_IT>
 8002718:	0003      	movs	r3, r0
 800271a:	e000      	b.n	800271e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800271c:	2302      	movs	r3, #2
  }
}
 800271e:	0018      	movs	r0, r3
 8002720:	46bd      	mov	sp, r7
 8002722:	b008      	add	sp, #32
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002728:	b5b0      	push	{r4, r5, r7, lr}
 800272a:	b0aa      	sub	sp, #168	; 0xa8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	22a4      	movs	r2, #164	; 0xa4
 8002738:	18b9      	adds	r1, r7, r2
 800273a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	20a0      	movs	r0, #160	; 0xa0
 8002744:	1839      	adds	r1, r7, r0
 8002746:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	249c      	movs	r4, #156	; 0x9c
 8002750:	1939      	adds	r1, r7, r4
 8002752:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002754:	0011      	movs	r1, r2
 8002756:	18bb      	adds	r3, r7, r2
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4aa2      	ldr	r2, [pc, #648]	; (80029e4 <HAL_UART_IRQHandler+0x2bc>)
 800275c:	4013      	ands	r3, r2
 800275e:	2298      	movs	r2, #152	; 0x98
 8002760:	18bd      	adds	r5, r7, r2
 8002762:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002764:	18bb      	adds	r3, r7, r2
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d11a      	bne.n	80027a2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800276c:	187b      	adds	r3, r7, r1
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2220      	movs	r2, #32
 8002772:	4013      	ands	r3, r2
 8002774:	d015      	beq.n	80027a2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002776:	183b      	adds	r3, r7, r0
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2220      	movs	r2, #32
 800277c:	4013      	ands	r3, r2
 800277e:	d105      	bne.n	800278c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002780:	193b      	adds	r3, r7, r4
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	055b      	lsls	r3, r3, #21
 8002788:	4013      	ands	r3, r2
 800278a:	d00a      	beq.n	80027a2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002790:	2b00      	cmp	r3, #0
 8002792:	d100      	bne.n	8002796 <HAL_UART_IRQHandler+0x6e>
 8002794:	e2dc      	b.n	8002d50 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	0010      	movs	r0, r2
 800279e:	4798      	blx	r3
      }
      return;
 80027a0:	e2d6      	b.n	8002d50 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80027a2:	2398      	movs	r3, #152	; 0x98
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d100      	bne.n	80027ae <HAL_UART_IRQHandler+0x86>
 80027ac:	e122      	b.n	80029f4 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80027ae:	239c      	movs	r3, #156	; 0x9c
 80027b0:	18fb      	adds	r3, r7, r3
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a8c      	ldr	r2, [pc, #560]	; (80029e8 <HAL_UART_IRQHandler+0x2c0>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	d106      	bne.n	80027c8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80027ba:	23a0      	movs	r3, #160	; 0xa0
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a8a      	ldr	r2, [pc, #552]	; (80029ec <HAL_UART_IRQHandler+0x2c4>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	d100      	bne.n	80027c8 <HAL_UART_IRQHandler+0xa0>
 80027c6:	e115      	b.n	80029f4 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80027c8:	23a4      	movs	r3, #164	; 0xa4
 80027ca:	18fb      	adds	r3, r7, r3
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2201      	movs	r2, #1
 80027d0:	4013      	ands	r3, r2
 80027d2:	d012      	beq.n	80027fa <HAL_UART_IRQHandler+0xd2>
 80027d4:	23a0      	movs	r3, #160	; 0xa0
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	2380      	movs	r3, #128	; 0x80
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	4013      	ands	r3, r2
 80027e0:	d00b      	beq.n	80027fa <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2201      	movs	r2, #1
 80027e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2290      	movs	r2, #144	; 0x90
 80027ee:	589b      	ldr	r3, [r3, r2]
 80027f0:	2201      	movs	r2, #1
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2190      	movs	r1, #144	; 0x90
 80027f8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027fa:	23a4      	movs	r3, #164	; 0xa4
 80027fc:	18fb      	adds	r3, r7, r3
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2202      	movs	r2, #2
 8002802:	4013      	ands	r3, r2
 8002804:	d011      	beq.n	800282a <HAL_UART_IRQHandler+0x102>
 8002806:	239c      	movs	r3, #156	; 0x9c
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2201      	movs	r2, #1
 800280e:	4013      	ands	r3, r2
 8002810:	d00b      	beq.n	800282a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2202      	movs	r2, #2
 8002818:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2290      	movs	r2, #144	; 0x90
 800281e:	589b      	ldr	r3, [r3, r2]
 8002820:	2204      	movs	r2, #4
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2190      	movs	r1, #144	; 0x90
 8002828:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800282a:	23a4      	movs	r3, #164	; 0xa4
 800282c:	18fb      	adds	r3, r7, r3
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2204      	movs	r2, #4
 8002832:	4013      	ands	r3, r2
 8002834:	d011      	beq.n	800285a <HAL_UART_IRQHandler+0x132>
 8002836:	239c      	movs	r3, #156	; 0x9c
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2201      	movs	r2, #1
 800283e:	4013      	ands	r3, r2
 8002840:	d00b      	beq.n	800285a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2204      	movs	r2, #4
 8002848:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2290      	movs	r2, #144	; 0x90
 800284e:	589b      	ldr	r3, [r3, r2]
 8002850:	2202      	movs	r2, #2
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2190      	movs	r1, #144	; 0x90
 8002858:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800285a:	23a4      	movs	r3, #164	; 0xa4
 800285c:	18fb      	adds	r3, r7, r3
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2208      	movs	r2, #8
 8002862:	4013      	ands	r3, r2
 8002864:	d017      	beq.n	8002896 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002866:	23a0      	movs	r3, #160	; 0xa0
 8002868:	18fb      	adds	r3, r7, r3
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2220      	movs	r2, #32
 800286e:	4013      	ands	r3, r2
 8002870:	d105      	bne.n	800287e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002872:	239c      	movs	r3, #156	; 0x9c
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a5b      	ldr	r2, [pc, #364]	; (80029e8 <HAL_UART_IRQHandler+0x2c0>)
 800287a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800287c:	d00b      	beq.n	8002896 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2208      	movs	r2, #8
 8002884:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2290      	movs	r2, #144	; 0x90
 800288a:	589b      	ldr	r3, [r3, r2]
 800288c:	2208      	movs	r2, #8
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2190      	movs	r1, #144	; 0x90
 8002894:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002896:	23a4      	movs	r3, #164	; 0xa4
 8002898:	18fb      	adds	r3, r7, r3
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	2380      	movs	r3, #128	; 0x80
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	4013      	ands	r3, r2
 80028a2:	d013      	beq.n	80028cc <HAL_UART_IRQHandler+0x1a4>
 80028a4:	23a0      	movs	r3, #160	; 0xa0
 80028a6:	18fb      	adds	r3, r7, r3
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	04db      	lsls	r3, r3, #19
 80028ae:	4013      	ands	r3, r2
 80028b0:	d00c      	beq.n	80028cc <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2280      	movs	r2, #128	; 0x80
 80028b8:	0112      	lsls	r2, r2, #4
 80028ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2290      	movs	r2, #144	; 0x90
 80028c0:	589b      	ldr	r3, [r3, r2]
 80028c2:	2220      	movs	r2, #32
 80028c4:	431a      	orrs	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2190      	movs	r1, #144	; 0x90
 80028ca:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2290      	movs	r2, #144	; 0x90
 80028d0:	589b      	ldr	r3, [r3, r2]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d100      	bne.n	80028d8 <HAL_UART_IRQHandler+0x1b0>
 80028d6:	e23d      	b.n	8002d54 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80028d8:	23a4      	movs	r3, #164	; 0xa4
 80028da:	18fb      	adds	r3, r7, r3
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2220      	movs	r2, #32
 80028e0:	4013      	ands	r3, r2
 80028e2:	d015      	beq.n	8002910 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80028e4:	23a0      	movs	r3, #160	; 0xa0
 80028e6:	18fb      	adds	r3, r7, r3
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2220      	movs	r2, #32
 80028ec:	4013      	ands	r3, r2
 80028ee:	d106      	bne.n	80028fe <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80028f0:	239c      	movs	r3, #156	; 0x9c
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	2380      	movs	r3, #128	; 0x80
 80028f8:	055b      	lsls	r3, r3, #21
 80028fa:	4013      	ands	r3, r2
 80028fc:	d008      	beq.n	8002910 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002902:	2b00      	cmp	r3, #0
 8002904:	d004      	beq.n	8002910 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	0010      	movs	r0, r2
 800290e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2290      	movs	r2, #144	; 0x90
 8002914:	589b      	ldr	r3, [r3, r2]
 8002916:	2194      	movs	r1, #148	; 0x94
 8002918:	187a      	adds	r2, r7, r1
 800291a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2240      	movs	r2, #64	; 0x40
 8002924:	4013      	ands	r3, r2
 8002926:	2b40      	cmp	r3, #64	; 0x40
 8002928:	d004      	beq.n	8002934 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800292a:	187b      	adds	r3, r7, r1
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2228      	movs	r2, #40	; 0x28
 8002930:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002932:	d04c      	beq.n	80029ce <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	0018      	movs	r0, r3
 8002938:	f000 feca 	bl	80036d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2240      	movs	r2, #64	; 0x40
 8002944:	4013      	ands	r3, r2
 8002946:	2b40      	cmp	r3, #64	; 0x40
 8002948:	d13c      	bne.n	80029c4 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800294a:	f3ef 8310 	mrs	r3, PRIMASK
 800294e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002950:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002952:	2090      	movs	r0, #144	; 0x90
 8002954:	183a      	adds	r2, r7, r0
 8002956:	6013      	str	r3, [r2, #0]
 8002958:	2301      	movs	r3, #1
 800295a:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800295c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800295e:	f383 8810 	msr	PRIMASK, r3
}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2140      	movs	r1, #64	; 0x40
 8002970:	438a      	bics	r2, r1
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	183b      	adds	r3, r7, r0
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800297a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800297c:	f383 8810 	msr	PRIMASK, r3
}
 8002980:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2280      	movs	r2, #128	; 0x80
 8002986:	589b      	ldr	r3, [r3, r2]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d016      	beq.n	80029ba <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2280      	movs	r2, #128	; 0x80
 8002990:	589b      	ldr	r3, [r3, r2]
 8002992:	4a17      	ldr	r2, [pc, #92]	; (80029f0 <HAL_UART_IRQHandler+0x2c8>)
 8002994:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2280      	movs	r2, #128	; 0x80
 800299a:	589b      	ldr	r3, [r3, r2]
 800299c:	0018      	movs	r0, r3
 800299e:	f7fe fa2f 	bl	8000e00 <HAL_DMA_Abort_IT>
 80029a2:	1e03      	subs	r3, r0, #0
 80029a4:	d01c      	beq.n	80029e0 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2280      	movs	r2, #128	; 0x80
 80029aa:	589b      	ldr	r3, [r3, r2]
 80029ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	2180      	movs	r1, #128	; 0x80
 80029b2:	5852      	ldr	r2, [r2, r1]
 80029b4:	0010      	movs	r0, r2
 80029b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b8:	e012      	b.n	80029e0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	0018      	movs	r0, r3
 80029be:	f000 f9e1 	bl	8002d84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c2:	e00d      	b.n	80029e0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	0018      	movs	r0, r3
 80029c8:	f000 f9dc 	bl	8002d84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029cc:	e008      	b.n	80029e0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	0018      	movs	r0, r3
 80029d2:	f000 f9d7 	bl	8002d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2290      	movs	r2, #144	; 0x90
 80029da:	2100      	movs	r1, #0
 80029dc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80029de:	e1b9      	b.n	8002d54 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e0:	46c0      	nop			; (mov r8, r8)
    return;
 80029e2:	e1b7      	b.n	8002d54 <HAL_UART_IRQHandler+0x62c>
 80029e4:	0000080f 	.word	0x0000080f
 80029e8:	10000001 	.word	0x10000001
 80029ec:	04000120 	.word	0x04000120
 80029f0:	0800379d 	.word	0x0800379d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d000      	beq.n	80029fe <HAL_UART_IRQHandler+0x2d6>
 80029fc:	e13e      	b.n	8002c7c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80029fe:	23a4      	movs	r3, #164	; 0xa4
 8002a00:	18fb      	adds	r3, r7, r3
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2210      	movs	r2, #16
 8002a06:	4013      	ands	r3, r2
 8002a08:	d100      	bne.n	8002a0c <HAL_UART_IRQHandler+0x2e4>
 8002a0a:	e137      	b.n	8002c7c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a0c:	23a0      	movs	r3, #160	; 0xa0
 8002a0e:	18fb      	adds	r3, r7, r3
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2210      	movs	r2, #16
 8002a14:	4013      	ands	r3, r2
 8002a16:	d100      	bne.n	8002a1a <HAL_UART_IRQHandler+0x2f2>
 8002a18:	e130      	b.n	8002c7c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2210      	movs	r2, #16
 8002a20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2240      	movs	r2, #64	; 0x40
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	2b40      	cmp	r3, #64	; 0x40
 8002a2e:	d000      	beq.n	8002a32 <HAL_UART_IRQHandler+0x30a>
 8002a30:	e0a4      	b.n	8002b7c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2280      	movs	r2, #128	; 0x80
 8002a36:	589b      	ldr	r3, [r3, r2]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	217e      	movs	r1, #126	; 0x7e
 8002a3e:	187b      	adds	r3, r7, r1
 8002a40:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002a42:	187b      	adds	r3, r7, r1
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d100      	bne.n	8002a4c <HAL_UART_IRQHandler+0x324>
 8002a4a:	e185      	b.n	8002d58 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	225c      	movs	r2, #92	; 0x5c
 8002a50:	5a9b      	ldrh	r3, [r3, r2]
 8002a52:	187a      	adds	r2, r7, r1
 8002a54:	8812      	ldrh	r2, [r2, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d300      	bcc.n	8002a5c <HAL_UART_IRQHandler+0x334>
 8002a5a:	e17d      	b.n	8002d58 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	187a      	adds	r2, r7, r1
 8002a60:	215e      	movs	r1, #94	; 0x5e
 8002a62:	8812      	ldrh	r2, [r2, #0]
 8002a64:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2280      	movs	r2, #128	; 0x80
 8002a6a:	589b      	ldr	r3, [r3, r2]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2220      	movs	r2, #32
 8002a72:	4013      	ands	r3, r2
 8002a74:	d170      	bne.n	8002b58 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a76:	f3ef 8310 	mrs	r3, PRIMASK
 8002a7a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a7e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a80:	2301      	movs	r3, #1
 8002a82:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a86:	f383 8810 	msr	PRIMASK, r3
}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	49b4      	ldr	r1, [pc, #720]	; (8002d68 <HAL_UART_IRQHandler+0x640>)
 8002a98:	400a      	ands	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a9e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa2:	f383 8810 	msr	PRIMASK, r3
}
 8002aa6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8002aac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ab0:	677b      	str	r3, [r7, #116]	; 0x74
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ab8:	f383 8810 	msr	PRIMASK, r3
}
 8002abc:	46c0      	nop			; (mov r8, r8)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2101      	movs	r1, #1
 8002aca:	438a      	bics	r2, r1
 8002acc:	609a      	str	r2, [r3, #8]
 8002ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ad0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ad4:	f383 8810 	msr	PRIMASK, r3
}
 8002ad8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ada:	f3ef 8310 	mrs	r3, PRIMASK
 8002ade:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ae2:	673b      	str	r3, [r7, #112]	; 0x70
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aea:	f383 8810 	msr	PRIMASK, r3
}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2140      	movs	r1, #64	; 0x40
 8002afc:	438a      	bics	r2, r1
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b02:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b06:	f383 8810 	msr	PRIMASK, r3
}
 8002b0a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	228c      	movs	r2, #140	; 0x8c
 8002b10:	2120      	movs	r1, #32
 8002b12:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b1e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b24:	2301      	movs	r3, #1
 8002b26:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b2a:	f383 8810 	msr	PRIMASK, r3
}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2110      	movs	r1, #16
 8002b3c:	438a      	bics	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b42:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b46:	f383 8810 	msr	PRIMASK, r3
}
 8002b4a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2280      	movs	r2, #128	; 0x80
 8002b50:	589b      	ldr	r3, [r3, r2]
 8002b52:	0018      	movs	r0, r3
 8002b54:	f7fe f8f2 	bl	8000d3c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	225c      	movs	r2, #92	; 0x5c
 8002b62:	5a9a      	ldrh	r2, [r3, r2]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	215e      	movs	r1, #94	; 0x5e
 8002b68:	5a5b      	ldrh	r3, [r3, r1]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	0011      	movs	r1, r2
 8002b74:	0018      	movs	r0, r3
 8002b76:	f000 f90d 	bl	8002d94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b7a:	e0ed      	b.n	8002d58 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	225c      	movs	r2, #92	; 0x5c
 8002b80:	5a99      	ldrh	r1, [r3, r2]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	225e      	movs	r2, #94	; 0x5e
 8002b86:	5a9b      	ldrh	r3, [r3, r2]
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	208e      	movs	r0, #142	; 0x8e
 8002b8c:	183b      	adds	r3, r7, r0
 8002b8e:	1a8a      	subs	r2, r1, r2
 8002b90:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	225e      	movs	r2, #94	; 0x5e
 8002b96:	5a9b      	ldrh	r3, [r3, r2]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d100      	bne.n	8002ba0 <HAL_UART_IRQHandler+0x478>
 8002b9e:	e0dd      	b.n	8002d5c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002ba0:	183b      	adds	r3, r7, r0
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d100      	bne.n	8002baa <HAL_UART_IRQHandler+0x482>
 8002ba8:	e0d8      	b.n	8002d5c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002baa:	f3ef 8310 	mrs	r3, PRIMASK
 8002bae:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002bb2:	2488      	movs	r4, #136	; 0x88
 8002bb4:	193a      	adds	r2, r7, r4
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	2301      	movs	r3, #1
 8002bba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	f383 8810 	msr	PRIMASK, r3
}
 8002bc2:	46c0      	nop			; (mov r8, r8)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4967      	ldr	r1, [pc, #412]	; (8002d6c <HAL_UART_IRQHandler+0x644>)
 8002bd0:	400a      	ands	r2, r1
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	193b      	adds	r3, r7, r4
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f383 8810 	msr	PRIMASK, r3
}
 8002be0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002be2:	f3ef 8310 	mrs	r3, PRIMASK
 8002be6:	61bb      	str	r3, [r7, #24]
  return(result);
 8002be8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002bea:	2484      	movs	r4, #132	; 0x84
 8002bec:	193a      	adds	r2, r7, r4
 8002bee:	6013      	str	r3, [r2, #0]
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f383 8810 	msr	PRIMASK, r3
}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	495a      	ldr	r1, [pc, #360]	; (8002d70 <HAL_UART_IRQHandler+0x648>)
 8002c08:	400a      	ands	r2, r1
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	193b      	adds	r3, r7, r4
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	f383 8810 	msr	PRIMASK, r3
}
 8002c18:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	228c      	movs	r2, #140	; 0x8c
 8002c1e:	2120      	movs	r1, #32
 8002c20:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c2e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c36:	2480      	movs	r4, #128	; 0x80
 8002c38:	193a      	adds	r2, r7, r4
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c42:	f383 8810 	msr	PRIMASK, r3
}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2110      	movs	r1, #16
 8002c54:	438a      	bics	r2, r1
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	193b      	adds	r3, r7, r4
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c60:	f383 8810 	msr	PRIMASK, r3
}
 8002c64:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2202      	movs	r2, #2
 8002c6a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c6c:	183b      	adds	r3, r7, r0
 8002c6e:	881a      	ldrh	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	0011      	movs	r1, r2
 8002c74:	0018      	movs	r0, r3
 8002c76:	f000 f88d 	bl	8002d94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c7a:	e06f      	b.n	8002d5c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c7c:	23a4      	movs	r3, #164	; 0xa4
 8002c7e:	18fb      	adds	r3, r7, r3
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	2380      	movs	r3, #128	; 0x80
 8002c84:	035b      	lsls	r3, r3, #13
 8002c86:	4013      	ands	r3, r2
 8002c88:	d010      	beq.n	8002cac <HAL_UART_IRQHandler+0x584>
 8002c8a:	239c      	movs	r3, #156	; 0x9c
 8002c8c:	18fb      	adds	r3, r7, r3
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	2380      	movs	r3, #128	; 0x80
 8002c92:	03db      	lsls	r3, r3, #15
 8002c94:	4013      	ands	r3, r2
 8002c96:	d009      	beq.n	8002cac <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2280      	movs	r2, #128	; 0x80
 8002c9e:	0352      	lsls	r2, r2, #13
 8002ca0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f001 fbc5 	bl	8004434 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002caa:	e05a      	b.n	8002d62 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cac:	23a4      	movs	r3, #164	; 0xa4
 8002cae:	18fb      	adds	r3, r7, r3
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2280      	movs	r2, #128	; 0x80
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d016      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002cb8:	23a0      	movs	r3, #160	; 0xa0
 8002cba:	18fb      	adds	r3, r7, r3
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2280      	movs	r2, #128	; 0x80
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d106      	bne.n	8002cd2 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002cc4:	239c      	movs	r3, #156	; 0x9c
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	2380      	movs	r3, #128	; 0x80
 8002ccc:	041b      	lsls	r3, r3, #16
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d009      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d042      	beq.n	8002d60 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	0010      	movs	r0, r2
 8002ce2:	4798      	blx	r3
    }
    return;
 8002ce4:	e03c      	b.n	8002d60 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ce6:	23a4      	movs	r3, #164	; 0xa4
 8002ce8:	18fb      	adds	r3, r7, r3
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2240      	movs	r2, #64	; 0x40
 8002cee:	4013      	ands	r3, r2
 8002cf0:	d00a      	beq.n	8002d08 <HAL_UART_IRQHandler+0x5e0>
 8002cf2:	23a0      	movs	r3, #160	; 0xa0
 8002cf4:	18fb      	adds	r3, r7, r3
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2240      	movs	r2, #64	; 0x40
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d004      	beq.n	8002d08 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	0018      	movs	r0, r3
 8002d02:	f000 ff0b 	bl	8003b1c <UART_EndTransmit_IT>
    return;
 8002d06:	e02c      	b.n	8002d62 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d08:	23a4      	movs	r3, #164	; 0xa4
 8002d0a:	18fb      	adds	r3, r7, r3
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	2380      	movs	r3, #128	; 0x80
 8002d10:	041b      	lsls	r3, r3, #16
 8002d12:	4013      	ands	r3, r2
 8002d14:	d00b      	beq.n	8002d2e <HAL_UART_IRQHandler+0x606>
 8002d16:	23a0      	movs	r3, #160	; 0xa0
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	2380      	movs	r3, #128	; 0x80
 8002d1e:	05db      	lsls	r3, r3, #23
 8002d20:	4013      	ands	r3, r2
 8002d22:	d004      	beq.n	8002d2e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	0018      	movs	r0, r3
 8002d28:	f001 fb94 	bl	8004454 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d2c:	e019      	b.n	8002d62 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d2e:	23a4      	movs	r3, #164	; 0xa4
 8002d30:	18fb      	adds	r3, r7, r3
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	045b      	lsls	r3, r3, #17
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d012      	beq.n	8002d62 <HAL_UART_IRQHandler+0x63a>
 8002d3c:	23a0      	movs	r3, #160	; 0xa0
 8002d3e:	18fb      	adds	r3, r7, r3
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	da0d      	bge.n	8002d62 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f001 fb7b 	bl	8004444 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d4e:	e008      	b.n	8002d62 <HAL_UART_IRQHandler+0x63a>
      return;
 8002d50:	46c0      	nop			; (mov r8, r8)
 8002d52:	e006      	b.n	8002d62 <HAL_UART_IRQHandler+0x63a>
    return;
 8002d54:	46c0      	nop			; (mov r8, r8)
 8002d56:	e004      	b.n	8002d62 <HAL_UART_IRQHandler+0x63a>
      return;
 8002d58:	46c0      	nop			; (mov r8, r8)
 8002d5a:	e002      	b.n	8002d62 <HAL_UART_IRQHandler+0x63a>
      return;
 8002d5c:	46c0      	nop			; (mov r8, r8)
 8002d5e:	e000      	b.n	8002d62 <HAL_UART_IRQHandler+0x63a>
    return;
 8002d60:	46c0      	nop			; (mov r8, r8)
  }
}
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b02a      	add	sp, #168	; 0xa8
 8002d66:	bdb0      	pop	{r4, r5, r7, pc}
 8002d68:	fffffeff 	.word	0xfffffeff
 8002d6c:	fffffedf 	.word	0xfffffedf
 8002d70:	effffffe 	.word	0xeffffffe

08002d74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d7c:	46c0      	nop			; (mov r8, r8)
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	b002      	add	sp, #8
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d8c:	46c0      	nop			; (mov r8, r8)
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b002      	add	sp, #8
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	000a      	movs	r2, r1
 8002d9e:	1cbb      	adds	r3, r7, #2
 8002da0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b002      	add	sp, #8
 8002da8:	bd80      	pop	{r7, pc}
	...

08002dac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002db4:	231a      	movs	r3, #26
 8002db6:	18fb      	adds	r3, r7, r3
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4abc      	ldr	r2, [pc, #752]	; (80030cc <UART_SetConfig+0x320>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	0019      	movs	r1, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	4ab7      	ldr	r2, [pc, #732]	; (80030d0 <UART_SetConfig+0x324>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	0019      	movs	r1, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	69fa      	ldr	r2, [r7, #28]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	4aae      	ldr	r2, [pc, #696]	; (80030d4 <UART_SetConfig+0x328>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	0019      	movs	r1, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69fa      	ldr	r2, [r7, #28]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	220f      	movs	r2, #15
 8002e30:	4393      	bics	r3, r2
 8002e32:	0019      	movs	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4aa4      	ldr	r2, [pc, #656]	; (80030d8 <UART_SetConfig+0x32c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d127      	bne.n	8002e9a <UART_SetConfig+0xee>
 8002e4a:	4ba4      	ldr	r3, [pc, #656]	; (80030dc <UART_SetConfig+0x330>)
 8002e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4e:	2203      	movs	r2, #3
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d017      	beq.n	8002e86 <UART_SetConfig+0xda>
 8002e56:	d81b      	bhi.n	8002e90 <UART_SetConfig+0xe4>
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d00a      	beq.n	8002e72 <UART_SetConfig+0xc6>
 8002e5c:	d818      	bhi.n	8002e90 <UART_SetConfig+0xe4>
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <UART_SetConfig+0xbc>
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d00a      	beq.n	8002e7c <UART_SetConfig+0xd0>
 8002e66:	e013      	b.n	8002e90 <UART_SetConfig+0xe4>
 8002e68:	231b      	movs	r3, #27
 8002e6a:	18fb      	adds	r3, r7, r3
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	701a      	strb	r2, [r3, #0]
 8002e70:	e058      	b.n	8002f24 <UART_SetConfig+0x178>
 8002e72:	231b      	movs	r3, #27
 8002e74:	18fb      	adds	r3, r7, r3
 8002e76:	2202      	movs	r2, #2
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	e053      	b.n	8002f24 <UART_SetConfig+0x178>
 8002e7c:	231b      	movs	r3, #27
 8002e7e:	18fb      	adds	r3, r7, r3
 8002e80:	2204      	movs	r2, #4
 8002e82:	701a      	strb	r2, [r3, #0]
 8002e84:	e04e      	b.n	8002f24 <UART_SetConfig+0x178>
 8002e86:	231b      	movs	r3, #27
 8002e88:	18fb      	adds	r3, r7, r3
 8002e8a:	2208      	movs	r2, #8
 8002e8c:	701a      	strb	r2, [r3, #0]
 8002e8e:	e049      	b.n	8002f24 <UART_SetConfig+0x178>
 8002e90:	231b      	movs	r3, #27
 8002e92:	18fb      	adds	r3, r7, r3
 8002e94:	2210      	movs	r2, #16
 8002e96:	701a      	strb	r2, [r3, #0]
 8002e98:	e044      	b.n	8002f24 <UART_SetConfig+0x178>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a90      	ldr	r2, [pc, #576]	; (80030e0 <UART_SetConfig+0x334>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d127      	bne.n	8002ef4 <UART_SetConfig+0x148>
 8002ea4:	4b8d      	ldr	r3, [pc, #564]	; (80030dc <UART_SetConfig+0x330>)
 8002ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea8:	220c      	movs	r2, #12
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b0c      	cmp	r3, #12
 8002eae:	d017      	beq.n	8002ee0 <UART_SetConfig+0x134>
 8002eb0:	d81b      	bhi.n	8002eea <UART_SetConfig+0x13e>
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d00a      	beq.n	8002ecc <UART_SetConfig+0x120>
 8002eb6:	d818      	bhi.n	8002eea <UART_SetConfig+0x13e>
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <UART_SetConfig+0x116>
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d00a      	beq.n	8002ed6 <UART_SetConfig+0x12a>
 8002ec0:	e013      	b.n	8002eea <UART_SetConfig+0x13e>
 8002ec2:	231b      	movs	r3, #27
 8002ec4:	18fb      	adds	r3, r7, r3
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	701a      	strb	r2, [r3, #0]
 8002eca:	e02b      	b.n	8002f24 <UART_SetConfig+0x178>
 8002ecc:	231b      	movs	r3, #27
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	701a      	strb	r2, [r3, #0]
 8002ed4:	e026      	b.n	8002f24 <UART_SetConfig+0x178>
 8002ed6:	231b      	movs	r3, #27
 8002ed8:	18fb      	adds	r3, r7, r3
 8002eda:	2204      	movs	r2, #4
 8002edc:	701a      	strb	r2, [r3, #0]
 8002ede:	e021      	b.n	8002f24 <UART_SetConfig+0x178>
 8002ee0:	231b      	movs	r3, #27
 8002ee2:	18fb      	adds	r3, r7, r3
 8002ee4:	2208      	movs	r2, #8
 8002ee6:	701a      	strb	r2, [r3, #0]
 8002ee8:	e01c      	b.n	8002f24 <UART_SetConfig+0x178>
 8002eea:	231b      	movs	r3, #27
 8002eec:	18fb      	adds	r3, r7, r3
 8002eee:	2210      	movs	r2, #16
 8002ef0:	701a      	strb	r2, [r3, #0]
 8002ef2:	e017      	b.n	8002f24 <UART_SetConfig+0x178>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a7a      	ldr	r2, [pc, #488]	; (80030e4 <UART_SetConfig+0x338>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d104      	bne.n	8002f08 <UART_SetConfig+0x15c>
 8002efe:	231b      	movs	r3, #27
 8002f00:	18fb      	adds	r3, r7, r3
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]
 8002f06:	e00d      	b.n	8002f24 <UART_SetConfig+0x178>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a76      	ldr	r2, [pc, #472]	; (80030e8 <UART_SetConfig+0x33c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d104      	bne.n	8002f1c <UART_SetConfig+0x170>
 8002f12:	231b      	movs	r3, #27
 8002f14:	18fb      	adds	r3, r7, r3
 8002f16:	2200      	movs	r2, #0
 8002f18:	701a      	strb	r2, [r3, #0]
 8002f1a:	e003      	b.n	8002f24 <UART_SetConfig+0x178>
 8002f1c:	231b      	movs	r3, #27
 8002f1e:	18fb      	adds	r3, r7, r3
 8002f20:	2210      	movs	r2, #16
 8002f22:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69da      	ldr	r2, [r3, #28]
 8002f28:	2380      	movs	r3, #128	; 0x80
 8002f2a:	021b      	lsls	r3, r3, #8
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d000      	beq.n	8002f32 <UART_SetConfig+0x186>
 8002f30:	e065      	b.n	8002ffe <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8002f32:	231b      	movs	r3, #27
 8002f34:	18fb      	adds	r3, r7, r3
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d015      	beq.n	8002f68 <UART_SetConfig+0x1bc>
 8002f3c:	dc18      	bgt.n	8002f70 <UART_SetConfig+0x1c4>
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d00d      	beq.n	8002f5e <UART_SetConfig+0x1b2>
 8002f42:	dc15      	bgt.n	8002f70 <UART_SetConfig+0x1c4>
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <UART_SetConfig+0x1a2>
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d005      	beq.n	8002f58 <UART_SetConfig+0x1ac>
 8002f4c:	e010      	b.n	8002f70 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f4e:	f7fe fe4d 	bl	8001bec <HAL_RCC_GetPCLK1Freq>
 8002f52:	0003      	movs	r3, r0
 8002f54:	617b      	str	r3, [r7, #20]
        break;
 8002f56:	e012      	b.n	8002f7e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f58:	4b64      	ldr	r3, [pc, #400]	; (80030ec <UART_SetConfig+0x340>)
 8002f5a:	617b      	str	r3, [r7, #20]
        break;
 8002f5c:	e00f      	b.n	8002f7e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f5e:	f7fe fdb9 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 8002f62:	0003      	movs	r3, r0
 8002f64:	617b      	str	r3, [r7, #20]
        break;
 8002f66:	e00a      	b.n	8002f7e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f68:	2380      	movs	r3, #128	; 0x80
 8002f6a:	021b      	lsls	r3, r3, #8
 8002f6c:	617b      	str	r3, [r7, #20]
        break;
 8002f6e:	e006      	b.n	8002f7e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002f74:	231a      	movs	r3, #26
 8002f76:	18fb      	adds	r3, r7, r3
 8002f78:	2201      	movs	r2, #1
 8002f7a:	701a      	strb	r2, [r3, #0]
        break;
 8002f7c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d100      	bne.n	8002f86 <UART_SetConfig+0x1da>
 8002f84:	e08d      	b.n	80030a2 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f8a:	4b59      	ldr	r3, [pc, #356]	; (80030f0 <UART_SetConfig+0x344>)
 8002f8c:	0052      	lsls	r2, r2, #1
 8002f8e:	5ad3      	ldrh	r3, [r2, r3]
 8002f90:	0019      	movs	r1, r3
 8002f92:	6978      	ldr	r0, [r7, #20]
 8002f94:	f7fd f8bc 	bl	8000110 <__udivsi3>
 8002f98:	0003      	movs	r3, r0
 8002f9a:	005a      	lsls	r2, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	085b      	lsrs	r3, r3, #1
 8002fa2:	18d2      	adds	r2, r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	0019      	movs	r1, r3
 8002faa:	0010      	movs	r0, r2
 8002fac:	f7fd f8b0 	bl	8000110 <__udivsi3>
 8002fb0:	0003      	movs	r3, r0
 8002fb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	2b0f      	cmp	r3, #15
 8002fb8:	d91c      	bls.n	8002ff4 <UART_SetConfig+0x248>
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	2380      	movs	r3, #128	; 0x80
 8002fbe:	025b      	lsls	r3, r3, #9
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d217      	bcs.n	8002ff4 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	200e      	movs	r0, #14
 8002fca:	183b      	adds	r3, r7, r0
 8002fcc:	210f      	movs	r1, #15
 8002fce:	438a      	bics	r2, r1
 8002fd0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	085b      	lsrs	r3, r3, #1
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	2207      	movs	r2, #7
 8002fda:	4013      	ands	r3, r2
 8002fdc:	b299      	uxth	r1, r3
 8002fde:	183b      	adds	r3, r7, r0
 8002fe0:	183a      	adds	r2, r7, r0
 8002fe2:	8812      	ldrh	r2, [r2, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	183a      	adds	r2, r7, r0
 8002fee:	8812      	ldrh	r2, [r2, #0]
 8002ff0:	60da      	str	r2, [r3, #12]
 8002ff2:	e056      	b.n	80030a2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002ff4:	231a      	movs	r3, #26
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	701a      	strb	r2, [r3, #0]
 8002ffc:	e051      	b.n	80030a2 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ffe:	231b      	movs	r3, #27
 8003000:	18fb      	adds	r3, r7, r3
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b08      	cmp	r3, #8
 8003006:	d015      	beq.n	8003034 <UART_SetConfig+0x288>
 8003008:	dc18      	bgt.n	800303c <UART_SetConfig+0x290>
 800300a:	2b04      	cmp	r3, #4
 800300c:	d00d      	beq.n	800302a <UART_SetConfig+0x27e>
 800300e:	dc15      	bgt.n	800303c <UART_SetConfig+0x290>
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <UART_SetConfig+0x26e>
 8003014:	2b02      	cmp	r3, #2
 8003016:	d005      	beq.n	8003024 <UART_SetConfig+0x278>
 8003018:	e010      	b.n	800303c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800301a:	f7fe fde7 	bl	8001bec <HAL_RCC_GetPCLK1Freq>
 800301e:	0003      	movs	r3, r0
 8003020:	617b      	str	r3, [r7, #20]
        break;
 8003022:	e012      	b.n	800304a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003024:	4b31      	ldr	r3, [pc, #196]	; (80030ec <UART_SetConfig+0x340>)
 8003026:	617b      	str	r3, [r7, #20]
        break;
 8003028:	e00f      	b.n	800304a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800302a:	f7fe fd53 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 800302e:	0003      	movs	r3, r0
 8003030:	617b      	str	r3, [r7, #20]
        break;
 8003032:	e00a      	b.n	800304a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003034:	2380      	movs	r3, #128	; 0x80
 8003036:	021b      	lsls	r3, r3, #8
 8003038:	617b      	str	r3, [r7, #20]
        break;
 800303a:	e006      	b.n	800304a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003040:	231a      	movs	r3, #26
 8003042:	18fb      	adds	r3, r7, r3
 8003044:	2201      	movs	r2, #1
 8003046:	701a      	strb	r2, [r3, #0]
        break;
 8003048:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d028      	beq.n	80030a2 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003054:	4b26      	ldr	r3, [pc, #152]	; (80030f0 <UART_SetConfig+0x344>)
 8003056:	0052      	lsls	r2, r2, #1
 8003058:	5ad3      	ldrh	r3, [r2, r3]
 800305a:	0019      	movs	r1, r3
 800305c:	6978      	ldr	r0, [r7, #20]
 800305e:	f7fd f857 	bl	8000110 <__udivsi3>
 8003062:	0003      	movs	r3, r0
 8003064:	001a      	movs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	085b      	lsrs	r3, r3, #1
 800306c:	18d2      	adds	r2, r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	0019      	movs	r1, r3
 8003074:	0010      	movs	r0, r2
 8003076:	f7fd f84b 	bl	8000110 <__udivsi3>
 800307a:	0003      	movs	r3, r0
 800307c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	2b0f      	cmp	r3, #15
 8003082:	d90a      	bls.n	800309a <UART_SetConfig+0x2ee>
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	025b      	lsls	r3, r3, #9
 800308a:	429a      	cmp	r2, r3
 800308c:	d205      	bcs.n	800309a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	b29a      	uxth	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	60da      	str	r2, [r3, #12]
 8003098:	e003      	b.n	80030a2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800309a:	231a      	movs	r3, #26
 800309c:	18fb      	adds	r3, r7, r3
 800309e:	2201      	movs	r2, #1
 80030a0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	226a      	movs	r2, #106	; 0x6a
 80030a6:	2101      	movs	r1, #1
 80030a8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2268      	movs	r2, #104	; 0x68
 80030ae:	2101      	movs	r1, #1
 80030b0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80030be:	231a      	movs	r3, #26
 80030c0:	18fb      	adds	r3, r7, r3
 80030c2:	781b      	ldrb	r3, [r3, #0]
}
 80030c4:	0018      	movs	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b008      	add	sp, #32
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	cfff69f3 	.word	0xcfff69f3
 80030d0:	ffffcfff 	.word	0xffffcfff
 80030d4:	11fff4ff 	.word	0x11fff4ff
 80030d8:	40013800 	.word	0x40013800
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40004400 	.word	0x40004400
 80030e4:	40004800 	.word	0x40004800
 80030e8:	40004c00 	.word	0x40004c00
 80030ec:	00f42400 	.word	0x00f42400
 80030f0:	080048d0 	.word	0x080048d0

080030f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003100:	2201      	movs	r2, #1
 8003102:	4013      	ands	r3, r2
 8003104:	d00b      	beq.n	800311e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	4a4a      	ldr	r2, [pc, #296]	; (8003238 <UART_AdvFeatureConfig+0x144>)
 800310e:	4013      	ands	r3, r2
 8003110:	0019      	movs	r1, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	2202      	movs	r2, #2
 8003124:	4013      	ands	r3, r2
 8003126:	d00b      	beq.n	8003140 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	4a43      	ldr	r2, [pc, #268]	; (800323c <UART_AdvFeatureConfig+0x148>)
 8003130:	4013      	ands	r3, r2
 8003132:	0019      	movs	r1, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003144:	2204      	movs	r2, #4
 8003146:	4013      	ands	r3, r2
 8003148:	d00b      	beq.n	8003162 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	4a3b      	ldr	r2, [pc, #236]	; (8003240 <UART_AdvFeatureConfig+0x14c>)
 8003152:	4013      	ands	r3, r2
 8003154:	0019      	movs	r1, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003166:	2208      	movs	r2, #8
 8003168:	4013      	ands	r3, r2
 800316a:	d00b      	beq.n	8003184 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	4a34      	ldr	r2, [pc, #208]	; (8003244 <UART_AdvFeatureConfig+0x150>)
 8003174:	4013      	ands	r3, r2
 8003176:	0019      	movs	r1, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003188:	2210      	movs	r2, #16
 800318a:	4013      	ands	r3, r2
 800318c:	d00b      	beq.n	80031a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	4a2c      	ldr	r2, [pc, #176]	; (8003248 <UART_AdvFeatureConfig+0x154>)
 8003196:	4013      	ands	r3, r2
 8003198:	0019      	movs	r1, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	2220      	movs	r2, #32
 80031ac:	4013      	ands	r3, r2
 80031ae:	d00b      	beq.n	80031c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	4a25      	ldr	r2, [pc, #148]	; (800324c <UART_AdvFeatureConfig+0x158>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	0019      	movs	r1, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031cc:	2240      	movs	r2, #64	; 0x40
 80031ce:	4013      	ands	r3, r2
 80031d0:	d01d      	beq.n	800320e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	4a1d      	ldr	r2, [pc, #116]	; (8003250 <UART_AdvFeatureConfig+0x15c>)
 80031da:	4013      	ands	r3, r2
 80031dc:	0019      	movs	r1, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031ee:	2380      	movs	r3, #128	; 0x80
 80031f0:	035b      	lsls	r3, r3, #13
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d10b      	bne.n	800320e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	4a15      	ldr	r2, [pc, #84]	; (8003254 <UART_AdvFeatureConfig+0x160>)
 80031fe:	4013      	ands	r3, r2
 8003200:	0019      	movs	r1, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003212:	2280      	movs	r2, #128	; 0x80
 8003214:	4013      	ands	r3, r2
 8003216:	d00b      	beq.n	8003230 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	4a0e      	ldr	r2, [pc, #56]	; (8003258 <UART_AdvFeatureConfig+0x164>)
 8003220:	4013      	ands	r3, r2
 8003222:	0019      	movs	r1, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	605a      	str	r2, [r3, #4]
  }
}
 8003230:	46c0      	nop			; (mov r8, r8)
 8003232:	46bd      	mov	sp, r7
 8003234:	b002      	add	sp, #8
 8003236:	bd80      	pop	{r7, pc}
 8003238:	fffdffff 	.word	0xfffdffff
 800323c:	fffeffff 	.word	0xfffeffff
 8003240:	fffbffff 	.word	0xfffbffff
 8003244:	ffff7fff 	.word	0xffff7fff
 8003248:	ffffefff 	.word	0xffffefff
 800324c:	ffffdfff 	.word	0xffffdfff
 8003250:	ffefffff 	.word	0xffefffff
 8003254:	ff9fffff 	.word	0xff9fffff
 8003258:	fff7ffff 	.word	0xfff7ffff

0800325c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af02      	add	r7, sp, #8
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2290      	movs	r2, #144	; 0x90
 8003268:	2100      	movs	r1, #0
 800326a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800326c:	f7fd fc7e 	bl	8000b6c <HAL_GetTick>
 8003270:	0003      	movs	r3, r0
 8003272:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2208      	movs	r2, #8
 800327c:	4013      	ands	r3, r2
 800327e:	2b08      	cmp	r3, #8
 8003280:	d10c      	bne.n	800329c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2280      	movs	r2, #128	; 0x80
 8003286:	0391      	lsls	r1, r2, #14
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	4a1a      	ldr	r2, [pc, #104]	; (80032f4 <UART_CheckIdleState+0x98>)
 800328c:	9200      	str	r2, [sp, #0]
 800328e:	2200      	movs	r2, #0
 8003290:	f000 f832 	bl	80032f8 <UART_WaitOnFlagUntilTimeout>
 8003294:	1e03      	subs	r3, r0, #0
 8003296:	d001      	beq.n	800329c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e026      	b.n	80032ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2204      	movs	r2, #4
 80032a4:	4013      	ands	r3, r2
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d10c      	bne.n	80032c4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2280      	movs	r2, #128	; 0x80
 80032ae:	03d1      	lsls	r1, r2, #15
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	4a10      	ldr	r2, [pc, #64]	; (80032f4 <UART_CheckIdleState+0x98>)
 80032b4:	9200      	str	r2, [sp, #0]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f000 f81e 	bl	80032f8 <UART_WaitOnFlagUntilTimeout>
 80032bc:	1e03      	subs	r3, r0, #0
 80032be:	d001      	beq.n	80032c4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e012      	b.n	80032ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2288      	movs	r2, #136	; 0x88
 80032c8:	2120      	movs	r1, #32
 80032ca:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	228c      	movs	r2, #140	; 0x8c
 80032d0:	2120      	movs	r1, #32
 80032d2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2284      	movs	r2, #132	; 0x84
 80032e4:	2100      	movs	r1, #0
 80032e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	0018      	movs	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	b004      	add	sp, #16
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	01ffffff 	.word	0x01ffffff

080032f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b094      	sub	sp, #80	; 0x50
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	1dfb      	adds	r3, r7, #7
 8003306:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003308:	e0a7      	b.n	800345a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800330a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800330c:	3301      	adds	r3, #1
 800330e:	d100      	bne.n	8003312 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003310:	e0a3      	b.n	800345a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003312:	f7fd fc2b 	bl	8000b6c <HAL_GetTick>
 8003316:	0002      	movs	r2, r0
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800331e:	429a      	cmp	r2, r3
 8003320:	d302      	bcc.n	8003328 <UART_WaitOnFlagUntilTimeout+0x30>
 8003322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003324:	2b00      	cmp	r3, #0
 8003326:	d13f      	bne.n	80033a8 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003328:	f3ef 8310 	mrs	r3, PRIMASK
 800332c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003330:	647b      	str	r3, [r7, #68]	; 0x44
 8003332:	2301      	movs	r3, #1
 8003334:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003338:	f383 8810 	msr	PRIMASK, r3
}
 800333c:	46c0      	nop			; (mov r8, r8)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	494e      	ldr	r1, [pc, #312]	; (8003484 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800334a:	400a      	ands	r2, r1
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003350:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003354:	f383 8810 	msr	PRIMASK, r3
}
 8003358:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800335a:	f3ef 8310 	mrs	r3, PRIMASK
 800335e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003362:	643b      	str	r3, [r7, #64]	; 0x40
 8003364:	2301      	movs	r3, #1
 8003366:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336a:	f383 8810 	msr	PRIMASK, r3
}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2101      	movs	r1, #1
 800337c:	438a      	bics	r2, r1
 800337e:	609a      	str	r2, [r3, #8]
 8003380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003382:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003386:	f383 8810 	msr	PRIMASK, r3
}
 800338a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2288      	movs	r2, #136	; 0x88
 8003390:	2120      	movs	r1, #32
 8003392:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	228c      	movs	r2, #140	; 0x8c
 8003398:	2120      	movs	r1, #32
 800339a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2284      	movs	r2, #132	; 0x84
 80033a0:	2100      	movs	r1, #0
 80033a2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e069      	b.n	800347c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2204      	movs	r2, #4
 80033b0:	4013      	ands	r3, r2
 80033b2:	d052      	beq.n	800345a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	69da      	ldr	r2, [r3, #28]
 80033ba:	2380      	movs	r3, #128	; 0x80
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	401a      	ands	r2, r3
 80033c0:	2380      	movs	r3, #128	; 0x80
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d148      	bne.n	800345a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2280      	movs	r2, #128	; 0x80
 80033ce:	0112      	lsls	r2, r2, #4
 80033d0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033d2:	f3ef 8310 	mrs	r3, PRIMASK
 80033d6:	613b      	str	r3, [r7, #16]
  return(result);
 80033d8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80033da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033dc:	2301      	movs	r3, #1
 80033de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f383 8810 	msr	PRIMASK, r3
}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4924      	ldr	r1, [pc, #144]	; (8003484 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80033f4:	400a      	ands	r2, r1
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	f383 8810 	msr	PRIMASK, r3
}
 8003402:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003404:	f3ef 8310 	mrs	r3, PRIMASK
 8003408:	61fb      	str	r3, [r7, #28]
  return(result);
 800340a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800340c:	64bb      	str	r3, [r7, #72]	; 0x48
 800340e:	2301      	movs	r3, #1
 8003410:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	f383 8810 	msr	PRIMASK, r3
}
 8003418:	46c0      	nop			; (mov r8, r8)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2101      	movs	r1, #1
 8003426:	438a      	bics	r2, r1
 8003428:	609a      	str	r2, [r3, #8]
 800342a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	f383 8810 	msr	PRIMASK, r3
}
 8003434:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2288      	movs	r2, #136	; 0x88
 800343a:	2120      	movs	r1, #32
 800343c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	228c      	movs	r2, #140	; 0x8c
 8003442:	2120      	movs	r1, #32
 8003444:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2290      	movs	r2, #144	; 0x90
 800344a:	2120      	movs	r1, #32
 800344c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2284      	movs	r2, #132	; 0x84
 8003452:	2100      	movs	r1, #0
 8003454:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e010      	b.n	800347c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	4013      	ands	r3, r2
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	425a      	negs	r2, r3
 800346a:	4153      	adcs	r3, r2
 800346c:	b2db      	uxtb	r3, r3
 800346e:	001a      	movs	r2, r3
 8003470:	1dfb      	adds	r3, r7, #7
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	d100      	bne.n	800347a <UART_WaitOnFlagUntilTimeout+0x182>
 8003478:	e747      	b.n	800330a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	0018      	movs	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	b014      	add	sp, #80	; 0x50
 8003482:	bd80      	pop	{r7, pc}
 8003484:	fffffe5f 	.word	0xfffffe5f

08003488 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b098      	sub	sp, #96	; 0x60
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	1dbb      	adds	r3, r7, #6
 8003494:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	1dba      	adds	r2, r7, #6
 80034a0:	215c      	movs	r1, #92	; 0x5c
 80034a2:	8812      	ldrh	r2, [r2, #0]
 80034a4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1dba      	adds	r2, r7, #6
 80034aa:	215e      	movs	r1, #94	; 0x5e
 80034ac:	8812      	ldrh	r2, [r2, #0]
 80034ae:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	2380      	movs	r3, #128	; 0x80
 80034bc:	015b      	lsls	r3, r3, #5
 80034be:	429a      	cmp	r2, r3
 80034c0:	d10d      	bne.n	80034de <UART_Start_Receive_IT+0x56>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d104      	bne.n	80034d4 <UART_Start_Receive_IT+0x4c>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2260      	movs	r2, #96	; 0x60
 80034ce:	497b      	ldr	r1, [pc, #492]	; (80036bc <UART_Start_Receive_IT+0x234>)
 80034d0:	5299      	strh	r1, [r3, r2]
 80034d2:	e02e      	b.n	8003532 <UART_Start_Receive_IT+0xaa>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2260      	movs	r2, #96	; 0x60
 80034d8:	21ff      	movs	r1, #255	; 0xff
 80034da:	5299      	strh	r1, [r3, r2]
 80034dc:	e029      	b.n	8003532 <UART_Start_Receive_IT+0xaa>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10d      	bne.n	8003502 <UART_Start_Receive_IT+0x7a>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d104      	bne.n	80034f8 <UART_Start_Receive_IT+0x70>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2260      	movs	r2, #96	; 0x60
 80034f2:	21ff      	movs	r1, #255	; 0xff
 80034f4:	5299      	strh	r1, [r3, r2]
 80034f6:	e01c      	b.n	8003532 <UART_Start_Receive_IT+0xaa>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2260      	movs	r2, #96	; 0x60
 80034fc:	217f      	movs	r1, #127	; 0x7f
 80034fe:	5299      	strh	r1, [r3, r2]
 8003500:	e017      	b.n	8003532 <UART_Start_Receive_IT+0xaa>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	2380      	movs	r3, #128	; 0x80
 8003508:	055b      	lsls	r3, r3, #21
 800350a:	429a      	cmp	r2, r3
 800350c:	d10d      	bne.n	800352a <UART_Start_Receive_IT+0xa2>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d104      	bne.n	8003520 <UART_Start_Receive_IT+0x98>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2260      	movs	r2, #96	; 0x60
 800351a:	217f      	movs	r1, #127	; 0x7f
 800351c:	5299      	strh	r1, [r3, r2]
 800351e:	e008      	b.n	8003532 <UART_Start_Receive_IT+0xaa>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2260      	movs	r2, #96	; 0x60
 8003524:	213f      	movs	r1, #63	; 0x3f
 8003526:	5299      	strh	r1, [r3, r2]
 8003528:	e003      	b.n	8003532 <UART_Start_Receive_IT+0xaa>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2260      	movs	r2, #96	; 0x60
 800352e:	2100      	movs	r1, #0
 8003530:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2290      	movs	r2, #144	; 0x90
 8003536:	2100      	movs	r1, #0
 8003538:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	228c      	movs	r2, #140	; 0x8c
 800353e:	2122      	movs	r1, #34	; 0x22
 8003540:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003542:	f3ef 8310 	mrs	r3, PRIMASK
 8003546:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8003548:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800354a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800354c:	2301      	movs	r3, #1
 800354e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003552:	f383 8810 	msr	PRIMASK, r3
}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2101      	movs	r1, #1
 8003564:	430a      	orrs	r2, r1
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800356a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800356c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800356e:	f383 8810 	msr	PRIMASK, r3
}
 8003572:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003578:	2380      	movs	r3, #128	; 0x80
 800357a:	059b      	lsls	r3, r3, #22
 800357c:	429a      	cmp	r2, r3
 800357e:	d150      	bne.n	8003622 <UART_Start_Receive_IT+0x19a>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2268      	movs	r2, #104	; 0x68
 8003584:	5a9b      	ldrh	r3, [r3, r2]
 8003586:	1dba      	adds	r2, r7, #6
 8003588:	8812      	ldrh	r2, [r2, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d349      	bcc.n	8003622 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	2380      	movs	r3, #128	; 0x80
 8003594:	015b      	lsls	r3, r3, #5
 8003596:	429a      	cmp	r2, r3
 8003598:	d107      	bne.n	80035aa <UART_Start_Receive_IT+0x122>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d103      	bne.n	80035aa <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	4a46      	ldr	r2, [pc, #280]	; (80036c0 <UART_Start_Receive_IT+0x238>)
 80035a6:	675a      	str	r2, [r3, #116]	; 0x74
 80035a8:	e002      	b.n	80035b0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4a45      	ldr	r2, [pc, #276]	; (80036c4 <UART_Start_Receive_IT+0x23c>)
 80035ae:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d019      	beq.n	80035ec <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035b8:	f3ef 8310 	mrs	r3, PRIMASK
 80035bc:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80035be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80035c2:	2301      	movs	r3, #1
 80035c4:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c8:	f383 8810 	msr	PRIMASK, r3
}
 80035cc:	46c0      	nop			; (mov r8, r8)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2180      	movs	r1, #128	; 0x80
 80035da:	0049      	lsls	r1, r1, #1
 80035dc:	430a      	orrs	r2, r1
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e6:	f383 8810 	msr	PRIMASK, r3
}
 80035ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ec:	f3ef 8310 	mrs	r3, PRIMASK
 80035f0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80035f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80035f4:	657b      	str	r3, [r7, #84]	; 0x54
 80035f6:	2301      	movs	r3, #1
 80035f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fc:	f383 8810 	msr	PRIMASK, r3
}
 8003600:	46c0      	nop			; (mov r8, r8)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2180      	movs	r1, #128	; 0x80
 800360e:	0549      	lsls	r1, r1, #21
 8003610:	430a      	orrs	r2, r1
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003616:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361a:	f383 8810 	msr	PRIMASK, r3
}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	e047      	b.n	80036b2 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	2380      	movs	r3, #128	; 0x80
 8003628:	015b      	lsls	r3, r3, #5
 800362a:	429a      	cmp	r2, r3
 800362c:	d107      	bne.n	800363e <UART_Start_Receive_IT+0x1b6>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d103      	bne.n	800363e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4a23      	ldr	r2, [pc, #140]	; (80036c8 <UART_Start_Receive_IT+0x240>)
 800363a:	675a      	str	r2, [r3, #116]	; 0x74
 800363c:	e002      	b.n	8003644 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4a22      	ldr	r2, [pc, #136]	; (80036cc <UART_Start_Receive_IT+0x244>)
 8003642:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d019      	beq.n	8003680 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800364c:	f3ef 8310 	mrs	r3, PRIMASK
 8003650:	61fb      	str	r3, [r7, #28]
  return(result);
 8003652:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003654:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003656:	2301      	movs	r3, #1
 8003658:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	f383 8810 	msr	PRIMASK, r3
}
 8003660:	46c0      	nop			; (mov r8, r8)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2190      	movs	r1, #144	; 0x90
 800366e:	0049      	lsls	r1, r1, #1
 8003670:	430a      	orrs	r2, r1
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	f383 8810 	msr	PRIMASK, r3
}
 800367e:	e018      	b.n	80036b2 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003680:	f3ef 8310 	mrs	r3, PRIMASK
 8003684:	613b      	str	r3, [r7, #16]
  return(result);
 8003686:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003688:	653b      	str	r3, [r7, #80]	; 0x50
 800368a:	2301      	movs	r3, #1
 800368c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f383 8810 	msr	PRIMASK, r3
}
 8003694:	46c0      	nop			; (mov r8, r8)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2120      	movs	r1, #32
 80036a2:	430a      	orrs	r2, r1
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	f383 8810 	msr	PRIMASK, r3
}
 80036b0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b018      	add	sp, #96	; 0x60
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	000001ff 	.word	0x000001ff
 80036c0:	08004149 	.word	0x08004149
 80036c4:	08003e5d 	.word	0x08003e5d
 80036c8:	08003ce9 	.word	0x08003ce9
 80036cc:	08003b75 	.word	0x08003b75

080036d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08e      	sub	sp, #56	; 0x38
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036d8:	f3ef 8310 	mrs	r3, PRIMASK
 80036dc:	617b      	str	r3, [r7, #20]
  return(result);
 80036de:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036e0:	637b      	str	r3, [r7, #52]	; 0x34
 80036e2:	2301      	movs	r3, #1
 80036e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	f383 8810 	msr	PRIMASK, r3
}
 80036ec:	46c0      	nop			; (mov r8, r8)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4926      	ldr	r1, [pc, #152]	; (8003794 <UART_EndRxTransfer+0xc4>)
 80036fa:	400a      	ands	r2, r1
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003700:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	f383 8810 	msr	PRIMASK, r3
}
 8003708:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800370a:	f3ef 8310 	mrs	r3, PRIMASK
 800370e:	623b      	str	r3, [r7, #32]
  return(result);
 8003710:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003712:	633b      	str	r3, [r7, #48]	; 0x30
 8003714:	2301      	movs	r3, #1
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	f383 8810 	msr	PRIMASK, r3
}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	491b      	ldr	r1, [pc, #108]	; (8003798 <UART_EndRxTransfer+0xc8>)
 800372c:	400a      	ands	r2, r1
 800372e:	609a      	str	r2, [r3, #8]
 8003730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003732:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003736:	f383 8810 	msr	PRIMASK, r3
}
 800373a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003740:	2b01      	cmp	r3, #1
 8003742:	d118      	bne.n	8003776 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003744:	f3ef 8310 	mrs	r3, PRIMASK
 8003748:	60bb      	str	r3, [r7, #8]
  return(result);
 800374a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800374c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800374e:	2301      	movs	r3, #1
 8003750:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f383 8810 	msr	PRIMASK, r3
}
 8003758:	46c0      	nop			; (mov r8, r8)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2110      	movs	r1, #16
 8003766:	438a      	bics	r2, r1
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f383 8810 	msr	PRIMASK, r3
}
 8003774:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	228c      	movs	r2, #140	; 0x8c
 800377a:	2120      	movs	r1, #32
 800377c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	675a      	str	r2, [r3, #116]	; 0x74
}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	46bd      	mov	sp, r7
 800378e:	b00e      	add	sp, #56	; 0x38
 8003790:	bd80      	pop	{r7, pc}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	fffffedf 	.word	0xfffffedf
 8003798:	effffffe 	.word	0xeffffffe

0800379c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	225e      	movs	r2, #94	; 0x5e
 80037ae:	2100      	movs	r1, #0
 80037b0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2256      	movs	r2, #86	; 0x56
 80037b6:	2100      	movs	r1, #0
 80037b8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	0018      	movs	r0, r3
 80037be:	f7ff fae1 	bl	8002d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b004      	add	sp, #16
 80037c8:	bd80      	pop	{r7, pc}

080037ca <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b08a      	sub	sp, #40	; 0x28
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2288      	movs	r2, #136	; 0x88
 80037d6:	589b      	ldr	r3, [r3, r2]
 80037d8:	2b21      	cmp	r3, #33	; 0x21
 80037da:	d14c      	bne.n	8003876 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2256      	movs	r2, #86	; 0x56
 80037e0:	5a9b      	ldrh	r3, [r3, r2]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d132      	bne.n	800384e <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e8:	f3ef 8310 	mrs	r3, PRIMASK
 80037ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80037ee:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
 80037f2:	2301      	movs	r3, #1
 80037f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f383 8810 	msr	PRIMASK, r3
}
 80037fc:	46c0      	nop			; (mov r8, r8)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2180      	movs	r1, #128	; 0x80
 800380a:	438a      	bics	r2, r1
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f383 8810 	msr	PRIMASK, r3
}
 8003818:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800381a:	f3ef 8310 	mrs	r3, PRIMASK
 800381e:	617b      	str	r3, [r7, #20]
  return(result);
 8003820:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003822:	623b      	str	r3, [r7, #32]
 8003824:	2301      	movs	r3, #1
 8003826:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	f383 8810 	msr	PRIMASK, r3
}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2140      	movs	r1, #64	; 0x40
 800383c:	430a      	orrs	r2, r1
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f383 8810 	msr	PRIMASK, r3
}
 800384a:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800384c:	e013      	b.n	8003876 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003852:	781a      	ldrb	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2256      	movs	r2, #86	; 0x56
 8003868:	5a9b      	ldrh	r3, [r3, r2]
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b299      	uxth	r1, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2256      	movs	r2, #86	; 0x56
 8003874:	5299      	strh	r1, [r3, r2]
}
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	46bd      	mov	sp, r7
 800387a:	b00a      	add	sp, #40	; 0x28
 800387c:	bd80      	pop	{r7, pc}

0800387e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b08c      	sub	sp, #48	; 0x30
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2288      	movs	r2, #136	; 0x88
 800388a:	589b      	ldr	r3, [r3, r2]
 800388c:	2b21      	cmp	r3, #33	; 0x21
 800388e:	d151      	bne.n	8003934 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2256      	movs	r2, #86	; 0x56
 8003894:	5a9b      	ldrh	r3, [r3, r2]
 8003896:	b29b      	uxth	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d132      	bne.n	8003902 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800389c:	f3ef 8310 	mrs	r3, PRIMASK
 80038a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80038a2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80038a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80038a6:	2301      	movs	r3, #1
 80038a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f383 8810 	msr	PRIMASK, r3
}
 80038b0:	46c0      	nop			; (mov r8, r8)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2180      	movs	r1, #128	; 0x80
 80038be:	438a      	bics	r2, r1
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f383 8810 	msr	PRIMASK, r3
}
 80038cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ce:	f3ef 8310 	mrs	r3, PRIMASK
 80038d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80038d4:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
 80038d8:	2301      	movs	r3, #1
 80038da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f383 8810 	msr	PRIMASK, r3
}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2140      	movs	r1, #64	; 0x40
 80038f0:	430a      	orrs	r2, r1
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	f383 8810 	msr	PRIMASK, r3
}
 80038fe:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003900:	e018      	b.n	8003934 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	001a      	movs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	05d2      	lsls	r2, r2, #23
 8003914:	0dd2      	lsrs	r2, r2, #23
 8003916:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391c:	1c9a      	adds	r2, r3, #2
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2256      	movs	r2, #86	; 0x56
 8003926:	5a9b      	ldrh	r3, [r3, r2]
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b299      	uxth	r1, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2256      	movs	r2, #86	; 0x56
 8003932:	5299      	strh	r1, [r3, r2]
}
 8003934:	46c0      	nop			; (mov r8, r8)
 8003936:	46bd      	mov	sp, r7
 8003938:	b00c      	add	sp, #48	; 0x30
 800393a:	bd80      	pop	{r7, pc}

0800393c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08c      	sub	sp, #48	; 0x30
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2288      	movs	r2, #136	; 0x88
 8003948:	589b      	ldr	r3, [r3, r2]
 800394a:	2b21      	cmp	r3, #33	; 0x21
 800394c:	d165      	bne.n	8003a1a <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800394e:	232e      	movs	r3, #46	; 0x2e
 8003950:	18fb      	adds	r3, r7, r3
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	216a      	movs	r1, #106	; 0x6a
 8003956:	5a52      	ldrh	r2, [r2, r1]
 8003958:	801a      	strh	r2, [r3, #0]
 800395a:	e059      	b.n	8003a10 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2256      	movs	r2, #86	; 0x56
 8003960:	5a9b      	ldrh	r3, [r3, r2]
 8003962:	b29b      	uxth	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d133      	bne.n	80039d0 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003968:	f3ef 8310 	mrs	r3, PRIMASK
 800396c:	60fb      	str	r3, [r7, #12]
  return(result);
 800396e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003970:	62bb      	str	r3, [r7, #40]	; 0x28
 8003972:	2301      	movs	r3, #1
 8003974:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f383 8810 	msr	PRIMASK, r3
}
 800397c:	46c0      	nop			; (mov r8, r8)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4926      	ldr	r1, [pc, #152]	; (8003a24 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800398a:	400a      	ands	r2, r1
 800398c:	609a      	str	r2, [r3, #8]
 800398e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003990:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f383 8810 	msr	PRIMASK, r3
}
 8003998:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800399a:	f3ef 8310 	mrs	r3, PRIMASK
 800399e:	61bb      	str	r3, [r7, #24]
  return(result);
 80039a0:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
 80039a4:	2301      	movs	r3, #1
 80039a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f383 8810 	msr	PRIMASK, r3
}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2140      	movs	r1, #64	; 0x40
 80039bc:	430a      	orrs	r2, r1
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	f383 8810 	msr	PRIMASK, r3
}
 80039ca:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 80039cc:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80039ce:	e024      	b.n	8003a1a <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	2280      	movs	r2, #128	; 0x80
 80039d8:	4013      	ands	r3, r2
 80039da:	d013      	beq.n	8003a04 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e0:	781a      	ldrb	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2256      	movs	r2, #86	; 0x56
 80039f6:	5a9b      	ldrh	r3, [r3, r2]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b299      	uxth	r1, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2256      	movs	r2, #86	; 0x56
 8003a02:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003a04:	212e      	movs	r1, #46	; 0x2e
 8003a06:	187b      	adds	r3, r7, r1
 8003a08:	881a      	ldrh	r2, [r3, #0]
 8003a0a:	187b      	adds	r3, r7, r1
 8003a0c:	3a01      	subs	r2, #1
 8003a0e:	801a      	strh	r2, [r3, #0]
 8003a10:	232e      	movs	r3, #46	; 0x2e
 8003a12:	18fb      	adds	r3, r7, r3
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1a0      	bne.n	800395c <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	b00c      	add	sp, #48	; 0x30
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	ff7fffff 	.word	0xff7fffff

08003a28 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08c      	sub	sp, #48	; 0x30
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2288      	movs	r2, #136	; 0x88
 8003a34:	589b      	ldr	r3, [r3, r2]
 8003a36:	2b21      	cmp	r3, #33	; 0x21
 8003a38:	d16a      	bne.n	8003b10 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003a3a:	232e      	movs	r3, #46	; 0x2e
 8003a3c:	18fb      	adds	r3, r7, r3
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	216a      	movs	r1, #106	; 0x6a
 8003a42:	5a52      	ldrh	r2, [r2, r1]
 8003a44:	801a      	strh	r2, [r3, #0]
 8003a46:	e05e      	b.n	8003b06 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2256      	movs	r2, #86	; 0x56
 8003a4c:	5a9b      	ldrh	r3, [r3, r2]
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d133      	bne.n	8003abc <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a54:	f3ef 8310 	mrs	r3, PRIMASK
 8003a58:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a5a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5e:	2301      	movs	r3, #1
 8003a60:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f383 8810 	msr	PRIMASK, r3
}
 8003a68:	46c0      	nop			; (mov r8, r8)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4928      	ldr	r1, [pc, #160]	; (8003b18 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8003a76:	400a      	ands	r2, r1
 8003a78:	609a      	str	r2, [r3, #8]
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f383 8810 	msr	PRIMASK, r3
}
 8003a84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a86:	f3ef 8310 	mrs	r3, PRIMASK
 8003a8a:	617b      	str	r3, [r7, #20]
  return(result);
 8003a8c:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a8e:	623b      	str	r3, [r7, #32]
 8003a90:	2301      	movs	r3, #1
 8003a92:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	f383 8810 	msr	PRIMASK, r3
}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2140      	movs	r1, #64	; 0x40
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f383 8810 	msr	PRIMASK, r3
}
 8003ab6:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8003ab8:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003aba:	e029      	b.n	8003b10 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	2280      	movs	r2, #128	; 0x80
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	d018      	beq.n	8003afa <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003acc:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	001a      	movs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	05d2      	lsls	r2, r2, #23
 8003ada:	0dd2      	lsrs	r2, r2, #23
 8003adc:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae2:	1c9a      	adds	r2, r3, #2
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2256      	movs	r2, #86	; 0x56
 8003aec:	5a9b      	ldrh	r3, [r3, r2]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b299      	uxth	r1, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2256      	movs	r2, #86	; 0x56
 8003af8:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003afa:	212e      	movs	r1, #46	; 0x2e
 8003afc:	187b      	adds	r3, r7, r1
 8003afe:	881a      	ldrh	r2, [r3, #0]
 8003b00:	187b      	adds	r3, r7, r1
 8003b02:	3a01      	subs	r2, #1
 8003b04:	801a      	strh	r2, [r3, #0]
 8003b06:	232e      	movs	r3, #46	; 0x2e
 8003b08:	18fb      	adds	r3, r7, r3
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d19b      	bne.n	8003a48 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8003b10:	46c0      	nop			; (mov r8, r8)
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b00c      	add	sp, #48	; 0x30
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	ff7fffff 	.word	0xff7fffff

08003b1c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b24:	f3ef 8310 	mrs	r3, PRIMASK
 8003b28:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b2a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b2c:	617b      	str	r3, [r7, #20]
 8003b2e:	2301      	movs	r3, #1
 8003b30:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f383 8810 	msr	PRIMASK, r3
}
 8003b38:	46c0      	nop			; (mov r8, r8)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2140      	movs	r1, #64	; 0x40
 8003b46:	438a      	bics	r2, r1
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f383 8810 	msr	PRIMASK, r3
}
 8003b54:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2288      	movs	r2, #136	; 0x88
 8003b5a:	2120      	movs	r1, #32
 8003b5c:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	0018      	movs	r0, r3
 8003b68:	f7ff f904 	bl	8002d74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b6c:	46c0      	nop			; (mov r8, r8)
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b006      	add	sp, #24
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b090      	sub	sp, #64	; 0x40
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003b7c:	203e      	movs	r0, #62	; 0x3e
 8003b7e:	183b      	adds	r3, r7, r0
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	2160      	movs	r1, #96	; 0x60
 8003b84:	5a52      	ldrh	r2, [r2, r1]
 8003b86:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	228c      	movs	r2, #140	; 0x8c
 8003b8c:	589b      	ldr	r3, [r3, r2]
 8003b8e:	2b22      	cmp	r3, #34	; 0x22
 8003b90:	d000      	beq.n	8003b94 <UART_RxISR_8BIT+0x20>
 8003b92:	e09a      	b.n	8003cca <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b9a:	213c      	movs	r1, #60	; 0x3c
 8003b9c:	187b      	adds	r3, r7, r1
 8003b9e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003ba0:	187b      	adds	r3, r7, r1
 8003ba2:	881b      	ldrh	r3, [r3, #0]
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	183b      	adds	r3, r7, r0
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	b2d9      	uxtb	r1, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb0:	400a      	ands	r2, r1
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	225e      	movs	r2, #94	; 0x5e
 8003bc4:	5a9b      	ldrh	r3, [r3, r2]
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	b299      	uxth	r1, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	225e      	movs	r2, #94	; 0x5e
 8003bd0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	225e      	movs	r2, #94	; 0x5e
 8003bd6:	5a9b      	ldrh	r3, [r3, r2]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d000      	beq.n	8003be0 <UART_RxISR_8BIT+0x6c>
 8003bde:	e07c      	b.n	8003cda <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003be0:	f3ef 8310 	mrs	r3, PRIMASK
 8003be4:	61bb      	str	r3, [r7, #24]
  return(result);
 8003be6:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003be8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bea:	2301      	movs	r3, #1
 8003bec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f383 8810 	msr	PRIMASK, r3
}
 8003bf4:	46c0      	nop			; (mov r8, r8)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4938      	ldr	r1, [pc, #224]	; (8003ce4 <UART_RxISR_8BIT+0x170>)
 8003c02:	400a      	ands	r2, r1
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c08:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	f383 8810 	msr	PRIMASK, r3
}
 8003c10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c12:	f3ef 8310 	mrs	r3, PRIMASK
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c22:	f383 8810 	msr	PRIMASK, r3
}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2101      	movs	r1, #1
 8003c34:	438a      	bics	r2, r1
 8003c36:	609a      	str	r2, [r3, #8]
 8003c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3e:	f383 8810 	msr	PRIMASK, r3
}
 8003c42:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	228c      	movs	r2, #140	; 0x8c
 8003c48:	2120      	movs	r1, #32
 8003c4a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d12f      	bne.n	8003cc0 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c66:	f3ef 8310 	mrs	r3, PRIMASK
 8003c6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c6c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c6e:	633b      	str	r3, [r7, #48]	; 0x30
 8003c70:	2301      	movs	r3, #1
 8003c72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	f383 8810 	msr	PRIMASK, r3
}
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2110      	movs	r1, #16
 8003c88:	438a      	bics	r2, r1
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f383 8810 	msr	PRIMASK, r3
}
 8003c96:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	2210      	movs	r2, #16
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b10      	cmp	r3, #16
 8003ca4:	d103      	bne.n	8003cae <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2210      	movs	r2, #16
 8003cac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	225c      	movs	r2, #92	; 0x5c
 8003cb2:	5a9a      	ldrh	r2, [r3, r2]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	0011      	movs	r1, r2
 8003cb8:	0018      	movs	r0, r3
 8003cba:	f7ff f86b 	bl	8002d94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003cbe:	e00c      	b.n	8003cda <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f7fc fba8 	bl	8000418 <HAL_UART_RxCpltCallback>
}
 8003cc8:	e007      	b.n	8003cda <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699a      	ldr	r2, [r3, #24]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2108      	movs	r1, #8
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	619a      	str	r2, [r3, #24]
}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	b010      	add	sp, #64	; 0x40
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	fffffedf 	.word	0xfffffedf

08003ce8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b090      	sub	sp, #64	; 0x40
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003cf0:	203e      	movs	r0, #62	; 0x3e
 8003cf2:	183b      	adds	r3, r7, r0
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	2160      	movs	r1, #96	; 0x60
 8003cf8:	5a52      	ldrh	r2, [r2, r1]
 8003cfa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	228c      	movs	r2, #140	; 0x8c
 8003d00:	589b      	ldr	r3, [r3, r2]
 8003d02:	2b22      	cmp	r3, #34	; 0x22
 8003d04:	d000      	beq.n	8003d08 <UART_RxISR_16BIT+0x20>
 8003d06:	e09a      	b.n	8003e3e <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d0e:	213c      	movs	r1, #60	; 0x3c
 8003d10:	187b      	adds	r3, r7, r1
 8003d12:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d18:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003d1a:	187b      	adds	r3, r7, r1
 8003d1c:	183a      	adds	r2, r7, r0
 8003d1e:	881b      	ldrh	r3, [r3, #0]
 8003d20:	8812      	ldrh	r2, [r2, #0]
 8003d22:	4013      	ands	r3, r2
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d28:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2e:	1c9a      	adds	r2, r3, #2
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	225e      	movs	r2, #94	; 0x5e
 8003d38:	5a9b      	ldrh	r3, [r3, r2]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	b299      	uxth	r1, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	225e      	movs	r2, #94	; 0x5e
 8003d44:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	225e      	movs	r2, #94	; 0x5e
 8003d4a:	5a9b      	ldrh	r3, [r3, r2]
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d000      	beq.n	8003d54 <UART_RxISR_16BIT+0x6c>
 8003d52:	e07c      	b.n	8003e4e <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d54:	f3ef 8310 	mrs	r3, PRIMASK
 8003d58:	617b      	str	r3, [r7, #20]
  return(result);
 8003d5a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d5e:	2301      	movs	r3, #1
 8003d60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	f383 8810 	msr	PRIMASK, r3
}
 8003d68:	46c0      	nop			; (mov r8, r8)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4938      	ldr	r1, [pc, #224]	; (8003e58 <UART_RxISR_16BIT+0x170>)
 8003d76:	400a      	ands	r2, r1
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	f383 8810 	msr	PRIMASK, r3
}
 8003d84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d86:	f3ef 8310 	mrs	r3, PRIMASK
 8003d8a:	623b      	str	r3, [r7, #32]
  return(result);
 8003d8c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8e:	633b      	str	r3, [r7, #48]	; 0x30
 8003d90:	2301      	movs	r3, #1
 8003d92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	f383 8810 	msr	PRIMASK, r3
}
 8003d9a:	46c0      	nop			; (mov r8, r8)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2101      	movs	r1, #1
 8003da8:	438a      	bics	r2, r1
 8003daa:	609a      	str	r2, [r3, #8]
 8003dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	f383 8810 	msr	PRIMASK, r3
}
 8003db6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	228c      	movs	r2, #140	; 0x8c
 8003dbc:	2120      	movs	r1, #32
 8003dbe:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d12f      	bne.n	8003e34 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dda:	f3ef 8310 	mrs	r3, PRIMASK
 8003dde:	60bb      	str	r3, [r7, #8]
  return(result);
 8003de0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003de4:	2301      	movs	r3, #1
 8003de6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f383 8810 	msr	PRIMASK, r3
}
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2110      	movs	r1, #16
 8003dfc:	438a      	bics	r2, r1
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f383 8810 	msr	PRIMASK, r3
}
 8003e0a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	2210      	movs	r2, #16
 8003e14:	4013      	ands	r3, r2
 8003e16:	2b10      	cmp	r3, #16
 8003e18:	d103      	bne.n	8003e22 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2210      	movs	r2, #16
 8003e20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	225c      	movs	r2, #92	; 0x5c
 8003e26:	5a9a      	ldrh	r2, [r3, r2]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	0011      	movs	r1, r2
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f7fe ffb1 	bl	8002d94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e32:	e00c      	b.n	8003e4e <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	0018      	movs	r0, r3
 8003e38:	f7fc faee 	bl	8000418 <HAL_UART_RxCpltCallback>
}
 8003e3c:	e007      	b.n	8003e4e <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	699a      	ldr	r2, [r3, #24]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2108      	movs	r1, #8
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	619a      	str	r2, [r3, #24]
}
 8003e4e:	46c0      	nop			; (mov r8, r8)
 8003e50:	46bd      	mov	sp, r7
 8003e52:	b010      	add	sp, #64	; 0x40
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	46c0      	nop			; (mov r8, r8)
 8003e58:	fffffedf 	.word	0xfffffedf

08003e5c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b09c      	sub	sp, #112	; 0x70
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003e64:	236a      	movs	r3, #106	; 0x6a
 8003e66:	18fb      	adds	r3, r7, r3
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	2160      	movs	r1, #96	; 0x60
 8003e6c:	5a52      	ldrh	r2, [r2, r1]
 8003e6e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	228c      	movs	r2, #140	; 0x8c
 8003e8c:	589b      	ldr	r3, [r3, r2]
 8003e8e:	2b22      	cmp	r3, #34	; 0x22
 8003e90:	d000      	beq.n	8003e94 <UART_RxISR_8BIT_FIFOEN+0x38>
 8003e92:	e144      	b.n	800411e <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003e94:	235e      	movs	r3, #94	; 0x5e
 8003e96:	18fb      	adds	r3, r7, r3
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	2168      	movs	r1, #104	; 0x68
 8003e9c:	5a52      	ldrh	r2, [r2, r1]
 8003e9e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003ea0:	e0eb      	b.n	800407a <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ea8:	215c      	movs	r1, #92	; 0x5c
 8003eaa:	187b      	adds	r3, r7, r1
 8003eac:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003eae:	187b      	adds	r3, r7, r1
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	236a      	movs	r3, #106	; 0x6a
 8003eb6:	18fb      	adds	r3, r7, r3
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	b2d9      	uxtb	r1, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec0:	400a      	ands	r2, r1
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	225e      	movs	r2, #94	; 0x5e
 8003ed4:	5a9b      	ldrh	r3, [r3, r2]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b299      	uxth	r1, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	225e      	movs	r2, #94	; 0x5e
 8003ee0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eec:	2207      	movs	r2, #7
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d049      	beq.n	8003f86 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d010      	beq.n	8003f1c <UART_RxISR_8BIT_FIFOEN+0xc0>
 8003efa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003efc:	2380      	movs	r3, #128	; 0x80
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	4013      	ands	r3, r2
 8003f02:	d00b      	beq.n	8003f1c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2290      	movs	r2, #144	; 0x90
 8003f10:	589b      	ldr	r3, [r3, r2]
 8003f12:	2201      	movs	r2, #1
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2190      	movs	r1, #144	; 0x90
 8003f1a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1e:	2202      	movs	r2, #2
 8003f20:	4013      	ands	r3, r2
 8003f22:	d00f      	beq.n	8003f44 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8003f24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f26:	2201      	movs	r2, #1
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d00b      	beq.n	8003f44 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2202      	movs	r2, #2
 8003f32:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2290      	movs	r2, #144	; 0x90
 8003f38:	589b      	ldr	r3, [r3, r2]
 8003f3a:	2204      	movs	r2, #4
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2190      	movs	r1, #144	; 0x90
 8003f42:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f46:	2204      	movs	r2, #4
 8003f48:	4013      	ands	r3, r2
 8003f4a:	d00f      	beq.n	8003f6c <UART_RxISR_8BIT_FIFOEN+0x110>
 8003f4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f4e:	2201      	movs	r2, #1
 8003f50:	4013      	ands	r3, r2
 8003f52:	d00b      	beq.n	8003f6c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2204      	movs	r2, #4
 8003f5a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2290      	movs	r2, #144	; 0x90
 8003f60:	589b      	ldr	r3, [r3, r2]
 8003f62:	2202      	movs	r2, #2
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2190      	movs	r1, #144	; 0x90
 8003f6a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2290      	movs	r2, #144	; 0x90
 8003f70:	589b      	ldr	r3, [r3, r2]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d007      	beq.n	8003f86 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f7fe ff03 	bl	8002d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2290      	movs	r2, #144	; 0x90
 8003f82:	2100      	movs	r1, #0
 8003f84:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	225e      	movs	r2, #94	; 0x5e
 8003f8a:	5a9b      	ldrh	r3, [r3, r2]
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d173      	bne.n	800407a <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f92:	f3ef 8310 	mrs	r3, PRIMASK
 8003f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa2:	f383 8810 	msr	PRIMASK, r3
}
 8003fa6:	46c0      	nop			; (mov r8, r8)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4961      	ldr	r1, [pc, #388]	; (8004138 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8003fb4:	400a      	ands	r2, r1
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fba:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fbe:	f383 8810 	msr	PRIMASK, r3
}
 8003fc2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fc4:	f3ef 8310 	mrs	r3, PRIMASK
 8003fc8:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8003fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003fcc:	657b      	str	r3, [r7, #84]	; 0x54
 8003fce:	2301      	movs	r3, #1
 8003fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd4:	f383 8810 	msr	PRIMASK, r3
}
 8003fd8:	46c0      	nop			; (mov r8, r8)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4955      	ldr	r1, [pc, #340]	; (800413c <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8003fe6:	400a      	ands	r2, r1
 8003fe8:	609a      	str	r2, [r3, #8]
 8003fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fec:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ff0:	f383 8810 	msr	PRIMASK, r3
}
 8003ff4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	228c      	movs	r2, #140	; 0x8c
 8003ffa:	2120      	movs	r1, #32
 8003ffc:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800400e:	2b01      	cmp	r3, #1
 8004010:	d12f      	bne.n	8004072 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004018:	f3ef 8310 	mrs	r3, PRIMASK
 800401c:	623b      	str	r3, [r7, #32]
  return(result);
 800401e:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004020:	653b      	str	r3, [r7, #80]	; 0x50
 8004022:	2301      	movs	r3, #1
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	f383 8810 	msr	PRIMASK, r3
}
 800402c:	46c0      	nop			; (mov r8, r8)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2110      	movs	r1, #16
 800403a:	438a      	bics	r2, r1
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004040:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004044:	f383 8810 	msr	PRIMASK, r3
}
 8004048:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	2210      	movs	r2, #16
 8004052:	4013      	ands	r3, r2
 8004054:	2b10      	cmp	r3, #16
 8004056:	d103      	bne.n	8004060 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2210      	movs	r2, #16
 800405e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	225c      	movs	r2, #92	; 0x5c
 8004064:	5a9a      	ldrh	r2, [r3, r2]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	0011      	movs	r1, r2
 800406a:	0018      	movs	r0, r3
 800406c:	f7fe fe92 	bl	8002d94 <HAL_UARTEx_RxEventCallback>
 8004070:	e003      	b.n	800407a <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	0018      	movs	r0, r3
 8004076:	f7fc f9cf 	bl	8000418 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800407a:	235e      	movs	r3, #94	; 0x5e
 800407c:	18fb      	adds	r3, r7, r3
 800407e:	881b      	ldrh	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d004      	beq.n	800408e <UART_RxISR_8BIT_FIFOEN+0x232>
 8004084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004086:	2220      	movs	r2, #32
 8004088:	4013      	ands	r3, r2
 800408a:	d000      	beq.n	800408e <UART_RxISR_8BIT_FIFOEN+0x232>
 800408c:	e709      	b.n	8003ea2 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800408e:	204e      	movs	r0, #78	; 0x4e
 8004090:	183b      	adds	r3, r7, r0
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	215e      	movs	r1, #94	; 0x5e
 8004096:	5a52      	ldrh	r2, [r2, r1]
 8004098:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800409a:	0001      	movs	r1, r0
 800409c:	187b      	adds	r3, r7, r1
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d044      	beq.n	800412e <UART_RxISR_8BIT_FIFOEN+0x2d2>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2268      	movs	r2, #104	; 0x68
 80040a8:	5a9b      	ldrh	r3, [r3, r2]
 80040aa:	187a      	adds	r2, r7, r1
 80040ac:	8812      	ldrh	r2, [r2, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d23d      	bcs.n	800412e <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040b2:	f3ef 8310 	mrs	r3, PRIMASK
 80040b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80040b8:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80040ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80040bc:	2301      	movs	r3, #1
 80040be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f383 8810 	msr	PRIMASK, r3
}
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	491b      	ldr	r1, [pc, #108]	; (8004140 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 80040d4:	400a      	ands	r2, r1
 80040d6:	609a      	str	r2, [r3, #8]
 80040d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	f383 8810 	msr	PRIMASK, r3
}
 80040e2:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a17      	ldr	r2, [pc, #92]	; (8004144 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 80040e8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ea:	f3ef 8310 	mrs	r3, PRIMASK
 80040ee:	617b      	str	r3, [r7, #20]
  return(result);
 80040f0:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80040f2:	647b      	str	r3, [r7, #68]	; 0x44
 80040f4:	2301      	movs	r3, #1
 80040f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	f383 8810 	msr	PRIMASK, r3
}
 80040fe:	46c0      	nop			; (mov r8, r8)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2120      	movs	r1, #32
 800410c:	430a      	orrs	r2, r1
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004112:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	f383 8810 	msr	PRIMASK, r3
}
 800411a:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800411c:	e007      	b.n	800412e <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	699a      	ldr	r2, [r3, #24]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2108      	movs	r1, #8
 800412a:	430a      	orrs	r2, r1
 800412c:	619a      	str	r2, [r3, #24]
}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	46bd      	mov	sp, r7
 8004132:	b01c      	add	sp, #112	; 0x70
 8004134:	bd80      	pop	{r7, pc}
 8004136:	46c0      	nop			; (mov r8, r8)
 8004138:	fffffeff 	.word	0xfffffeff
 800413c:	effffffe 	.word	0xeffffffe
 8004140:	efffffff 	.word	0xefffffff
 8004144:	08003b75 	.word	0x08003b75

08004148 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b09e      	sub	sp, #120	; 0x78
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004150:	2372      	movs	r3, #114	; 0x72
 8004152:	18fb      	adds	r3, r7, r3
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	2160      	movs	r1, #96	; 0x60
 8004158:	5a52      	ldrh	r2, [r2, r1]
 800415a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	228c      	movs	r2, #140	; 0x8c
 8004178:	589b      	ldr	r3, [r3, r2]
 800417a:	2b22      	cmp	r3, #34	; 0x22
 800417c:	d000      	beq.n	8004180 <UART_RxISR_16BIT_FIFOEN+0x38>
 800417e:	e144      	b.n	800440a <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004180:	2366      	movs	r3, #102	; 0x66
 8004182:	18fb      	adds	r3, r7, r3
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	2168      	movs	r1, #104	; 0x68
 8004188:	5a52      	ldrh	r2, [r2, r1]
 800418a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800418c:	e0eb      	b.n	8004366 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004194:	2164      	movs	r1, #100	; 0x64
 8004196:	187b      	adds	r3, r7, r1
 8004198:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419e:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 80041a0:	187b      	adds	r3, r7, r1
 80041a2:	2272      	movs	r2, #114	; 0x72
 80041a4:	18ba      	adds	r2, r7, r2
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	8812      	ldrh	r2, [r2, #0]
 80041aa:	4013      	ands	r3, r2
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b6:	1c9a      	adds	r2, r3, #2
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	225e      	movs	r2, #94	; 0x5e
 80041c0:	5a9b      	ldrh	r3, [r3, r2]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b299      	uxth	r1, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	225e      	movs	r2, #94	; 0x5e
 80041cc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80041d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041d8:	2207      	movs	r2, #7
 80041da:	4013      	ands	r3, r2
 80041dc:	d049      	beq.n	8004272 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041e0:	2201      	movs	r2, #1
 80041e2:	4013      	ands	r3, r2
 80041e4:	d010      	beq.n	8004208 <UART_RxISR_16BIT_FIFOEN+0xc0>
 80041e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041e8:	2380      	movs	r3, #128	; 0x80
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	4013      	ands	r3, r2
 80041ee:	d00b      	beq.n	8004208 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2201      	movs	r2, #1
 80041f6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2290      	movs	r2, #144	; 0x90
 80041fc:	589b      	ldr	r3, [r3, r2]
 80041fe:	2201      	movs	r2, #1
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2190      	movs	r1, #144	; 0x90
 8004206:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004208:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800420a:	2202      	movs	r2, #2
 800420c:	4013      	ands	r3, r2
 800420e:	d00f      	beq.n	8004230 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8004210:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004212:	2201      	movs	r2, #1
 8004214:	4013      	ands	r3, r2
 8004216:	d00b      	beq.n	8004230 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2202      	movs	r2, #2
 800421e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2290      	movs	r2, #144	; 0x90
 8004224:	589b      	ldr	r3, [r3, r2]
 8004226:	2204      	movs	r2, #4
 8004228:	431a      	orrs	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2190      	movs	r1, #144	; 0x90
 800422e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004230:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004232:	2204      	movs	r2, #4
 8004234:	4013      	ands	r3, r2
 8004236:	d00f      	beq.n	8004258 <UART_RxISR_16BIT_FIFOEN+0x110>
 8004238:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800423a:	2201      	movs	r2, #1
 800423c:	4013      	ands	r3, r2
 800423e:	d00b      	beq.n	8004258 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2204      	movs	r2, #4
 8004246:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2290      	movs	r2, #144	; 0x90
 800424c:	589b      	ldr	r3, [r3, r2]
 800424e:	2202      	movs	r2, #2
 8004250:	431a      	orrs	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2190      	movs	r1, #144	; 0x90
 8004256:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2290      	movs	r2, #144	; 0x90
 800425c:	589b      	ldr	r3, [r3, r2]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d007      	beq.n	8004272 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	0018      	movs	r0, r3
 8004266:	f7fe fd8d 	bl	8002d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2290      	movs	r2, #144	; 0x90
 800426e:	2100      	movs	r1, #0
 8004270:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	225e      	movs	r2, #94	; 0x5e
 8004276:	5a9b      	ldrh	r3, [r3, r2]
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d173      	bne.n	8004366 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800427e:	f3ef 8310 	mrs	r3, PRIMASK
 8004282:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004286:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004288:	2301      	movs	r3, #1
 800428a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800428c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428e:	f383 8810 	msr	PRIMASK, r3
}
 8004292:	46c0      	nop			; (mov r8, r8)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4961      	ldr	r1, [pc, #388]	; (8004424 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 80042a0:	400a      	ands	r2, r1
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042a6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042aa:	f383 8810 	msr	PRIMASK, r3
}
 80042ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042b0:	f3ef 8310 	mrs	r3, PRIMASK
 80042b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80042b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80042ba:	2301      	movs	r3, #1
 80042bc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042c0:	f383 8810 	msr	PRIMASK, r3
}
 80042c4:	46c0      	nop			; (mov r8, r8)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4955      	ldr	r1, [pc, #340]	; (8004428 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80042d2:	400a      	ands	r2, r1
 80042d4:	609a      	str	r2, [r3, #8]
 80042d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042d8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042dc:	f383 8810 	msr	PRIMASK, r3
}
 80042e0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	228c      	movs	r2, #140	; 0x8c
 80042e6:	2120      	movs	r1, #32
 80042e8:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d12f      	bne.n	800435e <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004304:	f3ef 8310 	mrs	r3, PRIMASK
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800430c:	657b      	str	r3, [r7, #84]	; 0x54
 800430e:	2301      	movs	r3, #1
 8004310:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004314:	f383 8810 	msr	PRIMASK, r3
}
 8004318:	46c0      	nop			; (mov r8, r8)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2110      	movs	r1, #16
 8004326:	438a      	bics	r2, r1
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800432c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004330:	f383 8810 	msr	PRIMASK, r3
}
 8004334:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	2210      	movs	r2, #16
 800433e:	4013      	ands	r3, r2
 8004340:	2b10      	cmp	r3, #16
 8004342:	d103      	bne.n	800434c <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2210      	movs	r2, #16
 800434a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	225c      	movs	r2, #92	; 0x5c
 8004350:	5a9a      	ldrh	r2, [r3, r2]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	0011      	movs	r1, r2
 8004356:	0018      	movs	r0, r3
 8004358:	f7fe fd1c 	bl	8002d94 <HAL_UARTEx_RxEventCallback>
 800435c:	e003      	b.n	8004366 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	0018      	movs	r0, r3
 8004362:	f7fc f859 	bl	8000418 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004366:	2366      	movs	r3, #102	; 0x66
 8004368:	18fb      	adds	r3, r7, r3
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d004      	beq.n	800437a <UART_RxISR_16BIT_FIFOEN+0x232>
 8004370:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004372:	2220      	movs	r2, #32
 8004374:	4013      	ands	r3, r2
 8004376:	d000      	beq.n	800437a <UART_RxISR_16BIT_FIFOEN+0x232>
 8004378:	e709      	b.n	800418e <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800437a:	2052      	movs	r0, #82	; 0x52
 800437c:	183b      	adds	r3, r7, r0
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	215e      	movs	r1, #94	; 0x5e
 8004382:	5a52      	ldrh	r2, [r2, r1]
 8004384:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004386:	0001      	movs	r1, r0
 8004388:	187b      	adds	r3, r7, r1
 800438a:	881b      	ldrh	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d044      	beq.n	800441a <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2268      	movs	r2, #104	; 0x68
 8004394:	5a9b      	ldrh	r3, [r3, r2]
 8004396:	187a      	adds	r2, r7, r1
 8004398:	8812      	ldrh	r2, [r2, #0]
 800439a:	429a      	cmp	r2, r3
 800439c:	d23d      	bcs.n	800441a <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800439e:	f3ef 8310 	mrs	r3, PRIMASK
 80043a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80043a4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80043a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043a8:	2301      	movs	r3, #1
 80043aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f383 8810 	msr	PRIMASK, r3
}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	491b      	ldr	r1, [pc, #108]	; (800442c <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 80043c0:	400a      	ands	r2, r1
 80043c2:	609a      	str	r2, [r3, #8]
 80043c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	f383 8810 	msr	PRIMASK, r3
}
 80043ce:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a17      	ldr	r2, [pc, #92]	; (8004430 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 80043d4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043d6:	f3ef 8310 	mrs	r3, PRIMASK
 80043da:	61bb      	str	r3, [r7, #24]
  return(result);
 80043dc:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80043de:	64bb      	str	r3, [r7, #72]	; 0x48
 80043e0:	2301      	movs	r3, #1
 80043e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	f383 8810 	msr	PRIMASK, r3
}
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2120      	movs	r1, #32
 80043f8:	430a      	orrs	r2, r1
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	f383 8810 	msr	PRIMASK, r3
}
 8004406:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004408:	e007      	b.n	800441a <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	699a      	ldr	r2, [r3, #24]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2108      	movs	r1, #8
 8004416:	430a      	orrs	r2, r1
 8004418:	619a      	str	r2, [r3, #24]
}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	46bd      	mov	sp, r7
 800441e:	b01e      	add	sp, #120	; 0x78
 8004420:	bd80      	pop	{r7, pc}
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	fffffeff 	.word	0xfffffeff
 8004428:	effffffe 	.word	0xeffffffe
 800442c:	efffffff 	.word	0xefffffff
 8004430:	08003ce9 	.word	0x08003ce9

08004434 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800443c:	46c0      	nop			; (mov r8, r8)
 800443e:	46bd      	mov	sp, r7
 8004440:	b002      	add	sp, #8
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800444c:	46c0      	nop			; (mov r8, r8)
 800444e:	46bd      	mov	sp, r7
 8004450:	b002      	add	sp, #8
 8004452:	bd80      	pop	{r7, pc}

08004454 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800445c:	46c0      	nop			; (mov r8, r8)
 800445e:	46bd      	mov	sp, r7
 8004460:	b002      	add	sp, #8
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2284      	movs	r2, #132	; 0x84
 8004470:	5c9b      	ldrb	r3, [r3, r2]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_UARTEx_DisableFifoMode+0x16>
 8004476:	2302      	movs	r3, #2
 8004478:	e027      	b.n	80044ca <HAL_UARTEx_DisableFifoMode+0x66>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2284      	movs	r2, #132	; 0x84
 800447e:	2101      	movs	r1, #1
 8004480:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2288      	movs	r2, #136	; 0x88
 8004486:	2124      	movs	r1, #36	; 0x24
 8004488:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2101      	movs	r1, #1
 800449e:	438a      	bics	r2, r1
 80044a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4a0b      	ldr	r2, [pc, #44]	; (80044d4 <HAL_UARTEx_DisableFifoMode+0x70>)
 80044a6:	4013      	ands	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2288      	movs	r2, #136	; 0x88
 80044bc:	2120      	movs	r1, #32
 80044be:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2284      	movs	r2, #132	; 0x84
 80044c4:	2100      	movs	r1, #0
 80044c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	0018      	movs	r0, r3
 80044cc:	46bd      	mov	sp, r7
 80044ce:	b004      	add	sp, #16
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	46c0      	nop			; (mov r8, r8)
 80044d4:	dfffffff 	.word	0xdfffffff

080044d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2284      	movs	r2, #132	; 0x84
 80044e6:	5c9b      	ldrb	r3, [r3, r2]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d101      	bne.n	80044f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80044ec:	2302      	movs	r3, #2
 80044ee:	e02e      	b.n	800454e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2284      	movs	r2, #132	; 0x84
 80044f4:	2101      	movs	r1, #1
 80044f6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2288      	movs	r2, #136	; 0x88
 80044fc:	2124      	movs	r1, #36	; 0x24
 80044fe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2101      	movs	r1, #1
 8004514:	438a      	bics	r2, r1
 8004516:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	08d9      	lsrs	r1, r3, #3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	0018      	movs	r0, r3
 8004530:	f000 f854 	bl	80045dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2288      	movs	r2, #136	; 0x88
 8004540:	2120      	movs	r1, #32
 8004542:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2284      	movs	r2, #132	; 0x84
 8004548:	2100      	movs	r1, #0
 800454a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	0018      	movs	r0, r3
 8004550:	46bd      	mov	sp, r7
 8004552:	b004      	add	sp, #16
 8004554:	bd80      	pop	{r7, pc}
	...

08004558 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2284      	movs	r2, #132	; 0x84
 8004566:	5c9b      	ldrb	r3, [r3, r2]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800456c:	2302      	movs	r3, #2
 800456e:	e02f      	b.n	80045d0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2284      	movs	r2, #132	; 0x84
 8004574:	2101      	movs	r1, #1
 8004576:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2288      	movs	r2, #136	; 0x88
 800457c:	2124      	movs	r1, #36	; 0x24
 800457e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2101      	movs	r1, #1
 8004594:	438a      	bics	r2, r1
 8004596:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	4a0e      	ldr	r2, [pc, #56]	; (80045d8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80045a0:	4013      	ands	r3, r2
 80045a2:	0019      	movs	r1, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	0018      	movs	r0, r3
 80045b2:	f000 f813 	bl	80045dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2288      	movs	r2, #136	; 0x88
 80045c2:	2120      	movs	r1, #32
 80045c4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2284      	movs	r2, #132	; 0x84
 80045ca:	2100      	movs	r1, #0
 80045cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	0018      	movs	r0, r3
 80045d2:	46bd      	mov	sp, r7
 80045d4:	b004      	add	sp, #16
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	f1ffffff 	.word	0xf1ffffff

080045dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80045dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d108      	bne.n	80045fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	226a      	movs	r2, #106	; 0x6a
 80045f0:	2101      	movs	r1, #1
 80045f2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2268      	movs	r2, #104	; 0x68
 80045f8:	2101      	movs	r1, #1
 80045fa:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80045fc:	e043      	b.n	8004686 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80045fe:	260f      	movs	r6, #15
 8004600:	19bb      	adds	r3, r7, r6
 8004602:	2208      	movs	r2, #8
 8004604:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004606:	200e      	movs	r0, #14
 8004608:	183b      	adds	r3, r7, r0
 800460a:	2208      	movs	r2, #8
 800460c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	0e5b      	lsrs	r3, r3, #25
 8004616:	b2da      	uxtb	r2, r3
 8004618:	240d      	movs	r4, #13
 800461a:	193b      	adds	r3, r7, r4
 800461c:	2107      	movs	r1, #7
 800461e:	400a      	ands	r2, r1
 8004620:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	0f5b      	lsrs	r3, r3, #29
 800462a:	b2da      	uxtb	r2, r3
 800462c:	250c      	movs	r5, #12
 800462e:	197b      	adds	r3, r7, r5
 8004630:	2107      	movs	r1, #7
 8004632:	400a      	ands	r2, r1
 8004634:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004636:	183b      	adds	r3, r7, r0
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	197a      	adds	r2, r7, r5
 800463c:	7812      	ldrb	r2, [r2, #0]
 800463e:	4914      	ldr	r1, [pc, #80]	; (8004690 <UARTEx_SetNbDataToProcess+0xb4>)
 8004640:	5c8a      	ldrb	r2, [r1, r2]
 8004642:	435a      	muls	r2, r3
 8004644:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004646:	197b      	adds	r3, r7, r5
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	4a12      	ldr	r2, [pc, #72]	; (8004694 <UARTEx_SetNbDataToProcess+0xb8>)
 800464c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800464e:	0019      	movs	r1, r3
 8004650:	f7fb fde8 	bl	8000224 <__divsi3>
 8004654:	0003      	movs	r3, r0
 8004656:	b299      	uxth	r1, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	226a      	movs	r2, #106	; 0x6a
 800465c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800465e:	19bb      	adds	r3, r7, r6
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	193a      	adds	r2, r7, r4
 8004664:	7812      	ldrb	r2, [r2, #0]
 8004666:	490a      	ldr	r1, [pc, #40]	; (8004690 <UARTEx_SetNbDataToProcess+0xb4>)
 8004668:	5c8a      	ldrb	r2, [r1, r2]
 800466a:	435a      	muls	r2, r3
 800466c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800466e:	193b      	adds	r3, r7, r4
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	4a08      	ldr	r2, [pc, #32]	; (8004694 <UARTEx_SetNbDataToProcess+0xb8>)
 8004674:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004676:	0019      	movs	r1, r3
 8004678:	f7fb fdd4 	bl	8000224 <__divsi3>
 800467c:	0003      	movs	r3, r0
 800467e:	b299      	uxth	r1, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2268      	movs	r2, #104	; 0x68
 8004684:	5299      	strh	r1, [r3, r2]
}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	46bd      	mov	sp, r7
 800468a:	b005      	add	sp, #20
 800468c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800468e:	46c0      	nop			; (mov r8, r8)
 8004690:	080048e8 	.word	0x080048e8
 8004694:	080048f0 	.word	0x080048f0

08004698 <atoi>:
 8004698:	b510      	push	{r4, lr}
 800469a:	220a      	movs	r2, #10
 800469c:	2100      	movs	r1, #0
 800469e:	f000 f8cf 	bl	8004840 <strtol>
 80046a2:	bd10      	pop	{r4, pc}

080046a4 <__errno>:
 80046a4:	4b01      	ldr	r3, [pc, #4]	; (80046ac <__errno+0x8>)
 80046a6:	6818      	ldr	r0, [r3, #0]
 80046a8:	4770      	bx	lr
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	200000dc 	.word	0x200000dc

080046b0 <__libc_init_array>:
 80046b0:	b570      	push	{r4, r5, r6, lr}
 80046b2:	2600      	movs	r6, #0
 80046b4:	4d0c      	ldr	r5, [pc, #48]	; (80046e8 <__libc_init_array+0x38>)
 80046b6:	4c0d      	ldr	r4, [pc, #52]	; (80046ec <__libc_init_array+0x3c>)
 80046b8:	1b64      	subs	r4, r4, r5
 80046ba:	10a4      	asrs	r4, r4, #2
 80046bc:	42a6      	cmp	r6, r4
 80046be:	d109      	bne.n	80046d4 <__libc_init_array+0x24>
 80046c0:	2600      	movs	r6, #0
 80046c2:	f000 f8c9 	bl	8004858 <_init>
 80046c6:	4d0a      	ldr	r5, [pc, #40]	; (80046f0 <__libc_init_array+0x40>)
 80046c8:	4c0a      	ldr	r4, [pc, #40]	; (80046f4 <__libc_init_array+0x44>)
 80046ca:	1b64      	subs	r4, r4, r5
 80046cc:	10a4      	asrs	r4, r4, #2
 80046ce:	42a6      	cmp	r6, r4
 80046d0:	d105      	bne.n	80046de <__libc_init_array+0x2e>
 80046d2:	bd70      	pop	{r4, r5, r6, pc}
 80046d4:	00b3      	lsls	r3, r6, #2
 80046d6:	58eb      	ldr	r3, [r5, r3]
 80046d8:	4798      	blx	r3
 80046da:	3601      	adds	r6, #1
 80046dc:	e7ee      	b.n	80046bc <__libc_init_array+0xc>
 80046de:	00b3      	lsls	r3, r6, #2
 80046e0:	58eb      	ldr	r3, [r5, r3]
 80046e2:	4798      	blx	r3
 80046e4:	3601      	adds	r6, #1
 80046e6:	e7f2      	b.n	80046ce <__libc_init_array+0x1e>
 80046e8:	080049fc 	.word	0x080049fc
 80046ec:	080049fc 	.word	0x080049fc
 80046f0:	080049fc 	.word	0x080049fc
 80046f4:	08004a00 	.word	0x08004a00

080046f8 <memset>:
 80046f8:	0003      	movs	r3, r0
 80046fa:	1882      	adds	r2, r0, r2
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d100      	bne.n	8004702 <memset+0xa>
 8004700:	4770      	bx	lr
 8004702:	7019      	strb	r1, [r3, #0]
 8004704:	3301      	adds	r3, #1
 8004706:	e7f9      	b.n	80046fc <memset+0x4>

08004708 <strcat>:
 8004708:	0002      	movs	r2, r0
 800470a:	b510      	push	{r4, lr}
 800470c:	7813      	ldrb	r3, [r2, #0]
 800470e:	0014      	movs	r4, r2
 8004710:	3201      	adds	r2, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1fa      	bne.n	800470c <strcat+0x4>
 8004716:	5cca      	ldrb	r2, [r1, r3]
 8004718:	54e2      	strb	r2, [r4, r3]
 800471a:	3301      	adds	r3, #1
 800471c:	2a00      	cmp	r2, #0
 800471e:	d1fa      	bne.n	8004716 <strcat+0xe>
 8004720:	bd10      	pop	{r4, pc}
	...

08004724 <_strtol_l.constprop.0>:
 8004724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004726:	b087      	sub	sp, #28
 8004728:	001e      	movs	r6, r3
 800472a:	9005      	str	r0, [sp, #20]
 800472c:	9101      	str	r1, [sp, #4]
 800472e:	9202      	str	r2, [sp, #8]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d045      	beq.n	80047c0 <_strtol_l.constprop.0+0x9c>
 8004734:	000b      	movs	r3, r1
 8004736:	2e24      	cmp	r6, #36	; 0x24
 8004738:	d842      	bhi.n	80047c0 <_strtol_l.constprop.0+0x9c>
 800473a:	4a3f      	ldr	r2, [pc, #252]	; (8004838 <_strtol_l.constprop.0+0x114>)
 800473c:	2108      	movs	r1, #8
 800473e:	4694      	mov	ip, r2
 8004740:	001a      	movs	r2, r3
 8004742:	4660      	mov	r0, ip
 8004744:	7814      	ldrb	r4, [r2, #0]
 8004746:	3301      	adds	r3, #1
 8004748:	5d00      	ldrb	r0, [r0, r4]
 800474a:	001d      	movs	r5, r3
 800474c:	0007      	movs	r7, r0
 800474e:	400f      	ands	r7, r1
 8004750:	4208      	tst	r0, r1
 8004752:	d1f5      	bne.n	8004740 <_strtol_l.constprop.0+0x1c>
 8004754:	2c2d      	cmp	r4, #45	; 0x2d
 8004756:	d13a      	bne.n	80047ce <_strtol_l.constprop.0+0xaa>
 8004758:	2701      	movs	r7, #1
 800475a:	781c      	ldrb	r4, [r3, #0]
 800475c:	1c95      	adds	r5, r2, #2
 800475e:	2e00      	cmp	r6, #0
 8004760:	d065      	beq.n	800482e <_strtol_l.constprop.0+0x10a>
 8004762:	2e10      	cmp	r6, #16
 8004764:	d109      	bne.n	800477a <_strtol_l.constprop.0+0x56>
 8004766:	2c30      	cmp	r4, #48	; 0x30
 8004768:	d107      	bne.n	800477a <_strtol_l.constprop.0+0x56>
 800476a:	2220      	movs	r2, #32
 800476c:	782b      	ldrb	r3, [r5, #0]
 800476e:	4393      	bics	r3, r2
 8004770:	2b58      	cmp	r3, #88	; 0x58
 8004772:	d157      	bne.n	8004824 <_strtol_l.constprop.0+0x100>
 8004774:	2610      	movs	r6, #16
 8004776:	786c      	ldrb	r4, [r5, #1]
 8004778:	3502      	adds	r5, #2
 800477a:	4b30      	ldr	r3, [pc, #192]	; (800483c <_strtol_l.constprop.0+0x118>)
 800477c:	0031      	movs	r1, r6
 800477e:	18fb      	adds	r3, r7, r3
 8004780:	0018      	movs	r0, r3
 8004782:	9303      	str	r3, [sp, #12]
 8004784:	f7fb fd4a 	bl	800021c <__aeabi_uidivmod>
 8004788:	2300      	movs	r3, #0
 800478a:	2201      	movs	r2, #1
 800478c:	4684      	mov	ip, r0
 800478e:	0018      	movs	r0, r3
 8004790:	9104      	str	r1, [sp, #16]
 8004792:	4252      	negs	r2, r2
 8004794:	0021      	movs	r1, r4
 8004796:	3930      	subs	r1, #48	; 0x30
 8004798:	2909      	cmp	r1, #9
 800479a:	d81d      	bhi.n	80047d8 <_strtol_l.constprop.0+0xb4>
 800479c:	000c      	movs	r4, r1
 800479e:	42a6      	cmp	r6, r4
 80047a0:	dd28      	ble.n	80047f4 <_strtol_l.constprop.0+0xd0>
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	db24      	blt.n	80047f0 <_strtol_l.constprop.0+0xcc>
 80047a6:	0013      	movs	r3, r2
 80047a8:	4584      	cmp	ip, r0
 80047aa:	d306      	bcc.n	80047ba <_strtol_l.constprop.0+0x96>
 80047ac:	d102      	bne.n	80047b4 <_strtol_l.constprop.0+0x90>
 80047ae:	9904      	ldr	r1, [sp, #16]
 80047b0:	42a1      	cmp	r1, r4
 80047b2:	db02      	blt.n	80047ba <_strtol_l.constprop.0+0x96>
 80047b4:	2301      	movs	r3, #1
 80047b6:	4370      	muls	r0, r6
 80047b8:	1820      	adds	r0, r4, r0
 80047ba:	782c      	ldrb	r4, [r5, #0]
 80047bc:	3501      	adds	r5, #1
 80047be:	e7e9      	b.n	8004794 <_strtol_l.constprop.0+0x70>
 80047c0:	f7ff ff70 	bl	80046a4 <__errno>
 80047c4:	2316      	movs	r3, #22
 80047c6:	6003      	str	r3, [r0, #0]
 80047c8:	2000      	movs	r0, #0
 80047ca:	b007      	add	sp, #28
 80047cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047ce:	2c2b      	cmp	r4, #43	; 0x2b
 80047d0:	d1c5      	bne.n	800475e <_strtol_l.constprop.0+0x3a>
 80047d2:	781c      	ldrb	r4, [r3, #0]
 80047d4:	1c95      	adds	r5, r2, #2
 80047d6:	e7c2      	b.n	800475e <_strtol_l.constprop.0+0x3a>
 80047d8:	0021      	movs	r1, r4
 80047da:	3941      	subs	r1, #65	; 0x41
 80047dc:	2919      	cmp	r1, #25
 80047de:	d801      	bhi.n	80047e4 <_strtol_l.constprop.0+0xc0>
 80047e0:	3c37      	subs	r4, #55	; 0x37
 80047e2:	e7dc      	b.n	800479e <_strtol_l.constprop.0+0x7a>
 80047e4:	0021      	movs	r1, r4
 80047e6:	3961      	subs	r1, #97	; 0x61
 80047e8:	2919      	cmp	r1, #25
 80047ea:	d803      	bhi.n	80047f4 <_strtol_l.constprop.0+0xd0>
 80047ec:	3c57      	subs	r4, #87	; 0x57
 80047ee:	e7d6      	b.n	800479e <_strtol_l.constprop.0+0x7a>
 80047f0:	0013      	movs	r3, r2
 80047f2:	e7e2      	b.n	80047ba <_strtol_l.constprop.0+0x96>
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	da09      	bge.n	800480c <_strtol_l.constprop.0+0xe8>
 80047f8:	2322      	movs	r3, #34	; 0x22
 80047fa:	9a05      	ldr	r2, [sp, #20]
 80047fc:	9803      	ldr	r0, [sp, #12]
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	9b02      	ldr	r3, [sp, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0e1      	beq.n	80047ca <_strtol_l.constprop.0+0xa6>
 8004806:	1e6b      	subs	r3, r5, #1
 8004808:	9301      	str	r3, [sp, #4]
 800480a:	e007      	b.n	800481c <_strtol_l.constprop.0+0xf8>
 800480c:	2f00      	cmp	r7, #0
 800480e:	d000      	beq.n	8004812 <_strtol_l.constprop.0+0xee>
 8004810:	4240      	negs	r0, r0
 8004812:	9a02      	ldr	r2, [sp, #8]
 8004814:	2a00      	cmp	r2, #0
 8004816:	d0d8      	beq.n	80047ca <_strtol_l.constprop.0+0xa6>
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1f4      	bne.n	8004806 <_strtol_l.constprop.0+0xe2>
 800481c:	9b02      	ldr	r3, [sp, #8]
 800481e:	9a01      	ldr	r2, [sp, #4]
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	e7d2      	b.n	80047ca <_strtol_l.constprop.0+0xa6>
 8004824:	2430      	movs	r4, #48	; 0x30
 8004826:	2e00      	cmp	r6, #0
 8004828:	d1a7      	bne.n	800477a <_strtol_l.constprop.0+0x56>
 800482a:	3608      	adds	r6, #8
 800482c:	e7a5      	b.n	800477a <_strtol_l.constprop.0+0x56>
 800482e:	2c30      	cmp	r4, #48	; 0x30
 8004830:	d09b      	beq.n	800476a <_strtol_l.constprop.0+0x46>
 8004832:	260a      	movs	r6, #10
 8004834:	e7a1      	b.n	800477a <_strtol_l.constprop.0+0x56>
 8004836:	46c0      	nop			; (mov r8, r8)
 8004838:	080048f9 	.word	0x080048f9
 800483c:	7fffffff 	.word	0x7fffffff

08004840 <strtol>:
 8004840:	b510      	push	{r4, lr}
 8004842:	0013      	movs	r3, r2
 8004844:	000a      	movs	r2, r1
 8004846:	0001      	movs	r1, r0
 8004848:	4802      	ldr	r0, [pc, #8]	; (8004854 <strtol+0x14>)
 800484a:	6800      	ldr	r0, [r0, #0]
 800484c:	f7ff ff6a 	bl	8004724 <_strtol_l.constprop.0>
 8004850:	bd10      	pop	{r4, pc}
 8004852:	46c0      	nop			; (mov r8, r8)
 8004854:	200000dc 	.word	0x200000dc

08004858 <_init>:
 8004858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485a:	46c0      	nop			; (mov r8, r8)
 800485c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485e:	bc08      	pop	{r3}
 8004860:	469e      	mov	lr, r3
 8004862:	4770      	bx	lr

08004864 <_fini>:
 8004864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004866:	46c0      	nop			; (mov r8, r8)
 8004868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800486a:	bc08      	pop	{r3}
 800486c:	469e      	mov	lr, r3
 800486e:	4770      	bx	lr
