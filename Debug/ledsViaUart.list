
ledsViaUart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004254  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800430c  0800430c  0001430c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004394  08004394  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  08004394  08004394  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004394  08004394  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004394  08004394  00014394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004398  08004398  00014398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800439c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  200000ac  08004448  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08004448  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001210e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027bf  00000000  00000000  000321e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  000349a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  000357e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a74  00000000  00000000  00036520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f5a  00000000  00000000  0004cf94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d474  00000000  00000000  0005feee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed362  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000325c  00000000  00000000  000ed3b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200000ac 	.word	0x200000ac
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080042f4 	.word	0x080042f4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200000b0 	.word	0x200000b0
 80000fc:	080042f4 	.word	0x080042f4

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__udivsi3>:
 8000110:	2200      	movs	r2, #0
 8000112:	0843      	lsrs	r3, r0, #1
 8000114:	428b      	cmp	r3, r1
 8000116:	d374      	bcc.n	8000202 <__udivsi3+0xf2>
 8000118:	0903      	lsrs	r3, r0, #4
 800011a:	428b      	cmp	r3, r1
 800011c:	d35f      	bcc.n	80001de <__udivsi3+0xce>
 800011e:	0a03      	lsrs	r3, r0, #8
 8000120:	428b      	cmp	r3, r1
 8000122:	d344      	bcc.n	80001ae <__udivsi3+0x9e>
 8000124:	0b03      	lsrs	r3, r0, #12
 8000126:	428b      	cmp	r3, r1
 8000128:	d328      	bcc.n	800017c <__udivsi3+0x6c>
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d30d      	bcc.n	800014c <__udivsi3+0x3c>
 8000130:	22ff      	movs	r2, #255	; 0xff
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	ba12      	rev	r2, r2
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d302      	bcc.n	8000142 <__udivsi3+0x32>
 800013c:	1212      	asrs	r2, r2, #8
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	d065      	beq.n	800020e <__udivsi3+0xfe>
 8000142:	0b03      	lsrs	r3, r0, #12
 8000144:	428b      	cmp	r3, r1
 8000146:	d319      	bcc.n	800017c <__udivsi3+0x6c>
 8000148:	e000      	b.n	800014c <__udivsi3+0x3c>
 800014a:	0a09      	lsrs	r1, r1, #8
 800014c:	0bc3      	lsrs	r3, r0, #15
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x46>
 8000152:	03cb      	lsls	r3, r1, #15
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b83      	lsrs	r3, r0, #14
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x52>
 800015e:	038b      	lsls	r3, r1, #14
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b43      	lsrs	r3, r0, #13
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x5e>
 800016a:	034b      	lsls	r3, r1, #13
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b03      	lsrs	r3, r0, #12
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x6a>
 8000176:	030b      	lsls	r3, r1, #12
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0ac3      	lsrs	r3, r0, #11
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x76>
 8000182:	02cb      	lsls	r3, r1, #11
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a83      	lsrs	r3, r0, #10
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x82>
 800018e:	028b      	lsls	r3, r1, #10
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a43      	lsrs	r3, r0, #9
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x8e>
 800019a:	024b      	lsls	r3, r1, #9
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a03      	lsrs	r3, r0, #8
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x9a>
 80001a6:	020b      	lsls	r3, r1, #8
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	d2cd      	bcs.n	800014a <__udivsi3+0x3a>
 80001ae:	09c3      	lsrs	r3, r0, #7
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xa8>
 80001b4:	01cb      	lsls	r3, r1, #7
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0983      	lsrs	r3, r0, #6
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xb4>
 80001c0:	018b      	lsls	r3, r1, #6
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0943      	lsrs	r3, r0, #5
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xc0>
 80001cc:	014b      	lsls	r3, r1, #5
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0903      	lsrs	r3, r0, #4
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xcc>
 80001d8:	010b      	lsls	r3, r1, #4
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	08c3      	lsrs	r3, r0, #3
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xd8>
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0883      	lsrs	r3, r0, #2
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xe4>
 80001f0:	008b      	lsls	r3, r1, #2
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0843      	lsrs	r3, r0, #1
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xf0>
 80001fc:	004b      	lsls	r3, r1, #1
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	d200      	bcs.n	8000208 <__udivsi3+0xf8>
 8000206:	4601      	mov	r1, r0
 8000208:	4152      	adcs	r2, r2
 800020a:	4610      	mov	r0, r2
 800020c:	4770      	bx	lr
 800020e:	e7ff      	b.n	8000210 <__udivsi3+0x100>
 8000210:	b501      	push	{r0, lr}
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f8f0 	bl	80003f8 <__aeabi_idiv0>
 8000218:	bd02      	pop	{r1, pc}
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_uidivmod>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d0f7      	beq.n	8000210 <__udivsi3+0x100>
 8000220:	e776      	b.n	8000110 <__udivsi3>
 8000222:	4770      	bx	lr

08000224 <__divsi3>:
 8000224:	4603      	mov	r3, r0
 8000226:	430b      	orrs	r3, r1
 8000228:	d47f      	bmi.n	800032a <__divsi3+0x106>
 800022a:	2200      	movs	r2, #0
 800022c:	0843      	lsrs	r3, r0, #1
 800022e:	428b      	cmp	r3, r1
 8000230:	d374      	bcc.n	800031c <__divsi3+0xf8>
 8000232:	0903      	lsrs	r3, r0, #4
 8000234:	428b      	cmp	r3, r1
 8000236:	d35f      	bcc.n	80002f8 <__divsi3+0xd4>
 8000238:	0a03      	lsrs	r3, r0, #8
 800023a:	428b      	cmp	r3, r1
 800023c:	d344      	bcc.n	80002c8 <__divsi3+0xa4>
 800023e:	0b03      	lsrs	r3, r0, #12
 8000240:	428b      	cmp	r3, r1
 8000242:	d328      	bcc.n	8000296 <__divsi3+0x72>
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d30d      	bcc.n	8000266 <__divsi3+0x42>
 800024a:	22ff      	movs	r2, #255	; 0xff
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	ba12      	rev	r2, r2
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d302      	bcc.n	800025c <__divsi3+0x38>
 8000256:	1212      	asrs	r2, r2, #8
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	d065      	beq.n	8000328 <__divsi3+0x104>
 800025c:	0b03      	lsrs	r3, r0, #12
 800025e:	428b      	cmp	r3, r1
 8000260:	d319      	bcc.n	8000296 <__divsi3+0x72>
 8000262:	e000      	b.n	8000266 <__divsi3+0x42>
 8000264:	0a09      	lsrs	r1, r1, #8
 8000266:	0bc3      	lsrs	r3, r0, #15
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x4c>
 800026c:	03cb      	lsls	r3, r1, #15
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b83      	lsrs	r3, r0, #14
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x58>
 8000278:	038b      	lsls	r3, r1, #14
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b43      	lsrs	r3, r0, #13
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x64>
 8000284:	034b      	lsls	r3, r1, #13
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b03      	lsrs	r3, r0, #12
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x70>
 8000290:	030b      	lsls	r3, r1, #12
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0ac3      	lsrs	r3, r0, #11
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x7c>
 800029c:	02cb      	lsls	r3, r1, #11
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a83      	lsrs	r3, r0, #10
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x88>
 80002a8:	028b      	lsls	r3, r1, #10
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a43      	lsrs	r3, r0, #9
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x94>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a03      	lsrs	r3, r0, #8
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0xa0>
 80002c0:	020b      	lsls	r3, r1, #8
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	d2cd      	bcs.n	8000264 <__divsi3+0x40>
 80002c8:	09c3      	lsrs	r3, r0, #7
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xae>
 80002ce:	01cb      	lsls	r3, r1, #7
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0983      	lsrs	r3, r0, #6
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xba>
 80002da:	018b      	lsls	r3, r1, #6
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0943      	lsrs	r3, r0, #5
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xc6>
 80002e6:	014b      	lsls	r3, r1, #5
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0903      	lsrs	r3, r0, #4
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xd2>
 80002f2:	010b      	lsls	r3, r1, #4
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	08c3      	lsrs	r3, r0, #3
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xde>
 80002fe:	00cb      	lsls	r3, r1, #3
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0883      	lsrs	r3, r0, #2
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xea>
 800030a:	008b      	lsls	r3, r1, #2
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0843      	lsrs	r3, r0, #1
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xf6>
 8000316:	004b      	lsls	r3, r1, #1
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	1a41      	subs	r1, r0, r1
 800031e:	d200      	bcs.n	8000322 <__divsi3+0xfe>
 8000320:	4601      	mov	r1, r0
 8000322:	4152      	adcs	r2, r2
 8000324:	4610      	mov	r0, r2
 8000326:	4770      	bx	lr
 8000328:	e05d      	b.n	80003e6 <__divsi3+0x1c2>
 800032a:	0fca      	lsrs	r2, r1, #31
 800032c:	d000      	beq.n	8000330 <__divsi3+0x10c>
 800032e:	4249      	negs	r1, r1
 8000330:	1003      	asrs	r3, r0, #32
 8000332:	d300      	bcc.n	8000336 <__divsi3+0x112>
 8000334:	4240      	negs	r0, r0
 8000336:	4053      	eors	r3, r2
 8000338:	2200      	movs	r2, #0
 800033a:	469c      	mov	ip, r3
 800033c:	0903      	lsrs	r3, r0, #4
 800033e:	428b      	cmp	r3, r1
 8000340:	d32d      	bcc.n	800039e <__divsi3+0x17a>
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d312      	bcc.n	800036e <__divsi3+0x14a>
 8000348:	22fc      	movs	r2, #252	; 0xfc
 800034a:	0189      	lsls	r1, r1, #6
 800034c:	ba12      	rev	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d30c      	bcc.n	800036e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d308      	bcc.n	800036e <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d304      	bcc.n	800036e <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	d03a      	beq.n	80003de <__divsi3+0x1ba>
 8000368:	1192      	asrs	r2, r2, #6
 800036a:	e000      	b.n	800036e <__divsi3+0x14a>
 800036c:	0989      	lsrs	r1, r1, #6
 800036e:	09c3      	lsrs	r3, r0, #7
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x154>
 8000374:	01cb      	lsls	r3, r1, #7
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0983      	lsrs	r3, r0, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x160>
 8000380:	018b      	lsls	r3, r1, #6
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0943      	lsrs	r3, r0, #5
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x16c>
 800038c:	014b      	lsls	r3, r1, #5
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0903      	lsrs	r3, r0, #4
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x178>
 8000398:	010b      	lsls	r3, r1, #4
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	08c3      	lsrs	r3, r0, #3
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x184>
 80003a4:	00cb      	lsls	r3, r1, #3
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0883      	lsrs	r3, r0, #2
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x190>
 80003b0:	008b      	lsls	r3, r1, #2
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	d2d9      	bcs.n	800036c <__divsi3+0x148>
 80003b8:	0843      	lsrs	r3, r0, #1
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d301      	bcc.n	80003c2 <__divsi3+0x19e>
 80003be:	004b      	lsls	r3, r1, #1
 80003c0:	1ac0      	subs	r0, r0, r3
 80003c2:	4152      	adcs	r2, r2
 80003c4:	1a41      	subs	r1, r0, r1
 80003c6:	d200      	bcs.n	80003ca <__divsi3+0x1a6>
 80003c8:	4601      	mov	r1, r0
 80003ca:	4663      	mov	r3, ip
 80003cc:	4152      	adcs	r2, r2
 80003ce:	105b      	asrs	r3, r3, #1
 80003d0:	4610      	mov	r0, r2
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x1b4>
 80003d4:	4240      	negs	r0, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d500      	bpl.n	80003dc <__divsi3+0x1b8>
 80003da:	4249      	negs	r1, r1
 80003dc:	4770      	bx	lr
 80003de:	4663      	mov	r3, ip
 80003e0:	105b      	asrs	r3, r3, #1
 80003e2:	d300      	bcc.n	80003e6 <__divsi3+0x1c2>
 80003e4:	4240      	negs	r0, r0
 80003e6:	b501      	push	{r0, lr}
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 f805 	bl	80003f8 <__aeabi_idiv0>
 80003ee:	bd02      	pop	{r1, pc}

080003f0 <__aeabi_idivmod>:
 80003f0:	2900      	cmp	r1, #0
 80003f2:	d0f8      	beq.n	80003e6 <__divsi3+0x1c2>
 80003f4:	e716      	b.n	8000224 <__divsi3>
 80003f6:	4770      	bx	lr

080003f8 <__aeabi_idiv0>:
 80003f8:	4770      	bx	lr
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <TimerBlinkIT>:
uint8_t OutOfRangeMes[50] = "OutOfRange";
uint8_t EndOfParsingMes[50] = "EndOfParsing";
uint8_t ParsingMes[50] = "Parsing";
int CurrentPeriod = 1000;

void TimerBlinkIT(){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_9);
 8000400:	2380      	movs	r3, #128	; 0x80
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	4a03      	ldr	r2, [pc, #12]	; (8000414 <TimerBlinkIT+0x18>)
 8000406:	0019      	movs	r1, r3
 8000408:	0010      	movs	r0, r2
 800040a:	f000 fe9a 	bl	8001142 <HAL_GPIO_TogglePin>
}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	50000c00 	.word	0x50000c00

08000418 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]

  if(huart == &huart2) {
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	4b2e      	ldr	r3, [pc, #184]	; (80004dc <HAL_UART_RxCpltCallback+0xc4>)
 8000424:	429a      	cmp	r2, r3
 8000426:	d154      	bne.n	80004d2 <HAL_UART_RxCpltCallback+0xba>
	  //HAL_UART_Transmit_IT(&huart2, buf, 1);
	  //HAL_UART_Transmit(&huart2, test, strlen((const char*)test), 100);
	  HAL_UART_Receive_IT(&huart2, RxBuf, 1);
 8000428:	492d      	ldr	r1, [pc, #180]	; (80004e0 <HAL_UART_RxCpltCallback+0xc8>)
 800042a:	4b2c      	ldr	r3, [pc, #176]	; (80004dc <HAL_UART_RxCpltCallback+0xc4>)
 800042c:	2201      	movs	r2, #1
 800042e:	0018      	movs	r0, r3
 8000430:	f002 f8cc 	bl	80025cc <HAL_UART_Receive_IT>
//		  HAL_FLASH_Program_IT(FLASH_CR_PG, 0x0801F800, 1);
//	  }else{
//		  HAL_UART_Transmit(&huart2, WrongSeqMes, strlen((const char*)WrongSeqMes), 100);
//	  }
	  //HAL_UART_Transmit(&huart2, ParsingMes, strlen((const char*)ParsingMes), 100);
	  if (ParsingSTATUS == WAITING){
 8000434:	4b2b      	ldr	r3, [pc, #172]	; (80004e4 <HAL_UART_RxCpltCallback+0xcc>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d112      	bne.n	8000462 <HAL_UART_RxCpltCallback+0x4a>
		  if(RxBuf[0] == FIRSTCHAR){
 800043c:	4b28      	ldr	r3, [pc, #160]	; (80004e0 <HAL_UART_RxCpltCallback+0xc8>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b3a      	cmp	r3, #58	; 0x3a
 8000442:	d146      	bne.n	80004d2 <HAL_UART_RxCpltCallback+0xba>
			  ParsingSTATUS = PARSING;
 8000444:	4b27      	ldr	r3, [pc, #156]	; (80004e4 <HAL_UART_RxCpltCallback+0xcc>)
 8000446:	2201      	movs	r2, #1
 8000448:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart2, ParsingMes, strlen((const char*)ParsingMes), 100);
 800044a:	4b27      	ldr	r3, [pc, #156]	; (80004e8 <HAL_UART_RxCpltCallback+0xd0>)
 800044c:	0018      	movs	r0, r3
 800044e:	f7ff fe57 	bl	8000100 <strlen>
 8000452:	0003      	movs	r3, r0
 8000454:	b29a      	uxth	r2, r3
 8000456:	4924      	ldr	r1, [pc, #144]	; (80004e8 <HAL_UART_RxCpltCallback+0xd0>)
 8000458:	4820      	ldr	r0, [pc, #128]	; (80004dc <HAL_UART_RxCpltCallback+0xc4>)
 800045a:	2364      	movs	r3, #100	; 0x64
 800045c:	f002 f81a 	bl	8002494 <HAL_UART_Transmit>
				  ParsingSTATUS = WAITING;
			  }
		  }
	  }
  }
}
 8000460:	e037      	b.n	80004d2 <HAL_UART_RxCpltCallback+0xba>
	  }else if(ParsingSTATUS == PARSING){
 8000462:	4b20      	ldr	r3, [pc, #128]	; (80004e4 <HAL_UART_RxCpltCallback+0xcc>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b01      	cmp	r3, #1
 8000468:	d133      	bne.n	80004d2 <HAL_UART_RxCpltCallback+0xba>
		  if(RxBuf[0] == LASTCHAR){
 800046a:	4b1d      	ldr	r3, [pc, #116]	; (80004e0 <HAL_UART_RxCpltCallback+0xc8>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2b3b      	cmp	r3, #59	; 0x3b
 8000470:	d10e      	bne.n	8000490 <HAL_UART_RxCpltCallback+0x78>
		  	  ParsingSTATUS = EndOfParsing;
 8000472:	4b1c      	ldr	r3, [pc, #112]	; (80004e4 <HAL_UART_RxCpltCallback+0xcc>)
 8000474:	2202      	movs	r2, #2
 8000476:	701a      	strb	r2, [r3, #0]
		  	  HAL_UART_Transmit(&huart2, EndOfParsingMes, strlen((const char*)EndOfParsingMes), 100);
 8000478:	4b1c      	ldr	r3, [pc, #112]	; (80004ec <HAL_UART_RxCpltCallback+0xd4>)
 800047a:	0018      	movs	r0, r3
 800047c:	f7ff fe40 	bl	8000100 <strlen>
 8000480:	0003      	movs	r3, r0
 8000482:	b29a      	uxth	r2, r3
 8000484:	4919      	ldr	r1, [pc, #100]	; (80004ec <HAL_UART_RxCpltCallback+0xd4>)
 8000486:	4815      	ldr	r0, [pc, #84]	; (80004dc <HAL_UART_RxCpltCallback+0xc4>)
 8000488:	2364      	movs	r3, #100	; 0x64
 800048a:	f002 f803 	bl	8002494 <HAL_UART_Transmit>
}
 800048e:	e020      	b.n	80004d2 <HAL_UART_RxCpltCallback+0xba>
			  if (LastCharCount < 100){
 8000490:	4b17      	ldr	r3, [pc, #92]	; (80004f0 <HAL_UART_RxCpltCallback+0xd8>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b63      	cmp	r3, #99	; 0x63
 8000496:	d80b      	bhi.n	80004b0 <HAL_UART_RxCpltCallback+0x98>
				  RxMessage[LastCharCount++] = RxBuf[0];
 8000498:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <HAL_UART_RxCpltCallback+0xd8>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	1c5a      	adds	r2, r3, #1
 800049e:	b2d1      	uxtb	r1, r2
 80004a0:	4a13      	ldr	r2, [pc, #76]	; (80004f0 <HAL_UART_RxCpltCallback+0xd8>)
 80004a2:	7011      	strb	r1, [r2, #0]
 80004a4:	001a      	movs	r2, r3
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <HAL_UART_RxCpltCallback+0xc8>)
 80004a8:	7819      	ldrb	r1, [r3, #0]
 80004aa:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <HAL_UART_RxCpltCallback+0xdc>)
 80004ac:	5499      	strb	r1, [r3, r2]
}
 80004ae:	e010      	b.n	80004d2 <HAL_UART_RxCpltCallback+0xba>
				  HAL_UART_Transmit(&huart2, OutOfRangeMes, strlen((const char*)OutOfRangeMes), 100);
 80004b0:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <HAL_UART_RxCpltCallback+0xe0>)
 80004b2:	0018      	movs	r0, r3
 80004b4:	f7ff fe24 	bl	8000100 <strlen>
 80004b8:	0003      	movs	r3, r0
 80004ba:	b29a      	uxth	r2, r3
 80004bc:	490e      	ldr	r1, [pc, #56]	; (80004f8 <HAL_UART_RxCpltCallback+0xe0>)
 80004be:	4807      	ldr	r0, [pc, #28]	; (80004dc <HAL_UART_RxCpltCallback+0xc4>)
 80004c0:	2364      	movs	r3, #100	; 0x64
 80004c2:	f001 ffe7 	bl	8002494 <HAL_UART_Transmit>
				  LastCharCount = 0;
 80004c6:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <HAL_UART_RxCpltCallback+0xd8>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	701a      	strb	r2, [r3, #0]
				  ParsingSTATUS = WAITING;
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <HAL_UART_RxCpltCallback+0xcc>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	701a      	strb	r2, [r3, #0]
}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	b002      	add	sp, #8
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	20000150 	.word	0x20000150
 80004e0:	200000cc 	.word	0x200000cc
 80004e4:	200000c8 	.word	0x200000c8
 80004e8:	20000068 	.word	0x20000068
 80004ec:	20000034 	.word	0x20000034
 80004f0:	200000c9 	.word	0x200000c9
 80004f4:	200000d0 	.word	0x200000d0
 80004f8:	20000000 	.word	0x20000000

080004fc <ChangeDelayBlinking>:


void ChangeDelayBlinking(){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	if (ParsingSTATUS == EndOfParsing){
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <ChangeDelayBlinking+0x20>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b02      	cmp	r3, #2
 8000506:	d106      	bne.n	8000516 <ChangeDelayBlinking+0x1a>
		 TIM6->ARR = CurrentPeriod;
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <ChangeDelayBlinking+0x24>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	4b05      	ldr	r3, [pc, #20]	; (8000524 <ChangeDelayBlinking+0x28>)
 800050e:	62da      	str	r2, [r3, #44]	; 0x2c
		 ParsingSTATUS = WAITING;
 8000510:	4b02      	ldr	r3, [pc, #8]	; (800051c <ChangeDelayBlinking+0x20>)
 8000512:	2200      	movs	r2, #0
 8000514:	701a      	strb	r2, [r3, #0]
	}
}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	200000c8 	.word	0x200000c8
 8000520:	2000009c 	.word	0x2000009c
 8000524:	40001000 	.word	0x40001000

08000528 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b089      	sub	sp, #36	; 0x24
 800052c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	240c      	movs	r4, #12
 8000530:	193b      	adds	r3, r7, r4
 8000532:	0018      	movs	r0, r3
 8000534:	2314      	movs	r3, #20
 8000536:	001a      	movs	r2, r3
 8000538:	2100      	movs	r1, #0
 800053a:	f003 fed3 	bl	80042e4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800053e:	4b21      	ldr	r3, [pc, #132]	; (80005c4 <MX_GPIO_Init+0x9c>)
 8000540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000542:	4b20      	ldr	r3, [pc, #128]	; (80005c4 <MX_GPIO_Init+0x9c>)
 8000544:	2120      	movs	r1, #32
 8000546:	430a      	orrs	r2, r1
 8000548:	635a      	str	r2, [r3, #52]	; 0x34
 800054a:	4b1e      	ldr	r3, [pc, #120]	; (80005c4 <MX_GPIO_Init+0x9c>)
 800054c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800054e:	2220      	movs	r2, #32
 8000550:	4013      	ands	r3, r2
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b1b      	ldr	r3, [pc, #108]	; (80005c4 <MX_GPIO_Init+0x9c>)
 8000558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800055a:	4b1a      	ldr	r3, [pc, #104]	; (80005c4 <MX_GPIO_Init+0x9c>)
 800055c:	2101      	movs	r1, #1
 800055e:	430a      	orrs	r2, r1
 8000560:	635a      	str	r2, [r3, #52]	; 0x34
 8000562:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <MX_GPIO_Init+0x9c>)
 8000564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000566:	2201      	movs	r2, #1
 8000568:	4013      	ands	r3, r2
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056e:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <MX_GPIO_Init+0x9c>)
 8000570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000572:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <MX_GPIO_Init+0x9c>)
 8000574:	2108      	movs	r1, #8
 8000576:	430a      	orrs	r2, r1
 8000578:	635a      	str	r2, [r3, #52]	; 0x34
 800057a:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <MX_GPIO_Init+0x9c>)
 800057c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800057e:	2208      	movs	r2, #8
 8000580:	4013      	ands	r3, r2
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8000586:	2380      	movs	r3, #128	; 0x80
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	480f      	ldr	r0, [pc, #60]	; (80005c8 <MX_GPIO_Init+0xa0>)
 800058c:	2200      	movs	r2, #0
 800058e:	0019      	movs	r1, r3
 8000590:	f000 fdba 	bl	8001108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000594:	193b      	adds	r3, r7, r4
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	0092      	lsls	r2, r2, #2
 800059a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059c:	193b      	adds	r3, r7, r4
 800059e:	2201      	movs	r2, #1
 80005a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	193b      	adds	r3, r7, r4
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a8:	193b      	adds	r3, r7, r4
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005ae:	193b      	adds	r3, r7, r4
 80005b0:	4a05      	ldr	r2, [pc, #20]	; (80005c8 <MX_GPIO_Init+0xa0>)
 80005b2:	0019      	movs	r1, r3
 80005b4:	0010      	movs	r0, r2
 80005b6:	f000 fc43 	bl	8000e40 <HAL_GPIO_Init>

}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	b009      	add	sp, #36	; 0x24
 80005c0:	bd90      	pop	{r4, r7, pc}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	40021000 	.word	0x40021000
 80005c8:	50000c00 	.word	0x50000c00

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f000 fa06 	bl	80009e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f814 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f7ff ffa6 	bl	8000528 <MX_GPIO_Init>
  MX_TIM6_Init();
 80005dc:	f000 f8ba 	bl	8000754 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80005e0:	f000 f91e 	bl	8000820 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, RxBuf, 1);
 80005e4:	4904      	ldr	r1, [pc, #16]	; (80005f8 <main+0x2c>)
 80005e6:	4b05      	ldr	r3, [pc, #20]	; (80005fc <main+0x30>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	0018      	movs	r0, r3
 80005ec:	f001 ffee 	bl	80025cc <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	ChangeDelayBlinking();
 80005f0:	f7ff ff84 	bl	80004fc <ChangeDelayBlinking>
  {
 80005f4:	e7fc      	b.n	80005f0 <main+0x24>
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	200000cc 	.word	0x200000cc
 80005fc:	20000150 	.word	0x20000150

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b590      	push	{r4, r7, lr}
 8000602:	b093      	sub	sp, #76	; 0x4c
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	2414      	movs	r4, #20
 8000608:	193b      	adds	r3, r7, r4
 800060a:	0018      	movs	r0, r3
 800060c:	2334      	movs	r3, #52	; 0x34
 800060e:	001a      	movs	r2, r3
 8000610:	2100      	movs	r1, #0
 8000612:	f003 fe67 	bl	80042e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	0018      	movs	r0, r3
 800061a:	2310      	movs	r3, #16
 800061c:	001a      	movs	r2, r3
 800061e:	2100      	movs	r1, #0
 8000620:	f003 fe60 	bl	80042e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	0018      	movs	r0, r3
 800062a:	f000 fda5 	bl	8001178 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062e:	193b      	adds	r3, r7, r4
 8000630:	2202      	movs	r2, #2
 8000632:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	193b      	adds	r3, r7, r4
 8000636:	2280      	movs	r2, #128	; 0x80
 8000638:	0052      	lsls	r2, r2, #1
 800063a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800063c:	193b      	adds	r3, r7, r4
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000642:	193b      	adds	r3, r7, r4
 8000644:	2240      	movs	r2, #64	; 0x40
 8000646:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000648:	193b      	adds	r3, r7, r4
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	193b      	adds	r3, r7, r4
 8000650:	0018      	movs	r0, r3
 8000652:	f000 fddd 	bl	8001210 <HAL_RCC_OscConfig>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800065a:	f000 f819 	bl	8000690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2207      	movs	r2, #7
 8000662:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2200      	movs	r2, #0
 8000668:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2100      	movs	r1, #0
 800067a:	0018      	movs	r0, r3
 800067c:	f001 f8d8 	bl	8001830 <HAL_RCC_ClockConfig>
 8000680:	1e03      	subs	r3, r0, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000684:	f000 f804 	bl	8000690 <Error_Handler>
  }
}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	b013      	add	sp, #76	; 0x4c
 800068e:	bd90      	pop	{r4, r7, pc}

08000690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000694:	b672      	cpsid	i
}
 8000696:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000698:	e7fe      	b.n	8000698 <Error_Handler+0x8>
	...

0800069c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <HAL_MspInit+0x44>)
 80006a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <HAL_MspInit+0x44>)
 80006a8:	2101      	movs	r1, #1
 80006aa:	430a      	orrs	r2, r1
 80006ac:	641a      	str	r2, [r3, #64]	; 0x40
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <HAL_MspInit+0x44>)
 80006b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b2:	2201      	movs	r2, #1
 80006b4:	4013      	ands	r3, r2
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <HAL_MspInit+0x44>)
 80006bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <HAL_MspInit+0x44>)
 80006c0:	2180      	movs	r1, #128	; 0x80
 80006c2:	0549      	lsls	r1, r1, #21
 80006c4:	430a      	orrs	r2, r1
 80006c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <HAL_MspInit+0x44>)
 80006ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006cc:	2380      	movs	r3, #128	; 0x80
 80006ce:	055b      	lsls	r3, r3, #21
 80006d0:	4013      	ands	r3, r2
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b002      	add	sp, #8
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	40021000 	.word	0x40021000

080006e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <NMI_Handler+0x4>

080006ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <HardFault_Handler+0x4>

080006f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006f4:	46c0      	nop			; (mov r8, r8)
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000708:	f000 f9d4 	bl	8000ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000718:	4b04      	ldr	r3, [pc, #16]	; (800072c <TIM6_IRQHandler+0x18>)
 800071a:	0018      	movs	r0, r3
 800071c:	f001 fc14 	bl	8001f48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */
  TimerBlinkIT();
 8000720:	f7ff fe6c 	bl	80003fc <TimerBlinkIT>

  /* USER CODE END TIM6_IRQn 1 */
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	20000104 	.word	0x20000104

08000730 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000734:	4b03      	ldr	r3, [pc, #12]	; (8000744 <USART2_IRQHandler+0x14>)
 8000736:	0018      	movs	r0, r3
 8000738:	f001 ffa0 	bl	800267c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	20000150 	.word	0x20000150

08000748 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	0018      	movs	r0, r3
 800075e:	230c      	movs	r3, #12
 8000760:	001a      	movs	r2, r3
 8000762:	2100      	movs	r1, #0
 8000764:	f003 fdbe 	bl	80042e4 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000768:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_TIM6_Init+0x74>)
 800076a:	4a18      	ldr	r2, [pc, #96]	; (80007cc <MX_TIM6_Init+0x78>)
 800076c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 12000;
 800076e:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <MX_TIM6_Init+0x74>)
 8000770:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <MX_TIM6_Init+0x7c>)
 8000772:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_TIM6_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <MX_TIM6_Init+0x74>)
 800077c:	22fa      	movs	r2, #250	; 0xfa
 800077e:	0092      	lsls	r2, r2, #2
 8000780:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_TIM6_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_TIM6_Init+0x74>)
 800078a:	0018      	movs	r0, r3
 800078c:	f001 fb2e 	bl	8001dec <HAL_TIM_Base_Init>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8000794:	f7ff ff7c 	bl	8000690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007a4:	1d3a      	adds	r2, r7, #4
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_TIM6_Init+0x74>)
 80007a8:	0011      	movs	r1, r2
 80007aa:	0018      	movs	r0, r3
 80007ac:	f001 fd9c 	bl	80022e8 <HAL_TIMEx_MasterConfigSynchronization>
 80007b0:	1e03      	subs	r3, r0, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 80007b4:	f7ff ff6c 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80007b8:	4b03      	ldr	r3, [pc, #12]	; (80007c8 <MX_TIM6_Init+0x74>)
 80007ba:	0018      	movs	r0, r3
 80007bc:	f001 fb6e 	bl	8001e9c <HAL_TIM_Base_Start_IT>

  /* USER CODE END TIM6_Init 2 */

}
 80007c0:	46c0      	nop			; (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b004      	add	sp, #16
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000104 	.word	0x20000104
 80007cc:	40001000 	.word	0x40001000
 80007d0:	00002ee0 	.word	0x00002ee0

080007d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a0d      	ldr	r2, [pc, #52]	; (8000818 <HAL_TIM_Base_MspInit+0x44>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d113      	bne.n	800080e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <HAL_TIM_Base_MspInit+0x48>)
 80007e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <HAL_TIM_Base_MspInit+0x48>)
 80007ec:	2110      	movs	r1, #16
 80007ee:	430a      	orrs	r2, r1
 80007f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <HAL_TIM_Base_MspInit+0x48>)
 80007f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007f6:	2210      	movs	r2, #16
 80007f8:	4013      	ands	r3, r2
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	2011      	movs	r0, #17
 8000804:	f000 fa1e 	bl	8000c44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000808:	2011      	movs	r0, #17
 800080a:	f000 fa30 	bl	8000c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	b004      	add	sp, #16
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	40001000 	.word	0x40001000
 800081c:	40021000 	.word	0x40021000

08000820 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000824:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 8000826:	4a24      	ldr	r2, [pc, #144]	; (80008b8 <MX_USART2_UART_Init+0x98>)
 8000828:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082a:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 800082c:	22e1      	movs	r2, #225	; 0xe1
 800082e:	0252      	lsls	r2, r2, #9
 8000830:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083e:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800085c:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 800085e:	2200      	movs	r2, #0
 8000860:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 8000864:	2200      	movs	r2, #0
 8000866:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 800086a:	0018      	movs	r0, r3
 800086c:	f001 fdbc 	bl	80023e8 <HAL_UART_Init>
 8000870:	1e03      	subs	r3, r0, #0
 8000872:	d001      	beq.n	8000878 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000874:	f7ff ff0c 	bl	8000690 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000878:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 800087a:	2100      	movs	r1, #0
 800087c:	0018      	movs	r0, r3
 800087e:	f003 fc2d 	bl	80040dc <HAL_UARTEx_SetTxFifoThreshold>
 8000882:	1e03      	subs	r3, r0, #0
 8000884:	d001      	beq.n	800088a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000886:	f7ff ff03 	bl	8000690 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800088a:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 800088c:	2100      	movs	r1, #0
 800088e:	0018      	movs	r0, r3
 8000890:	f003 fc64 	bl	800415c <HAL_UARTEx_SetRxFifoThreshold>
 8000894:	1e03      	subs	r3, r0, #0
 8000896:	d001      	beq.n	800089c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000898:	f7ff fefa 	bl	8000690 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 800089e:	0018      	movs	r0, r3
 80008a0:	f003 fbe2 	bl	8004068 <HAL_UARTEx_DisableFifoMode>
 80008a4:	1e03      	subs	r3, r0, #0
 80008a6:	d001      	beq.n	80008ac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008a8:	f7ff fef2 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	20000150 	.word	0x20000150
 80008b8:	40004400 	.word	0x40004400

080008bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b091      	sub	sp, #68	; 0x44
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	232c      	movs	r3, #44	; 0x2c
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	0018      	movs	r0, r3
 80008ca:	2314      	movs	r3, #20
 80008cc:	001a      	movs	r2, r3
 80008ce:	2100      	movs	r1, #0
 80008d0:	f003 fd08 	bl	80042e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d4:	2410      	movs	r4, #16
 80008d6:	193b      	adds	r3, r7, r4
 80008d8:	0018      	movs	r0, r3
 80008da:	231c      	movs	r3, #28
 80008dc:	001a      	movs	r2, r3
 80008de:	2100      	movs	r1, #0
 80008e0:	f003 fd00 	bl	80042e4 <memset>
  if(uartHandle->Instance==USART2)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a26      	ldr	r2, [pc, #152]	; (8000984 <HAL_UART_MspInit+0xc8>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d146      	bne.n	800097c <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	2202      	movs	r2, #2
 80008f2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	0018      	movs	r0, r3
 80008fe:	f001 f941 	bl	8001b84 <HAL_RCCEx_PeriphCLKConfig>
 8000902:	1e03      	subs	r3, r0, #0
 8000904:	d001      	beq.n	800090a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000906:	f7ff fec3 	bl	8000690 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800090a:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <HAL_UART_MspInit+0xcc>)
 800090c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800090e:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <HAL_UART_MspInit+0xcc>)
 8000910:	2180      	movs	r1, #128	; 0x80
 8000912:	0289      	lsls	r1, r1, #10
 8000914:	430a      	orrs	r2, r1
 8000916:	63da      	str	r2, [r3, #60]	; 0x3c
 8000918:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <HAL_UART_MspInit+0xcc>)
 800091a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	029b      	lsls	r3, r3, #10
 8000920:	4013      	ands	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b18      	ldr	r3, [pc, #96]	; (8000988 <HAL_UART_MspInit+0xcc>)
 8000928:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <HAL_UART_MspInit+0xcc>)
 800092c:	2101      	movs	r1, #1
 800092e:	430a      	orrs	r2, r1
 8000930:	635a      	str	r2, [r3, #52]	; 0x34
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <HAL_UART_MspInit+0xcc>)
 8000934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000936:	2201      	movs	r2, #1
 8000938:	4013      	ands	r3, r2
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800093e:	212c      	movs	r1, #44	; 0x2c
 8000940:	187b      	adds	r3, r7, r1
 8000942:	220c      	movs	r2, #12
 8000944:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2202      	movs	r2, #2
 800094a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2202      	movs	r2, #2
 8000956:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2201      	movs	r2, #1
 800095c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	187a      	adds	r2, r7, r1
 8000960:	23a0      	movs	r3, #160	; 0xa0
 8000962:	05db      	lsls	r3, r3, #23
 8000964:	0011      	movs	r1, r2
 8000966:	0018      	movs	r0, r3
 8000968:	f000 fa6a 	bl	8000e40 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2100      	movs	r1, #0
 8000970:	201c      	movs	r0, #28
 8000972:	f000 f967 	bl	8000c44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000976:	201c      	movs	r0, #28
 8000978:	f000 f979 	bl	8000c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	b011      	add	sp, #68	; 0x44
 8000982:	bd90      	pop	{r4, r7, pc}
 8000984:	40004400 	.word	0x40004400
 8000988:	40021000 	.word	0x40021000

0800098c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800098c:	480d      	ldr	r0, [pc, #52]	; (80009c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800098e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000990:	f7ff feda 	bl	8000748 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000994:	480c      	ldr	r0, [pc, #48]	; (80009c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000996:	490d      	ldr	r1, [pc, #52]	; (80009cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000998:	4a0d      	ldr	r2, [pc, #52]	; (80009d0 <LoopForever+0xe>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800099c:	e002      	b.n	80009a4 <LoopCopyDataInit>

0800099e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a2:	3304      	adds	r3, #4

080009a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a8:	d3f9      	bcc.n	800099e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009aa:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009ac:	4c0a      	ldr	r4, [pc, #40]	; (80009d8 <LoopForever+0x16>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b0:	e001      	b.n	80009b6 <LoopFillZerobss>

080009b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b4:	3204      	adds	r2, #4

080009b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b8:	d3fb      	bcc.n	80009b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009ba:	f003 fc6f 	bl	800429c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80009be:	f7ff fe05 	bl	80005cc <main>

080009c2 <LoopForever>:

LoopForever:
  b LoopForever
 80009c2:	e7fe      	b.n	80009c2 <LoopForever>
  ldr   r0, =_estack
 80009c4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80009c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009cc:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 80009d0:	0800439c 	.word	0x0800439c
  ldr r2, =_sbss
 80009d4:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 80009d8:	200001e8 	.word	0x200001e8

080009dc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009dc:	e7fe      	b.n	80009dc <ADC1_IRQHandler>
	...

080009e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <HAL_Init+0x3c>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <HAL_Init+0x3c>)
 80009f2:	2180      	movs	r1, #128	; 0x80
 80009f4:	0049      	lsls	r1, r1, #1
 80009f6:	430a      	orrs	r2, r1
 80009f8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009fa:	2003      	movs	r0, #3
 80009fc:	f000 f810 	bl	8000a20 <HAL_InitTick>
 8000a00:	1e03      	subs	r3, r0, #0
 8000a02:	d003      	beq.n	8000a0c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a04:	1dfb      	adds	r3, r7, #7
 8000a06:	2201      	movs	r2, #1
 8000a08:	701a      	strb	r2, [r3, #0]
 8000a0a:	e001      	b.n	8000a10 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a0c:	f7ff fe46 	bl	800069c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a10:	1dfb      	adds	r3, r7, #7
 8000a12:	781b      	ldrb	r3, [r3, #0]
}
 8000a14:	0018      	movs	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b002      	add	sp, #8
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40022000 	.word	0x40022000

08000a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a28:	230f      	movs	r3, #15
 8000a2a:	18fb      	adds	r3, r7, r3
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000a30:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <HAL_InitTick+0x88>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d02b      	beq.n	8000a90 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000a38:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <HAL_InitTick+0x8c>)
 8000a3a:	681c      	ldr	r4, [r3, #0]
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <HAL_InitTick+0x88>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	0019      	movs	r1, r3
 8000a42:	23fa      	movs	r3, #250	; 0xfa
 8000a44:	0098      	lsls	r0, r3, #2
 8000a46:	f7ff fb63 	bl	8000110 <__udivsi3>
 8000a4a:	0003      	movs	r3, r0
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	0020      	movs	r0, r4
 8000a50:	f7ff fb5e 	bl	8000110 <__udivsi3>
 8000a54:	0003      	movs	r3, r0
 8000a56:	0018      	movs	r0, r3
 8000a58:	f000 f919 	bl	8000c8e <HAL_SYSTICK_Config>
 8000a5c:	1e03      	subs	r3, r0, #0
 8000a5e:	d112      	bne.n	8000a86 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b03      	cmp	r3, #3
 8000a64:	d80a      	bhi.n	8000a7c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	2301      	movs	r3, #1
 8000a6a:	425b      	negs	r3, r3
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f000 f8e8 	bl	8000c44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <HAL_InitTick+0x90>)
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	e00d      	b.n	8000a98 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	18fb      	adds	r3, r7, r3
 8000a80:	2201      	movs	r2, #1
 8000a82:	701a      	strb	r2, [r3, #0]
 8000a84:	e008      	b.n	8000a98 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a86:	230f      	movs	r3, #15
 8000a88:	18fb      	adds	r3, r7, r3
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	701a      	strb	r2, [r3, #0]
 8000a8e:	e003      	b.n	8000a98 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a90:	230f      	movs	r3, #15
 8000a92:	18fb      	adds	r3, r7, r3
 8000a94:	2201      	movs	r2, #1
 8000a96:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000a98:	230f      	movs	r3, #15
 8000a9a:	18fb      	adds	r3, r7, r3
 8000a9c:	781b      	ldrb	r3, [r3, #0]
}
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b005      	add	sp, #20
 8000aa4:	bd90      	pop	{r4, r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	200000a8 	.word	0x200000a8
 8000aac:	200000a0 	.word	0x200000a0
 8000ab0:	200000a4 	.word	0x200000a4

08000ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <HAL_IncTick+0x1c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	001a      	movs	r2, r3
 8000abe:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <HAL_IncTick+0x20>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	18d2      	adds	r2, r2, r3
 8000ac4:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <HAL_IncTick+0x20>)
 8000ac6:	601a      	str	r2, [r3, #0]
}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	200000a8 	.word	0x200000a8
 8000ad4:	200001e4 	.word	0x200001e4

08000ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  return uwTick;
 8000adc:	4b02      	ldr	r3, [pc, #8]	; (8000ae8 <HAL_GetTick+0x10>)
 8000ade:	681b      	ldr	r3, [r3, #0]
}
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	200001e4 	.word	0x200001e4

08000aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	0002      	movs	r2, r0
 8000af4:	1dfb      	adds	r3, r7, #7
 8000af6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000af8:	1dfb      	adds	r3, r7, #7
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b7f      	cmp	r3, #127	; 0x7f
 8000afe:	d809      	bhi.n	8000b14 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b00:	1dfb      	adds	r3, r7, #7
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	001a      	movs	r2, r3
 8000b06:	231f      	movs	r3, #31
 8000b08:	401a      	ands	r2, r3
 8000b0a:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <__NVIC_EnableIRQ+0x30>)
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	4091      	lsls	r1, r2
 8000b10:	000a      	movs	r2, r1
 8000b12:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b002      	add	sp, #8
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	e000e100 	.word	0xe000e100

08000b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	0002      	movs	r2, r0
 8000b28:	6039      	str	r1, [r7, #0]
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b7f      	cmp	r3, #127	; 0x7f
 8000b34:	d828      	bhi.n	8000b88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b36:	4a2f      	ldr	r2, [pc, #188]	; (8000bf4 <__NVIC_SetPriority+0xd4>)
 8000b38:	1dfb      	adds	r3, r7, #7
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	b25b      	sxtb	r3, r3
 8000b3e:	089b      	lsrs	r3, r3, #2
 8000b40:	33c0      	adds	r3, #192	; 0xc0
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	589b      	ldr	r3, [r3, r2]
 8000b46:	1dfa      	adds	r2, r7, #7
 8000b48:	7812      	ldrb	r2, [r2, #0]
 8000b4a:	0011      	movs	r1, r2
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	400a      	ands	r2, r1
 8000b50:	00d2      	lsls	r2, r2, #3
 8000b52:	21ff      	movs	r1, #255	; 0xff
 8000b54:	4091      	lsls	r1, r2
 8000b56:	000a      	movs	r2, r1
 8000b58:	43d2      	mvns	r2, r2
 8000b5a:	401a      	ands	r2, r3
 8000b5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	019b      	lsls	r3, r3, #6
 8000b62:	22ff      	movs	r2, #255	; 0xff
 8000b64:	401a      	ands	r2, r3
 8000b66:	1dfb      	adds	r3, r7, #7
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	4003      	ands	r3, r0
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b74:	481f      	ldr	r0, [pc, #124]	; (8000bf4 <__NVIC_SetPriority+0xd4>)
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	b25b      	sxtb	r3, r3
 8000b7c:	089b      	lsrs	r3, r3, #2
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	33c0      	adds	r3, #192	; 0xc0
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b86:	e031      	b.n	8000bec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b88:	4a1b      	ldr	r2, [pc, #108]	; (8000bf8 <__NVIC_SetPriority+0xd8>)
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	0019      	movs	r1, r3
 8000b90:	230f      	movs	r3, #15
 8000b92:	400b      	ands	r3, r1
 8000b94:	3b08      	subs	r3, #8
 8000b96:	089b      	lsrs	r3, r3, #2
 8000b98:	3306      	adds	r3, #6
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	18d3      	adds	r3, r2, r3
 8000b9e:	3304      	adds	r3, #4
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	1dfa      	adds	r2, r7, #7
 8000ba4:	7812      	ldrb	r2, [r2, #0]
 8000ba6:	0011      	movs	r1, r2
 8000ba8:	2203      	movs	r2, #3
 8000baa:	400a      	ands	r2, r1
 8000bac:	00d2      	lsls	r2, r2, #3
 8000bae:	21ff      	movs	r1, #255	; 0xff
 8000bb0:	4091      	lsls	r1, r2
 8000bb2:	000a      	movs	r2, r1
 8000bb4:	43d2      	mvns	r2, r2
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	019b      	lsls	r3, r3, #6
 8000bbe:	22ff      	movs	r2, #255	; 0xff
 8000bc0:	401a      	ands	r2, r3
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	2303      	movs	r3, #3
 8000bca:	4003      	ands	r3, r0
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd0:	4809      	ldr	r0, [pc, #36]	; (8000bf8 <__NVIC_SetPriority+0xd8>)
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	001c      	movs	r4, r3
 8000bd8:	230f      	movs	r3, #15
 8000bda:	4023      	ands	r3, r4
 8000bdc:	3b08      	subs	r3, #8
 8000bde:	089b      	lsrs	r3, r3, #2
 8000be0:	430a      	orrs	r2, r1
 8000be2:	3306      	adds	r3, #6
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	18c3      	adds	r3, r0, r3
 8000be8:	3304      	adds	r3, #4
 8000bea:	601a      	str	r2, [r3, #0]
}
 8000bec:	46c0      	nop			; (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b003      	add	sp, #12
 8000bf2:	bd90      	pop	{r4, r7, pc}
 8000bf4:	e000e100 	.word	0xe000e100
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	1e5a      	subs	r2, r3, #1
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	045b      	lsls	r3, r3, #17
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d301      	bcc.n	8000c14 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c10:	2301      	movs	r3, #1
 8000c12:	e010      	b.n	8000c36 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <SysTick_Config+0x44>)
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	425b      	negs	r3, r3
 8000c20:	2103      	movs	r1, #3
 8000c22:	0018      	movs	r0, r3
 8000c24:	f7ff ff7c 	bl	8000b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <SysTick_Config+0x44>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2e:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <SysTick_Config+0x44>)
 8000c30:	2207      	movs	r2, #7
 8000c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	0018      	movs	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b002      	add	sp, #8
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	e000e010 	.word	0xe000e010

08000c44 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	607a      	str	r2, [r7, #4]
 8000c4e:	210f      	movs	r1, #15
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	1c02      	adds	r2, r0, #0
 8000c54:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b25b      	sxtb	r3, r3
 8000c5e:	0011      	movs	r1, r2
 8000c60:	0018      	movs	r0, r3
 8000c62:	f7ff ff5d 	bl	8000b20 <__NVIC_SetPriority>
}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	b004      	add	sp, #16
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	0002      	movs	r2, r0
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	b25b      	sxtb	r3, r3
 8000c80:	0018      	movs	r0, r3
 8000c82:	f7ff ff33 	bl	8000aec <__NVIC_EnableIRQ>
}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b002      	add	sp, #8
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f7ff ffaf 	bl	8000bfc <SysTick_Config>
 8000c9e:	0003      	movs	r3, r0
}
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b002      	add	sp, #8
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d101      	bne.n	8000cba <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e050      	b.n	8000d5c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2225      	movs	r2, #37	; 0x25
 8000cbe:	5c9b      	ldrb	r3, [r3, r2]
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d008      	beq.n	8000cd8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2204      	movs	r2, #4
 8000cca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2224      	movs	r2, #36	; 0x24
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e041      	b.n	8000d5c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	210e      	movs	r1, #14
 8000ce4:	438a      	bics	r2, r1
 8000ce6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	491c      	ldr	r1, [pc, #112]	; (8000d64 <HAL_DMA_Abort+0xbc>)
 8000cf4:	400a      	ands	r2, r1
 8000cf6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2101      	movs	r1, #1
 8000d04:	438a      	bics	r2, r1
 8000d06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8000d08:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <HAL_DMA_Abort+0xc0>)
 8000d0a:	6859      	ldr	r1, [r3, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	221c      	movs	r2, #28
 8000d12:	4013      	ands	r3, r2
 8000d14:	2201      	movs	r2, #1
 8000d16:	409a      	lsls	r2, r3
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <HAL_DMA_Abort+0xc0>)
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000d26:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d00c      	beq.n	8000d4a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d3a:	490a      	ldr	r1, [pc, #40]	; (8000d64 <HAL_DMA_Abort+0xbc>)
 8000d3c:	400a      	ands	r2, r1
 8000d3e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000d48:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2225      	movs	r2, #37	; 0x25
 8000d4e:	2101      	movs	r1, #1
 8000d50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2224      	movs	r2, #36	; 0x24
 8000d56:	2100      	movs	r1, #0
 8000d58:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b002      	add	sp, #8
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	fffffeff 	.word	0xfffffeff
 8000d68:	40020000 	.word	0x40020000

08000d6c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d74:	210f      	movs	r1, #15
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2225      	movs	r2, #37	; 0x25
 8000d80:	5c9b      	ldrb	r3, [r3, r2]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d006      	beq.n	8000d96 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2204      	movs	r2, #4
 8000d8c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	2201      	movs	r2, #1
 8000d92:	701a      	strb	r2, [r3, #0]
 8000d94:	e049      	b.n	8000e2a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	210e      	movs	r1, #14
 8000da2:	438a      	bics	r2, r1
 8000da4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2101      	movs	r1, #1
 8000db2:	438a      	bics	r2, r1
 8000db4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc0:	491d      	ldr	r1, [pc, #116]	; (8000e38 <HAL_DMA_Abort_IT+0xcc>)
 8000dc2:	400a      	ands	r2, r1
 8000dc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000dc6:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <HAL_DMA_Abort_IT+0xd0>)
 8000dc8:	6859      	ldr	r1, [r3, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	221c      	movs	r2, #28
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	409a      	lsls	r2, r3
 8000dd6:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <HAL_DMA_Abort_IT+0xd0>)
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000de4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d00c      	beq.n	8000e08 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000df8:	490f      	ldr	r1, [pc, #60]	; (8000e38 <HAL_DMA_Abort_IT+0xcc>)
 8000dfa:	400a      	ands	r2, r1
 8000dfc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000e06:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2225      	movs	r2, #37	; 0x25
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2224      	movs	r2, #36	; 0x24
 8000e14:	2100      	movs	r1, #0
 8000e16:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d004      	beq.n	8000e2a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	0010      	movs	r0, r2
 8000e28:	4798      	blx	r3
    }
  }
  return status;
 8000e2a:	230f      	movs	r3, #15
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	781b      	ldrb	r3, [r3, #0]
}
 8000e30:	0018      	movs	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b004      	add	sp, #16
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	fffffeff 	.word	0xfffffeff
 8000e3c:	40020000 	.word	0x40020000

08000e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e4e:	e147      	b.n	80010e0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2101      	movs	r1, #1
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	4091      	lsls	r1, r2
 8000e5a:	000a      	movs	r2, r1
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d100      	bne.n	8000e68 <HAL_GPIO_Init+0x28>
 8000e66:	e138      	b.n	80010da <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	4013      	ands	r3, r2
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d005      	beq.n	8000e80 <HAL_GPIO_Init+0x40>
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	2203      	movs	r2, #3
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d130      	bne.n	8000ee2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	409a      	lsls	r2, r3
 8000e8e:	0013      	movs	r3, r2
 8000e90:	43da      	mvns	r2, r3
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	68da      	ldr	r2, [r3, #12]
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	409a      	lsls	r2, r3
 8000ea2:	0013      	movs	r3, r2
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	0013      	movs	r3, r2
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	091b      	lsrs	r3, r3, #4
 8000ecc:	2201      	movs	r2, #1
 8000ece:	401a      	ands	r2, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	4013      	ands	r3, r2
 8000eea:	2b03      	cmp	r3, #3
 8000eec:	d017      	beq.n	8000f1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	2203      	movs	r2, #3
 8000efa:	409a      	lsls	r2, r3
 8000efc:	0013      	movs	r3, r2
 8000efe:	43da      	mvns	r2, r3
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	689a      	ldr	r2, [r3, #8]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	0013      	movs	r3, r2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	2203      	movs	r2, #3
 8000f24:	4013      	ands	r3, r2
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d123      	bne.n	8000f72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	08da      	lsrs	r2, r3, #3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3208      	adds	r2, #8
 8000f32:	0092      	lsls	r2, r2, #2
 8000f34:	58d3      	ldr	r3, [r2, r3]
 8000f36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	2207      	movs	r2, #7
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	220f      	movs	r2, #15
 8000f42:	409a      	lsls	r2, r3
 8000f44:	0013      	movs	r3, r2
 8000f46:	43da      	mvns	r2, r3
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	691a      	ldr	r2, [r3, #16]
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	2107      	movs	r1, #7
 8000f56:	400b      	ands	r3, r1
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	409a      	lsls	r2, r3
 8000f5c:	0013      	movs	r3, r2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	08da      	lsrs	r2, r3, #3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3208      	adds	r2, #8
 8000f6c:	0092      	lsls	r2, r2, #2
 8000f6e:	6939      	ldr	r1, [r7, #16]
 8000f70:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	0013      	movs	r3, r2
 8000f82:	43da      	mvns	r2, r3
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2203      	movs	r2, #3
 8000f90:	401a      	ands	r2, r3
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	409a      	lsls	r2, r3
 8000f98:	0013      	movs	r3, r2
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	23c0      	movs	r3, #192	; 0xc0
 8000fac:	029b      	lsls	r3, r3, #10
 8000fae:	4013      	ands	r3, r2
 8000fb0:	d100      	bne.n	8000fb4 <HAL_GPIO_Init+0x174>
 8000fb2:	e092      	b.n	80010da <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000fb4:	4a50      	ldr	r2, [pc, #320]	; (80010f8 <HAL_GPIO_Init+0x2b8>)
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	089b      	lsrs	r3, r3, #2
 8000fba:	3318      	adds	r3, #24
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	589b      	ldr	r3, [r3, r2]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	220f      	movs	r2, #15
 8000fcc:	409a      	lsls	r2, r3
 8000fce:	0013      	movs	r3, r2
 8000fd0:	43da      	mvns	r2, r3
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	23a0      	movs	r3, #160	; 0xa0
 8000fdc:	05db      	lsls	r3, r3, #23
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d013      	beq.n	800100a <HAL_GPIO_Init+0x1ca>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a45      	ldr	r2, [pc, #276]	; (80010fc <HAL_GPIO_Init+0x2bc>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d00d      	beq.n	8001006 <HAL_GPIO_Init+0x1c6>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a44      	ldr	r2, [pc, #272]	; (8001100 <HAL_GPIO_Init+0x2c0>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d007      	beq.n	8001002 <HAL_GPIO_Init+0x1c2>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a43      	ldr	r2, [pc, #268]	; (8001104 <HAL_GPIO_Init+0x2c4>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d101      	bne.n	8000ffe <HAL_GPIO_Init+0x1be>
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e006      	b.n	800100c <HAL_GPIO_Init+0x1cc>
 8000ffe:	2305      	movs	r3, #5
 8001000:	e004      	b.n	800100c <HAL_GPIO_Init+0x1cc>
 8001002:	2302      	movs	r3, #2
 8001004:	e002      	b.n	800100c <HAL_GPIO_Init+0x1cc>
 8001006:	2301      	movs	r3, #1
 8001008:	e000      	b.n	800100c <HAL_GPIO_Init+0x1cc>
 800100a:	2300      	movs	r3, #0
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	2103      	movs	r1, #3
 8001010:	400a      	ands	r2, r1
 8001012:	00d2      	lsls	r2, r2, #3
 8001014:	4093      	lsls	r3, r2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800101c:	4936      	ldr	r1, [pc, #216]	; (80010f8 <HAL_GPIO_Init+0x2b8>)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	3318      	adds	r3, #24
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800102a:	4b33      	ldr	r3, [pc, #204]	; (80010f8 <HAL_GPIO_Init+0x2b8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	43da      	mvns	r2, r3
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	035b      	lsls	r3, r3, #13
 8001042:	4013      	ands	r3, r2
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800104e:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <HAL_GPIO_Init+0x2b8>)
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001054:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <HAL_GPIO_Init+0x2b8>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	43da      	mvns	r2, r3
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	039b      	lsls	r3, r3, #14
 800106c:	4013      	ands	r3, r2
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001078:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <HAL_GPIO_Init+0x2b8>)
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800107e:	4a1e      	ldr	r2, [pc, #120]	; (80010f8 <HAL_GPIO_Init+0x2b8>)
 8001080:	2384      	movs	r3, #132	; 0x84
 8001082:	58d3      	ldr	r3, [r2, r3]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	43da      	mvns	r2, r3
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	029b      	lsls	r3, r3, #10
 8001098:	4013      	ands	r3, r2
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010a4:	4914      	ldr	r1, [pc, #80]	; (80010f8 <HAL_GPIO_Init+0x2b8>)
 80010a6:	2284      	movs	r2, #132	; 0x84
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80010ac:	4a12      	ldr	r2, [pc, #72]	; (80010f8 <HAL_GPIO_Init+0x2b8>)
 80010ae:	2380      	movs	r3, #128	; 0x80
 80010b0:	58d3      	ldr	r3, [r2, r3]
 80010b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	43da      	mvns	r2, r3
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	025b      	lsls	r3, r3, #9
 80010c6:	4013      	ands	r3, r2
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010d2:	4909      	ldr	r1, [pc, #36]	; (80010f8 <HAL_GPIO_Init+0x2b8>)
 80010d4:	2280      	movs	r2, #128	; 0x80
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3301      	adds	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	40da      	lsrs	r2, r3
 80010e8:	1e13      	subs	r3, r2, #0
 80010ea:	d000      	beq.n	80010ee <HAL_GPIO_Init+0x2ae>
 80010ec:	e6b0      	b.n	8000e50 <HAL_GPIO_Init+0x10>
  }
}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	46c0      	nop			; (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b006      	add	sp, #24
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40021800 	.word	0x40021800
 80010fc:	50000400 	.word	0x50000400
 8001100:	50000800 	.word	0x50000800
 8001104:	50000c00 	.word	0x50000c00

08001108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	0008      	movs	r0, r1
 8001112:	0011      	movs	r1, r2
 8001114:	1cbb      	adds	r3, r7, #2
 8001116:	1c02      	adds	r2, r0, #0
 8001118:	801a      	strh	r2, [r3, #0]
 800111a:	1c7b      	adds	r3, r7, #1
 800111c:	1c0a      	adds	r2, r1, #0
 800111e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001120:	1c7b      	adds	r3, r7, #1
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d004      	beq.n	8001132 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001128:	1cbb      	adds	r3, r7, #2
 800112a:	881a      	ldrh	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001130:	e003      	b.n	800113a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001132:	1cbb      	adds	r3, r7, #2
 8001134:	881a      	ldrh	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	629a      	str	r2, [r3, #40]	; 0x28
}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	46bd      	mov	sp, r7
 800113e:	b002      	add	sp, #8
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b084      	sub	sp, #16
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	000a      	movs	r2, r1
 800114c:	1cbb      	adds	r3, r7, #2
 800114e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001156:	1cbb      	adds	r3, r7, #2
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	4013      	ands	r3, r2
 800115e:	041a      	lsls	r2, r3, #16
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	43db      	mvns	r3, r3
 8001164:	1cb9      	adds	r1, r7, #2
 8001166:	8809      	ldrh	r1, [r1, #0]
 8001168:	400b      	ands	r3, r1
 800116a:	431a      	orrs	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	619a      	str	r2, [r3, #24]
}
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	b004      	add	sp, #16
 8001176:	bd80      	pop	{r7, pc}

08001178 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a19      	ldr	r2, [pc, #100]	; (80011ec <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001186:	4013      	ands	r3, r2
 8001188:	0019      	movs	r1, r3
 800118a:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	430a      	orrs	r2, r1
 8001190:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	429a      	cmp	r2, r3
 800119a:	d11f      	bne.n	80011dc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	0013      	movs	r3, r2
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	189b      	adds	r3, r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4912      	ldr	r1, [pc, #72]	; (80011f4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80011aa:	0018      	movs	r0, r3
 80011ac:	f7fe ffb0 	bl	8000110 <__udivsi3>
 80011b0:	0003      	movs	r3, r0
 80011b2:	3301      	adds	r3, #1
 80011b4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011b6:	e008      	b.n	80011ca <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	e001      	b.n	80011ca <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e009      	b.n	80011de <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011cc:	695a      	ldr	r2, [r3, #20]
 80011ce:	2380      	movs	r3, #128	; 0x80
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	401a      	ands	r2, r3
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	429a      	cmp	r2, r3
 80011da:	d0ed      	beq.n	80011b8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	0018      	movs	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b004      	add	sp, #16
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	40007000 	.word	0x40007000
 80011ec:	fffff9ff 	.word	0xfffff9ff
 80011f0:	200000a0 	.word	0x200000a0
 80011f4:	000f4240 	.word	0x000f4240

080011f8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <LL_RCC_GetAPB1Prescaler+0x14>)
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	23e0      	movs	r3, #224	; 0xe0
 8001202:	01db      	lsls	r3, r3, #7
 8001204:	4013      	ands	r3, r2
}
 8001206:	0018      	movs	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40021000 	.word	0x40021000

08001210 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e2f3      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2201      	movs	r2, #1
 8001228:	4013      	ands	r3, r2
 800122a:	d100      	bne.n	800122e <HAL_RCC_OscConfig+0x1e>
 800122c:	e07c      	b.n	8001328 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800122e:	4bc3      	ldr	r3, [pc, #780]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2238      	movs	r2, #56	; 0x38
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001238:	4bc0      	ldr	r3, [pc, #768]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	2203      	movs	r2, #3
 800123e:	4013      	ands	r3, r2
 8001240:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	2b10      	cmp	r3, #16
 8001246:	d102      	bne.n	800124e <HAL_RCC_OscConfig+0x3e>
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	2b03      	cmp	r3, #3
 800124c:	d002      	beq.n	8001254 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	2b08      	cmp	r3, #8
 8001252:	d10b      	bne.n	800126c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001254:	4bb9      	ldr	r3, [pc, #740]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	029b      	lsls	r3, r3, #10
 800125c:	4013      	ands	r3, r2
 800125e:	d062      	beq.n	8001326 <HAL_RCC_OscConfig+0x116>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d15e      	bne.n	8001326 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e2ce      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	025b      	lsls	r3, r3, #9
 8001274:	429a      	cmp	r2, r3
 8001276:	d107      	bne.n	8001288 <HAL_RCC_OscConfig+0x78>
 8001278:	4bb0      	ldr	r3, [pc, #704]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4baf      	ldr	r3, [pc, #700]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 800127e:	2180      	movs	r1, #128	; 0x80
 8001280:	0249      	lsls	r1, r1, #9
 8001282:	430a      	orrs	r2, r1
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	e020      	b.n	80012ca <HAL_RCC_OscConfig+0xba>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	23a0      	movs	r3, #160	; 0xa0
 800128e:	02db      	lsls	r3, r3, #11
 8001290:	429a      	cmp	r2, r3
 8001292:	d10e      	bne.n	80012b2 <HAL_RCC_OscConfig+0xa2>
 8001294:	4ba9      	ldr	r3, [pc, #676]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4ba8      	ldr	r3, [pc, #672]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 800129a:	2180      	movs	r1, #128	; 0x80
 800129c:	02c9      	lsls	r1, r1, #11
 800129e:	430a      	orrs	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	4ba6      	ldr	r3, [pc, #664]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4ba5      	ldr	r3, [pc, #660]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80012a8:	2180      	movs	r1, #128	; 0x80
 80012aa:	0249      	lsls	r1, r1, #9
 80012ac:	430a      	orrs	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	e00b      	b.n	80012ca <HAL_RCC_OscConfig+0xba>
 80012b2:	4ba2      	ldr	r3, [pc, #648]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	4ba1      	ldr	r3, [pc, #644]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80012b8:	49a1      	ldr	r1, [pc, #644]	; (8001540 <HAL_RCC_OscConfig+0x330>)
 80012ba:	400a      	ands	r2, r1
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	4b9f      	ldr	r3, [pc, #636]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	4b9e      	ldr	r3, [pc, #632]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80012c4:	499f      	ldr	r1, [pc, #636]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 80012c6:	400a      	ands	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d014      	beq.n	80012fc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d2:	f7ff fc01 	bl	8000ad8 <HAL_GetTick>
 80012d6:	0003      	movs	r3, r0
 80012d8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012dc:	f7ff fbfc 	bl	8000ad8 <HAL_GetTick>
 80012e0:	0002      	movs	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b64      	cmp	r3, #100	; 0x64
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e28d      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ee:	4b93      	ldr	r3, [pc, #588]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	029b      	lsls	r3, r3, #10
 80012f6:	4013      	ands	r3, r2
 80012f8:	d0f0      	beq.n	80012dc <HAL_RCC_OscConfig+0xcc>
 80012fa:	e015      	b.n	8001328 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fc:	f7ff fbec 	bl	8000ad8 <HAL_GetTick>
 8001300:	0003      	movs	r3, r0
 8001302:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001306:	f7ff fbe7 	bl	8000ad8 <HAL_GetTick>
 800130a:	0002      	movs	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b64      	cmp	r3, #100	; 0x64
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e278      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001318:	4b88      	ldr	r3, [pc, #544]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	029b      	lsls	r3, r3, #10
 8001320:	4013      	ands	r3, r2
 8001322:	d1f0      	bne.n	8001306 <HAL_RCC_OscConfig+0xf6>
 8001324:	e000      	b.n	8001328 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001326:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2202      	movs	r2, #2
 800132e:	4013      	ands	r3, r2
 8001330:	d100      	bne.n	8001334 <HAL_RCC_OscConfig+0x124>
 8001332:	e099      	b.n	8001468 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001334:	4b81      	ldr	r3, [pc, #516]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	2238      	movs	r2, #56	; 0x38
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800133e:	4b7f      	ldr	r3, [pc, #508]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	2203      	movs	r2, #3
 8001344:	4013      	ands	r3, r2
 8001346:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	2b10      	cmp	r3, #16
 800134c:	d102      	bne.n	8001354 <HAL_RCC_OscConfig+0x144>
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d002      	beq.n	800135a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d135      	bne.n	80013c6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800135a:	4b78      	ldr	r3, [pc, #480]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	2380      	movs	r3, #128	; 0x80
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	4013      	ands	r3, r2
 8001364:	d005      	beq.n	8001372 <HAL_RCC_OscConfig+0x162>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e24b      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001372:	4b72      	ldr	r3, [pc, #456]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	4a74      	ldr	r2, [pc, #464]	; (8001548 <HAL_RCC_OscConfig+0x338>)
 8001378:	4013      	ands	r3, r2
 800137a:	0019      	movs	r1, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	021a      	lsls	r2, r3, #8
 8001382:	4b6e      	ldr	r3, [pc, #440]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 8001384:	430a      	orrs	r2, r1
 8001386:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d112      	bne.n	80013b4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800138e:	4b6b      	ldr	r3, [pc, #428]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a6e      	ldr	r2, [pc, #440]	; (800154c <HAL_RCC_OscConfig+0x33c>)
 8001394:	4013      	ands	r3, r2
 8001396:	0019      	movs	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691a      	ldr	r2, [r3, #16]
 800139c:	4b67      	ldr	r3, [pc, #412]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 800139e:	430a      	orrs	r2, r1
 80013a0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80013a2:	4b66      	ldr	r3, [pc, #408]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	0adb      	lsrs	r3, r3, #11
 80013a8:	2207      	movs	r2, #7
 80013aa:	4013      	ands	r3, r2
 80013ac:	4a68      	ldr	r2, [pc, #416]	; (8001550 <HAL_RCC_OscConfig+0x340>)
 80013ae:	40da      	lsrs	r2, r3
 80013b0:	4b68      	ldr	r3, [pc, #416]	; (8001554 <HAL_RCC_OscConfig+0x344>)
 80013b2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013b4:	4b68      	ldr	r3, [pc, #416]	; (8001558 <HAL_RCC_OscConfig+0x348>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	0018      	movs	r0, r3
 80013ba:	f7ff fb31 	bl	8000a20 <HAL_InitTick>
 80013be:	1e03      	subs	r3, r0, #0
 80013c0:	d051      	beq.n	8001466 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e221      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d030      	beq.n	8001430 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013ce:	4b5b      	ldr	r3, [pc, #364]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a5e      	ldr	r2, [pc, #376]	; (800154c <HAL_RCC_OscConfig+0x33c>)
 80013d4:	4013      	ands	r3, r2
 80013d6:	0019      	movs	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691a      	ldr	r2, [r3, #16]
 80013dc:	4b57      	ldr	r3, [pc, #348]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80013de:	430a      	orrs	r2, r1
 80013e0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80013e2:	4b56      	ldr	r3, [pc, #344]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	4b55      	ldr	r3, [pc, #340]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80013e8:	2180      	movs	r1, #128	; 0x80
 80013ea:	0049      	lsls	r1, r1, #1
 80013ec:	430a      	orrs	r2, r1
 80013ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f0:	f7ff fb72 	bl	8000ad8 <HAL_GetTick>
 80013f4:	0003      	movs	r3, r0
 80013f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013fa:	f7ff fb6d 	bl	8000ad8 <HAL_GetTick>
 80013fe:	0002      	movs	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e1fe      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800140c:	4b4b      	ldr	r3, [pc, #300]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	4013      	ands	r3, r2
 8001416:	d0f0      	beq.n	80013fa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001418:	4b48      	ldr	r3, [pc, #288]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	4a4a      	ldr	r2, [pc, #296]	; (8001548 <HAL_RCC_OscConfig+0x338>)
 800141e:	4013      	ands	r3, r2
 8001420:	0019      	movs	r1, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	021a      	lsls	r2, r3, #8
 8001428:	4b44      	ldr	r3, [pc, #272]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 800142a:	430a      	orrs	r2, r1
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	e01b      	b.n	8001468 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001430:	4b42      	ldr	r3, [pc, #264]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b41      	ldr	r3, [pc, #260]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 8001436:	4949      	ldr	r1, [pc, #292]	; (800155c <HAL_RCC_OscConfig+0x34c>)
 8001438:	400a      	ands	r2, r1
 800143a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143c:	f7ff fb4c 	bl	8000ad8 <HAL_GetTick>
 8001440:	0003      	movs	r3, r0
 8001442:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001446:	f7ff fb47 	bl	8000ad8 <HAL_GetTick>
 800144a:	0002      	movs	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e1d8      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001458:	4b38      	ldr	r3, [pc, #224]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	4013      	ands	r3, r2
 8001462:	d1f0      	bne.n	8001446 <HAL_RCC_OscConfig+0x236>
 8001464:	e000      	b.n	8001468 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001466:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2208      	movs	r2, #8
 800146e:	4013      	ands	r3, r2
 8001470:	d047      	beq.n	8001502 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001472:	4b32      	ldr	r3, [pc, #200]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2238      	movs	r2, #56	; 0x38
 8001478:	4013      	ands	r3, r2
 800147a:	2b18      	cmp	r3, #24
 800147c:	d10a      	bne.n	8001494 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800147e:	4b2f      	ldr	r3, [pc, #188]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 8001480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001482:	2202      	movs	r2, #2
 8001484:	4013      	ands	r3, r2
 8001486:	d03c      	beq.n	8001502 <HAL_RCC_OscConfig+0x2f2>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d138      	bne.n	8001502 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e1ba      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d019      	beq.n	80014d0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800149c:	4b27      	ldr	r3, [pc, #156]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 800149e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014a0:	4b26      	ldr	r3, [pc, #152]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80014a2:	2101      	movs	r1, #1
 80014a4:	430a      	orrs	r2, r1
 80014a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a8:	f7ff fb16 	bl	8000ad8 <HAL_GetTick>
 80014ac:	0003      	movs	r3, r0
 80014ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b2:	f7ff fb11 	bl	8000ad8 <HAL_GetTick>
 80014b6:	0002      	movs	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e1a2      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014c4:	4b1d      	ldr	r3, [pc, #116]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80014c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c8:	2202      	movs	r2, #2
 80014ca:	4013      	ands	r3, r2
 80014cc:	d0f1      	beq.n	80014b2 <HAL_RCC_OscConfig+0x2a2>
 80014ce:	e018      	b.n	8001502 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80014d0:	4b1a      	ldr	r3, [pc, #104]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80014d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80014d6:	2101      	movs	r1, #1
 80014d8:	438a      	bics	r2, r1
 80014da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014dc:	f7ff fafc 	bl	8000ad8 <HAL_GetTick>
 80014e0:	0003      	movs	r3, r0
 80014e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e6:	f7ff faf7 	bl	8000ad8 <HAL_GetTick>
 80014ea:	0002      	movs	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e188      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014f8:	4b10      	ldr	r3, [pc, #64]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80014fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014fc:	2202      	movs	r2, #2
 80014fe:	4013      	ands	r3, r2
 8001500:	d1f1      	bne.n	80014e6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2204      	movs	r2, #4
 8001508:	4013      	ands	r3, r2
 800150a:	d100      	bne.n	800150e <HAL_RCC_OscConfig+0x2fe>
 800150c:	e0c6      	b.n	800169c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800150e:	231f      	movs	r3, #31
 8001510:	18fb      	adds	r3, r7, r3
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2238      	movs	r2, #56	; 0x38
 800151c:	4013      	ands	r3, r2
 800151e:	2b20      	cmp	r3, #32
 8001520:	d11e      	bne.n	8001560 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 8001524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001526:	2202      	movs	r2, #2
 8001528:	4013      	ands	r3, r2
 800152a:	d100      	bne.n	800152e <HAL_RCC_OscConfig+0x31e>
 800152c:	e0b6      	b.n	800169c <HAL_RCC_OscConfig+0x48c>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d000      	beq.n	8001538 <HAL_RCC_OscConfig+0x328>
 8001536:	e0b1      	b.n	800169c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e166      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
 800153c:	40021000 	.word	0x40021000
 8001540:	fffeffff 	.word	0xfffeffff
 8001544:	fffbffff 	.word	0xfffbffff
 8001548:	ffff80ff 	.word	0xffff80ff
 800154c:	ffffc7ff 	.word	0xffffc7ff
 8001550:	00f42400 	.word	0x00f42400
 8001554:	200000a0 	.word	0x200000a0
 8001558:	200000a4 	.word	0x200000a4
 800155c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001560:	4bac      	ldr	r3, [pc, #688]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	055b      	lsls	r3, r3, #21
 8001568:	4013      	ands	r3, r2
 800156a:	d101      	bne.n	8001570 <HAL_RCC_OscConfig+0x360>
 800156c:	2301      	movs	r3, #1
 800156e:	e000      	b.n	8001572 <HAL_RCC_OscConfig+0x362>
 8001570:	2300      	movs	r3, #0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d011      	beq.n	800159a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	4ba7      	ldr	r3, [pc, #668]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001578:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800157a:	4ba6      	ldr	r3, [pc, #664]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 800157c:	2180      	movs	r1, #128	; 0x80
 800157e:	0549      	lsls	r1, r1, #21
 8001580:	430a      	orrs	r2, r1
 8001582:	63da      	str	r2, [r3, #60]	; 0x3c
 8001584:	4ba3      	ldr	r3, [pc, #652]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001586:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	055b      	lsls	r3, r3, #21
 800158c:	4013      	ands	r3, r2
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001592:	231f      	movs	r3, #31
 8001594:	18fb      	adds	r3, r7, r3
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800159a:	4b9f      	ldr	r3, [pc, #636]	; (8001818 <HAL_RCC_OscConfig+0x608>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4013      	ands	r3, r2
 80015a4:	d11a      	bne.n	80015dc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015a6:	4b9c      	ldr	r3, [pc, #624]	; (8001818 <HAL_RCC_OscConfig+0x608>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	4b9b      	ldr	r3, [pc, #620]	; (8001818 <HAL_RCC_OscConfig+0x608>)
 80015ac:	2180      	movs	r1, #128	; 0x80
 80015ae:	0049      	lsls	r1, r1, #1
 80015b0:	430a      	orrs	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80015b4:	f7ff fa90 	bl	8000ad8 <HAL_GetTick>
 80015b8:	0003      	movs	r3, r0
 80015ba:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015be:	f7ff fa8b 	bl	8000ad8 <HAL_GetTick>
 80015c2:	0002      	movs	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e11c      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d0:	4b91      	ldr	r3, [pc, #580]	; (8001818 <HAL_RCC_OscConfig+0x608>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4013      	ands	r3, r2
 80015da:	d0f0      	beq.n	80015be <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d106      	bne.n	80015f2 <HAL_RCC_OscConfig+0x3e2>
 80015e4:	4b8b      	ldr	r3, [pc, #556]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 80015e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015e8:	4b8a      	ldr	r3, [pc, #552]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 80015ea:	2101      	movs	r1, #1
 80015ec:	430a      	orrs	r2, r1
 80015ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80015f0:	e01c      	b.n	800162c <HAL_RCC_OscConfig+0x41c>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2b05      	cmp	r3, #5
 80015f8:	d10c      	bne.n	8001614 <HAL_RCC_OscConfig+0x404>
 80015fa:	4b86      	ldr	r3, [pc, #536]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 80015fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015fe:	4b85      	ldr	r3, [pc, #532]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001600:	2104      	movs	r1, #4
 8001602:	430a      	orrs	r2, r1
 8001604:	65da      	str	r2, [r3, #92]	; 0x5c
 8001606:	4b83      	ldr	r3, [pc, #524]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001608:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800160a:	4b82      	ldr	r3, [pc, #520]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 800160c:	2101      	movs	r1, #1
 800160e:	430a      	orrs	r2, r1
 8001610:	65da      	str	r2, [r3, #92]	; 0x5c
 8001612:	e00b      	b.n	800162c <HAL_RCC_OscConfig+0x41c>
 8001614:	4b7f      	ldr	r3, [pc, #508]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001616:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001618:	4b7e      	ldr	r3, [pc, #504]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 800161a:	2101      	movs	r1, #1
 800161c:	438a      	bics	r2, r1
 800161e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001620:	4b7c      	ldr	r3, [pc, #496]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001622:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001624:	4b7b      	ldr	r3, [pc, #492]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001626:	2104      	movs	r1, #4
 8001628:	438a      	bics	r2, r1
 800162a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d014      	beq.n	800165e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff fa50 	bl	8000ad8 <HAL_GetTick>
 8001638:	0003      	movs	r3, r0
 800163a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800163c:	e009      	b.n	8001652 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800163e:	f7ff fa4b 	bl	8000ad8 <HAL_GetTick>
 8001642:	0002      	movs	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	4a74      	ldr	r2, [pc, #464]	; (800181c <HAL_RCC_OscConfig+0x60c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e0db      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001652:	4b70      	ldr	r3, [pc, #448]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001656:	2202      	movs	r2, #2
 8001658:	4013      	ands	r3, r2
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x42e>
 800165c:	e013      	b.n	8001686 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165e:	f7ff fa3b 	bl	8000ad8 <HAL_GetTick>
 8001662:	0003      	movs	r3, r0
 8001664:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001666:	e009      	b.n	800167c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001668:	f7ff fa36 	bl	8000ad8 <HAL_GetTick>
 800166c:	0002      	movs	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	4a6a      	ldr	r2, [pc, #424]	; (800181c <HAL_RCC_OscConfig+0x60c>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e0c6      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800167c:	4b65      	ldr	r3, [pc, #404]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 800167e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001680:	2202      	movs	r2, #2
 8001682:	4013      	ands	r3, r2
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001686:	231f      	movs	r3, #31
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d105      	bne.n	800169c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001690:	4b60      	ldr	r3, [pc, #384]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001692:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001694:	4b5f      	ldr	r3, [pc, #380]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001696:	4962      	ldr	r1, [pc, #392]	; (8001820 <HAL_RCC_OscConfig+0x610>)
 8001698:	400a      	ands	r2, r1
 800169a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d100      	bne.n	80016a6 <HAL_RCC_OscConfig+0x496>
 80016a4:	e0b0      	b.n	8001808 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016a6:	4b5b      	ldr	r3, [pc, #364]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2238      	movs	r2, #56	; 0x38
 80016ac:	4013      	ands	r3, r2
 80016ae:	2b10      	cmp	r3, #16
 80016b0:	d100      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4a4>
 80016b2:	e078      	b.n	80017a6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d153      	bne.n	8001764 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016bc:	4b55      	ldr	r3, [pc, #340]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b54      	ldr	r3, [pc, #336]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 80016c2:	4958      	ldr	r1, [pc, #352]	; (8001824 <HAL_RCC_OscConfig+0x614>)
 80016c4:	400a      	ands	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c8:	f7ff fa06 	bl	8000ad8 <HAL_GetTick>
 80016cc:	0003      	movs	r3, r0
 80016ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d2:	f7ff fa01 	bl	8000ad8 <HAL_GetTick>
 80016d6:	0002      	movs	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e092      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016e4:	4b4b      	ldr	r3, [pc, #300]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	049b      	lsls	r3, r3, #18
 80016ec:	4013      	ands	r3, r2
 80016ee:	d1f0      	bne.n	80016d2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016f0:	4b48      	ldr	r3, [pc, #288]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	4a4c      	ldr	r2, [pc, #304]	; (8001828 <HAL_RCC_OscConfig+0x618>)
 80016f6:	4013      	ands	r3, r2
 80016f8:	0019      	movs	r1, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1a      	ldr	r2, [r3, #32]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	431a      	orrs	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	431a      	orrs	r2, r3
 8001718:	4b3e      	ldr	r3, [pc, #248]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 800171a:	430a      	orrs	r2, r1
 800171c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800171e:	4b3d      	ldr	r3, [pc, #244]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4b3c      	ldr	r3, [pc, #240]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001724:	2180      	movs	r1, #128	; 0x80
 8001726:	0449      	lsls	r1, r1, #17
 8001728:	430a      	orrs	r2, r1
 800172a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800172c:	4b39      	ldr	r3, [pc, #228]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 800172e:	68da      	ldr	r2, [r3, #12]
 8001730:	4b38      	ldr	r3, [pc, #224]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001732:	2180      	movs	r1, #128	; 0x80
 8001734:	0549      	lsls	r1, r1, #21
 8001736:	430a      	orrs	r2, r1
 8001738:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173a:	f7ff f9cd 	bl	8000ad8 <HAL_GetTick>
 800173e:	0003      	movs	r3, r0
 8001740:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001744:	f7ff f9c8 	bl	8000ad8 <HAL_GetTick>
 8001748:	0002      	movs	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e059      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001756:	4b2f      	ldr	r3, [pc, #188]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	049b      	lsls	r3, r3, #18
 800175e:	4013      	ands	r3, r2
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0x534>
 8001762:	e051      	b.n	8001808 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001764:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b2a      	ldr	r3, [pc, #168]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 800176a:	492e      	ldr	r1, [pc, #184]	; (8001824 <HAL_RCC_OscConfig+0x614>)
 800176c:	400a      	ands	r2, r1
 800176e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001770:	f7ff f9b2 	bl	8000ad8 <HAL_GetTick>
 8001774:	0003      	movs	r3, r0
 8001776:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177a:	f7ff f9ad 	bl	8000ad8 <HAL_GetTick>
 800177e:	0002      	movs	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e03e      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800178c:	4b21      	ldr	r3, [pc, #132]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	049b      	lsls	r3, r3, #18
 8001794:	4013      	ands	r3, r2
 8001796:	d1f0      	bne.n	800177a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001798:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 800179e:	4923      	ldr	r1, [pc, #140]	; (800182c <HAL_RCC_OscConfig+0x61c>)
 80017a0:	400a      	ands	r2, r1
 80017a2:	60da      	str	r2, [r3, #12]
 80017a4:	e030      	b.n	8001808 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e02b      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	2203      	movs	r2, #3
 80017bc:	401a      	ands	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d11e      	bne.n	8001804 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	2270      	movs	r2, #112	; 0x70
 80017ca:	401a      	ands	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d117      	bne.n	8001804 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	23fe      	movs	r3, #254	; 0xfe
 80017d8:	01db      	lsls	r3, r3, #7
 80017da:	401a      	ands	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d10e      	bne.n	8001804 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	23f8      	movs	r3, #248	; 0xf8
 80017ea:	039b      	lsls	r3, r3, #14
 80017ec:	401a      	ands	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d106      	bne.n	8001804 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	0f5b      	lsrs	r3, r3, #29
 80017fa:	075a      	lsls	r2, r3, #29
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001800:	429a      	cmp	r2, r3
 8001802:	d001      	beq.n	8001808 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	0018      	movs	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	b008      	add	sp, #32
 8001810:	bd80      	pop	{r7, pc}
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	40021000 	.word	0x40021000
 8001818:	40007000 	.word	0x40007000
 800181c:	00001388 	.word	0x00001388
 8001820:	efffffff 	.word	0xefffffff
 8001824:	feffffff 	.word	0xfeffffff
 8001828:	1fc1808c 	.word	0x1fc1808c
 800182c:	effefffc 	.word	0xeffefffc

08001830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e0e9      	b.n	8001a18 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001844:	4b76      	ldr	r3, [pc, #472]	; (8001a20 <HAL_RCC_ClockConfig+0x1f0>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2207      	movs	r2, #7
 800184a:	4013      	ands	r3, r2
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d91e      	bls.n	8001890 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001852:	4b73      	ldr	r3, [pc, #460]	; (8001a20 <HAL_RCC_ClockConfig+0x1f0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2207      	movs	r2, #7
 8001858:	4393      	bics	r3, r2
 800185a:	0019      	movs	r1, r3
 800185c:	4b70      	ldr	r3, [pc, #448]	; (8001a20 <HAL_RCC_ClockConfig+0x1f0>)
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001864:	f7ff f938 	bl	8000ad8 <HAL_GetTick>
 8001868:	0003      	movs	r3, r0
 800186a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800186c:	e009      	b.n	8001882 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800186e:	f7ff f933 	bl	8000ad8 <HAL_GetTick>
 8001872:	0002      	movs	r2, r0
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	4a6a      	ldr	r2, [pc, #424]	; (8001a24 <HAL_RCC_ClockConfig+0x1f4>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e0ca      	b.n	8001a18 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001882:	4b67      	ldr	r3, [pc, #412]	; (8001a20 <HAL_RCC_ClockConfig+0x1f0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2207      	movs	r2, #7
 8001888:	4013      	ands	r3, r2
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d1ee      	bne.n	800186e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2202      	movs	r2, #2
 8001896:	4013      	ands	r3, r2
 8001898:	d015      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2204      	movs	r2, #4
 80018a0:	4013      	ands	r3, r2
 80018a2:	d006      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80018a4:	4b60      	ldr	r3, [pc, #384]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	4b5f      	ldr	r3, [pc, #380]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 80018aa:	21e0      	movs	r1, #224	; 0xe0
 80018ac:	01c9      	lsls	r1, r1, #7
 80018ae:	430a      	orrs	r2, r1
 80018b0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b2:	4b5d      	ldr	r3, [pc, #372]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	4a5d      	ldr	r2, [pc, #372]	; (8001a2c <HAL_RCC_ClockConfig+0x1fc>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	0019      	movs	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	4b59      	ldr	r3, [pc, #356]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 80018c2:	430a      	orrs	r2, r1
 80018c4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2201      	movs	r2, #1
 80018cc:	4013      	ands	r3, r2
 80018ce:	d057      	beq.n	8001980 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d107      	bne.n	80018e8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018d8:	4b53      	ldr	r3, [pc, #332]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	029b      	lsls	r3, r3, #10
 80018e0:	4013      	ands	r3, r2
 80018e2:	d12b      	bne.n	800193c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e097      	b.n	8001a18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d107      	bne.n	8001900 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018f0:	4b4d      	ldr	r3, [pc, #308]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	049b      	lsls	r3, r3, #18
 80018f8:	4013      	ands	r3, r2
 80018fa:	d11f      	bne.n	800193c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e08b      	b.n	8001a18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d107      	bne.n	8001918 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001908:	4b47      	ldr	r3, [pc, #284]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	4013      	ands	r3, r2
 8001912:	d113      	bne.n	800193c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e07f      	b.n	8001a18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b03      	cmp	r3, #3
 800191e:	d106      	bne.n	800192e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001920:	4b41      	ldr	r3, [pc, #260]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 8001922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001924:	2202      	movs	r2, #2
 8001926:	4013      	ands	r3, r2
 8001928:	d108      	bne.n	800193c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e074      	b.n	8001a18 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800192e:	4b3e      	ldr	r3, [pc, #248]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 8001930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001932:	2202      	movs	r2, #2
 8001934:	4013      	ands	r3, r2
 8001936:	d101      	bne.n	800193c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e06d      	b.n	8001a18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800193c:	4b3a      	ldr	r3, [pc, #232]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2207      	movs	r2, #7
 8001942:	4393      	bics	r3, r2
 8001944:	0019      	movs	r1, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	4b37      	ldr	r3, [pc, #220]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 800194c:	430a      	orrs	r2, r1
 800194e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001950:	f7ff f8c2 	bl	8000ad8 <HAL_GetTick>
 8001954:	0003      	movs	r3, r0
 8001956:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001958:	e009      	b.n	800196e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195a:	f7ff f8bd 	bl	8000ad8 <HAL_GetTick>
 800195e:	0002      	movs	r2, r0
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	4a2f      	ldr	r2, [pc, #188]	; (8001a24 <HAL_RCC_ClockConfig+0x1f4>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e054      	b.n	8001a18 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196e:	4b2e      	ldr	r3, [pc, #184]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2238      	movs	r2, #56	; 0x38
 8001974:	401a      	ands	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	429a      	cmp	r2, r3
 800197e:	d1ec      	bne.n	800195a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001980:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <HAL_RCC_ClockConfig+0x1f0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2207      	movs	r2, #7
 8001986:	4013      	ands	r3, r2
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d21e      	bcs.n	80019cc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198e:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <HAL_RCC_ClockConfig+0x1f0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2207      	movs	r2, #7
 8001994:	4393      	bics	r3, r2
 8001996:	0019      	movs	r1, r3
 8001998:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <HAL_RCC_ClockConfig+0x1f0>)
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019a0:	f7ff f89a 	bl	8000ad8 <HAL_GetTick>
 80019a4:	0003      	movs	r3, r0
 80019a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019a8:	e009      	b.n	80019be <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019aa:	f7ff f895 	bl	8000ad8 <HAL_GetTick>
 80019ae:	0002      	movs	r2, r0
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	4a1b      	ldr	r2, [pc, #108]	; (8001a24 <HAL_RCC_ClockConfig+0x1f4>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e02c      	b.n	8001a18 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019be:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <HAL_RCC_ClockConfig+0x1f0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2207      	movs	r2, #7
 80019c4:	4013      	ands	r3, r2
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d1ee      	bne.n	80019aa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2204      	movs	r2, #4
 80019d2:	4013      	ands	r3, r2
 80019d4:	d009      	beq.n	80019ea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80019d6:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	4a15      	ldr	r2, [pc, #84]	; (8001a30 <HAL_RCC_ClockConfig+0x200>)
 80019dc:	4013      	ands	r3, r2
 80019de:	0019      	movs	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 80019e6:	430a      	orrs	r2, r1
 80019e8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80019ea:	f000 f829 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 80019ee:	0001      	movs	r1, r0
 80019f0:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	0a1b      	lsrs	r3, r3, #8
 80019f6:	220f      	movs	r2, #15
 80019f8:	401a      	ands	r2, r3
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <HAL_RCC_ClockConfig+0x204>)
 80019fc:	0092      	lsls	r2, r2, #2
 80019fe:	58d3      	ldr	r3, [r2, r3]
 8001a00:	221f      	movs	r2, #31
 8001a02:	4013      	ands	r3, r2
 8001a04:	000a      	movs	r2, r1
 8001a06:	40da      	lsrs	r2, r3
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_RCC_ClockConfig+0x208>)
 8001a0a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_RCC_ClockConfig+0x20c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	0018      	movs	r0, r3
 8001a12:	f7ff f805 	bl	8000a20 <HAL_InitTick>
 8001a16:	0003      	movs	r3, r0
}
 8001a18:	0018      	movs	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	b004      	add	sp, #16
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40022000 	.word	0x40022000
 8001a24:	00001388 	.word	0x00001388
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	fffff0ff 	.word	0xfffff0ff
 8001a30:	ffff8fff 	.word	0xffff8fff
 8001a34:	0800430c 	.word	0x0800430c
 8001a38:	200000a0 	.word	0x200000a0
 8001a3c:	200000a4 	.word	0x200000a4

08001a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a46:	4b3c      	ldr	r3, [pc, #240]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2238      	movs	r2, #56	; 0x38
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d10f      	bne.n	8001a70 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001a50:	4b39      	ldr	r3, [pc, #228]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	0adb      	lsrs	r3, r3, #11
 8001a56:	2207      	movs	r2, #7
 8001a58:	4013      	ands	r3, r2
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	409a      	lsls	r2, r3
 8001a5e:	0013      	movs	r3, r2
 8001a60:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001a62:	6839      	ldr	r1, [r7, #0]
 8001a64:	4835      	ldr	r0, [pc, #212]	; (8001b3c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a66:	f7fe fb53 	bl	8000110 <__udivsi3>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	e05d      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a70:	4b31      	ldr	r3, [pc, #196]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2238      	movs	r2, #56	; 0x38
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a7c:	4b30      	ldr	r3, [pc, #192]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x100>)
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	e054      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a82:	4b2d      	ldr	r3, [pc, #180]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2238      	movs	r2, #56	; 0x38
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2b10      	cmp	r3, #16
 8001a8c:	d138      	bne.n	8001b00 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001a8e:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2203      	movs	r2, #3
 8001a94:	4013      	ands	r3, r2
 8001a96:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a98:	4b27      	ldr	r3, [pc, #156]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	2207      	movs	r2, #7
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d10d      	bne.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	4824      	ldr	r0, [pc, #144]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ab0:	f7fe fb2e 	bl	8000110 <__udivsi3>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	0019      	movs	r1, r3
 8001ab8:	4b1f      	ldr	r3, [pc, #124]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	227f      	movs	r2, #127	; 0x7f
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	434b      	muls	r3, r1
 8001ac4:	617b      	str	r3, [r7, #20]
        break;
 8001ac6:	e00d      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	481c      	ldr	r0, [pc, #112]	; (8001b3c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001acc:	f7fe fb20 	bl	8000110 <__udivsi3>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	0019      	movs	r1, r3
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	227f      	movs	r2, #127	; 0x7f
 8001adc:	4013      	ands	r3, r2
 8001ade:	434b      	muls	r3, r1
 8001ae0:	617b      	str	r3, [r7, #20]
        break;
 8001ae2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001ae4:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	0f5b      	lsrs	r3, r3, #29
 8001aea:	2207      	movs	r2, #7
 8001aec:	4013      	ands	r3, r2
 8001aee:	3301      	adds	r3, #1
 8001af0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	6978      	ldr	r0, [r7, #20]
 8001af6:	f7fe fb0b 	bl	8000110 <__udivsi3>
 8001afa:	0003      	movs	r3, r0
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	e015      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b00:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2238      	movs	r2, #56	; 0x38
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b20      	cmp	r3, #32
 8001b0a:	d103      	bne.n	8001b14 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	021b      	lsls	r3, r3, #8
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	e00b      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2238      	movs	r2, #56	; 0x38
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b18      	cmp	r3, #24
 8001b1e:	d103      	bne.n	8001b28 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001b20:	23fa      	movs	r3, #250	; 0xfa
 8001b22:	01db      	lsls	r3, r3, #7
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	e001      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b2c:	693b      	ldr	r3, [r7, #16]
}
 8001b2e:	0018      	movs	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	b006      	add	sp, #24
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	00f42400 	.word	0x00f42400
 8001b40:	00b71b00 	.word	0x00b71b00

08001b44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b48:	4b02      	ldr	r3, [pc, #8]	; (8001b54 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	200000a0 	.word	0x200000a0

08001b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b58:	b5b0      	push	{r4, r5, r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001b5c:	f7ff fff2 	bl	8001b44 <HAL_RCC_GetHCLKFreq>
 8001b60:	0004      	movs	r4, r0
 8001b62:	f7ff fb49 	bl	80011f8 <LL_RCC_GetAPB1Prescaler>
 8001b66:	0003      	movs	r3, r0
 8001b68:	0b1a      	lsrs	r2, r3, #12
 8001b6a:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b6c:	0092      	lsls	r2, r2, #2
 8001b6e:	58d3      	ldr	r3, [r2, r3]
 8001b70:	221f      	movs	r2, #31
 8001b72:	4013      	ands	r3, r2
 8001b74:	40dc      	lsrs	r4, r3
 8001b76:	0023      	movs	r3, r4
}
 8001b78:	0018      	movs	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	0800434c 	.word	0x0800434c

08001b84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001b8c:	2313      	movs	r3, #19
 8001b8e:	18fb      	adds	r3, r7, r3
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b94:	2312      	movs	r3, #18
 8001b96:	18fb      	adds	r3, r7, r3
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	029b      	lsls	r3, r3, #10
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d100      	bne.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001ba8:	e0a3      	b.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001baa:	2011      	movs	r0, #17
 8001bac:	183b      	adds	r3, r7, r0
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bb2:	4b86      	ldr	r3, [pc, #536]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	055b      	lsls	r3, r3, #21
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d110      	bne.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bbe:	4b83      	ldr	r3, [pc, #524]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bc2:	4b82      	ldr	r3, [pc, #520]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bc4:	2180      	movs	r1, #128	; 0x80
 8001bc6:	0549      	lsls	r1, r1, #21
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	63da      	str	r2, [r3, #60]	; 0x3c
 8001bcc:	4b7f      	ldr	r3, [pc, #508]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	055b      	lsls	r3, r3, #21
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bda:	183b      	adds	r3, r7, r0
 8001bdc:	2201      	movs	r2, #1
 8001bde:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001be0:	4b7b      	ldr	r3, [pc, #492]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b7a      	ldr	r3, [pc, #488]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001be6:	2180      	movs	r1, #128	; 0x80
 8001be8:	0049      	lsls	r1, r1, #1
 8001bea:	430a      	orrs	r2, r1
 8001bec:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001bee:	f7fe ff73 	bl	8000ad8 <HAL_GetTick>
 8001bf2:	0003      	movs	r3, r0
 8001bf4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bf6:	e00b      	b.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf8:	f7fe ff6e 	bl	8000ad8 <HAL_GetTick>
 8001bfc:	0002      	movs	r2, r0
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d904      	bls.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001c06:	2313      	movs	r3, #19
 8001c08:	18fb      	adds	r3, r7, r3
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	701a      	strb	r2, [r3, #0]
        break;
 8001c0e:	e005      	b.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c10:	4b6f      	ldr	r3, [pc, #444]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d0ed      	beq.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001c1c:	2313      	movs	r3, #19
 8001c1e:	18fb      	adds	r3, r7, r3
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d154      	bne.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c26:	4b69      	ldr	r3, [pc, #420]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c2a:	23c0      	movs	r3, #192	; 0xc0
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4013      	ands	r3, r2
 8001c30:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d019      	beq.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d014      	beq.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c42:	4b62      	ldr	r3, [pc, #392]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c46:	4a63      	ldr	r2, [pc, #396]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001c48:	4013      	ands	r3, r2
 8001c4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c4c:	4b5f      	ldr	r3, [pc, #380]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c50:	4b5e      	ldr	r3, [pc, #376]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c52:	2180      	movs	r1, #128	; 0x80
 8001c54:	0249      	lsls	r1, r1, #9
 8001c56:	430a      	orrs	r2, r1
 8001c58:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001c5a:	4b5c      	ldr	r3, [pc, #368]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c5e:	4b5b      	ldr	r3, [pc, #364]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c60:	495d      	ldr	r1, [pc, #372]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001c62:	400a      	ands	r2, r1
 8001c64:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001c66:	4b59      	ldr	r3, [pc, #356]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4013      	ands	r3, r2
 8001c72:	d016      	beq.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c74:	f7fe ff30 	bl	8000ad8 <HAL_GetTick>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c7c:	e00c      	b.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c7e:	f7fe ff2b 	bl	8000ad8 <HAL_GetTick>
 8001c82:	0002      	movs	r2, r0
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	4a54      	ldr	r2, [pc, #336]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d904      	bls.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001c8e:	2313      	movs	r3, #19
 8001c90:	18fb      	adds	r3, r7, r3
 8001c92:	2203      	movs	r2, #3
 8001c94:	701a      	strb	r2, [r3, #0]
            break;
 8001c96:	e004      	b.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c98:	4b4c      	ldr	r3, [pc, #304]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d0ed      	beq.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001ca2:	2313      	movs	r3, #19
 8001ca4:	18fb      	adds	r3, r7, r3
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10a      	bne.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cac:	4b47      	ldr	r3, [pc, #284]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb0:	4a48      	ldr	r2, [pc, #288]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	0019      	movs	r1, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	699a      	ldr	r2, [r3, #24]
 8001cba:	4b44      	ldr	r3, [pc, #272]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cc0:	e00c      	b.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001cc2:	2312      	movs	r3, #18
 8001cc4:	18fb      	adds	r3, r7, r3
 8001cc6:	2213      	movs	r2, #19
 8001cc8:	18ba      	adds	r2, r7, r2
 8001cca:	7812      	ldrb	r2, [r2, #0]
 8001ccc:	701a      	strb	r2, [r3, #0]
 8001cce:	e005      	b.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001cd0:	2312      	movs	r3, #18
 8001cd2:	18fb      	adds	r3, r7, r3
 8001cd4:	2213      	movs	r2, #19
 8001cd6:	18ba      	adds	r2, r7, r2
 8001cd8:	7812      	ldrb	r2, [r2, #0]
 8001cda:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cdc:	2311      	movs	r3, #17
 8001cde:	18fb      	adds	r3, r7, r3
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d105      	bne.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce6:	4b39      	ldr	r3, [pc, #228]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ce8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cea:	4b38      	ldr	r3, [pc, #224]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cec:	493c      	ldr	r1, [pc, #240]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001cee:	400a      	ands	r2, r1
 8001cf0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d009      	beq.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cfc:	4b33      	ldr	r3, [pc, #204]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d00:	2203      	movs	r2, #3
 8001d02:	4393      	bics	r3, r2
 8001d04:	0019      	movs	r1, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	4b30      	ldr	r3, [pc, #192]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2202      	movs	r2, #2
 8001d16:	4013      	ands	r3, r2
 8001d18:	d009      	beq.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d1a:	4b2c      	ldr	r3, [pc, #176]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1e:	220c      	movs	r2, #12
 8001d20:	4393      	bics	r3, r2
 8001d22:	0019      	movs	r1, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	4b28      	ldr	r3, [pc, #160]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2220      	movs	r2, #32
 8001d34:	4013      	ands	r3, r2
 8001d36:	d009      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d38:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3c:	4a29      	ldr	r2, [pc, #164]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	0019      	movs	r1, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	01db      	lsls	r3, r3, #7
 8001d54:	4013      	ands	r3, r2
 8001d56:	d015      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d58:	4b1c      	ldr	r3, [pc, #112]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	0899      	lsrs	r1, r3, #2
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	695a      	ldr	r2, [r3, #20]
 8001d64:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d66:	430a      	orrs	r2, r1
 8001d68:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695a      	ldr	r2, [r3, #20]
 8001d6e:	2380      	movs	r3, #128	; 0x80
 8001d70:	05db      	lsls	r3, r3, #23
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d106      	bne.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d7c:	2180      	movs	r1, #128	; 0x80
 8001d7e:	0249      	lsls	r1, r1, #9
 8001d80:	430a      	orrs	r2, r1
 8001d82:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	2380      	movs	r3, #128	; 0x80
 8001d8a:	011b      	lsls	r3, r3, #4
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d016      	beq.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001d90:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d94:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	0019      	movs	r1, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691a      	ldr	r2, [r3, #16]
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001da0:	430a      	orrs	r2, r1
 8001da2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691a      	ldr	r2, [r3, #16]
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	01db      	lsls	r3, r3, #7
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d106      	bne.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001db6:	2180      	movs	r1, #128	; 0x80
 8001db8:	0249      	lsls	r1, r1, #9
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001dbe:	2312      	movs	r3, #18
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	781b      	ldrb	r3, [r3, #0]
}
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b006      	add	sp, #24
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40007000 	.word	0x40007000
 8001dd4:	fffffcff 	.word	0xfffffcff
 8001dd8:	fffeffff 	.word	0xfffeffff
 8001ddc:	00001388 	.word	0x00001388
 8001de0:	efffffff 	.word	0xefffffff
 8001de4:	ffffcfff 	.word	0xffffcfff
 8001de8:	ffff3fff 	.word	0xffff3fff

08001dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e04a      	b.n	8001e94 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	223d      	movs	r2, #61	; 0x3d
 8001e02:	5c9b      	ldrb	r3, [r3, r2]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d107      	bne.n	8001e1a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	223c      	movs	r2, #60	; 0x3c
 8001e0e:	2100      	movs	r1, #0
 8001e10:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	0018      	movs	r0, r3
 8001e16:	f7fe fcdd 	bl	80007d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	223d      	movs	r2, #61	; 0x3d
 8001e1e:	2102      	movs	r1, #2
 8001e20:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	0010      	movs	r0, r2
 8001e2e:	f000 f9e5 	bl	80021fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2248      	movs	r2, #72	; 0x48
 8001e36:	2101      	movs	r1, #1
 8001e38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	223e      	movs	r2, #62	; 0x3e
 8001e3e:	2101      	movs	r1, #1
 8001e40:	5499      	strb	r1, [r3, r2]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	223f      	movs	r2, #63	; 0x3f
 8001e46:	2101      	movs	r1, #1
 8001e48:	5499      	strb	r1, [r3, r2]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2240      	movs	r2, #64	; 0x40
 8001e4e:	2101      	movs	r1, #1
 8001e50:	5499      	strb	r1, [r3, r2]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2241      	movs	r2, #65	; 0x41
 8001e56:	2101      	movs	r1, #1
 8001e58:	5499      	strb	r1, [r3, r2]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2242      	movs	r2, #66	; 0x42
 8001e5e:	2101      	movs	r1, #1
 8001e60:	5499      	strb	r1, [r3, r2]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2243      	movs	r2, #67	; 0x43
 8001e66:	2101      	movs	r1, #1
 8001e68:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2244      	movs	r2, #68	; 0x44
 8001e6e:	2101      	movs	r1, #1
 8001e70:	5499      	strb	r1, [r3, r2]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2245      	movs	r2, #69	; 0x45
 8001e76:	2101      	movs	r1, #1
 8001e78:	5499      	strb	r1, [r3, r2]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2246      	movs	r2, #70	; 0x46
 8001e7e:	2101      	movs	r1, #1
 8001e80:	5499      	strb	r1, [r3, r2]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2247      	movs	r2, #71	; 0x47
 8001e86:	2101      	movs	r1, #1
 8001e88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	223d      	movs	r2, #61	; 0x3d
 8001e8e:	2101      	movs	r1, #1
 8001e90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	0018      	movs	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	b002      	add	sp, #8
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	223d      	movs	r2, #61	; 0x3d
 8001ea8:	5c9b      	ldrb	r3, [r3, r2]
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d001      	beq.n	8001eb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e03c      	b.n	8001f2e <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	223d      	movs	r2, #61	; 0x3d
 8001eb8:	2102      	movs	r1, #2
 8001eba:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a19      	ldr	r2, [pc, #100]	; (8001f38 <HAL_TIM_Base_Start_IT+0x9c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d009      	beq.n	8001eea <HAL_TIM_Base_Start_IT+0x4e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a18      	ldr	r2, [pc, #96]	; (8001f3c <HAL_TIM_Base_Start_IT+0xa0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d004      	beq.n	8001eea <HAL_TIM_Base_Start_IT+0x4e>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a16      	ldr	r2, [pc, #88]	; (8001f40 <HAL_TIM_Base_Start_IT+0xa4>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d116      	bne.n	8001f18 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	4a14      	ldr	r2, [pc, #80]	; (8001f44 <HAL_TIM_Base_Start_IT+0xa8>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b06      	cmp	r3, #6
 8001efa:	d016      	beq.n	8001f2a <HAL_TIM_Base_Start_IT+0x8e>
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	025b      	lsls	r3, r3, #9
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d011      	beq.n	8001f2a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2101      	movs	r1, #1
 8001f12:	430a      	orrs	r2, r1
 8001f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f16:	e008      	b.n	8001f2a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2101      	movs	r1, #1
 8001f24:	430a      	orrs	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	e000      	b.n	8001f2c <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f2a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	0018      	movs	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b004      	add	sp, #16
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	40012c00 	.word	0x40012c00
 8001f3c:	40000400 	.word	0x40000400
 8001f40:	40014000 	.word	0x40014000
 8001f44:	00010007 	.word	0x00010007

08001f48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	2202      	movs	r2, #2
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d124      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	2202      	movs	r2, #2
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d11d      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2203      	movs	r2, #3
 8001f72:	4252      	negs	r2, r2
 8001f74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	2203      	movs	r2, #3
 8001f84:	4013      	ands	r3, r2
 8001f86:	d004      	beq.n	8001f92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f000 f91e 	bl	80021cc <HAL_TIM_IC_CaptureCallback>
 8001f90:	e007      	b.n	8001fa2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	0018      	movs	r0, r3
 8001f96:	f000 f911 	bl	80021bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f000 f91d 	bl	80021dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	2204      	movs	r2, #4
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d125      	bne.n	8002002 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2204      	movs	r2, #4
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d11e      	bne.n	8002002 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2205      	movs	r2, #5
 8001fca:	4252      	negs	r2, r2
 8001fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699a      	ldr	r2, [r3, #24]
 8001fda:	23c0      	movs	r3, #192	; 0xc0
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d004      	beq.n	8001fec <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f000 f8f1 	bl	80021cc <HAL_TIM_IC_CaptureCallback>
 8001fea:	e007      	b.n	8001ffc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f000 f8e4 	bl	80021bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f000 f8f0 	bl	80021dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	2208      	movs	r2, #8
 800200a:	4013      	ands	r3, r2
 800200c:	2b08      	cmp	r3, #8
 800200e:	d124      	bne.n	800205a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	2208      	movs	r2, #8
 8002018:	4013      	ands	r3, r2
 800201a:	2b08      	cmp	r3, #8
 800201c:	d11d      	bne.n	800205a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2209      	movs	r2, #9
 8002024:	4252      	negs	r2, r2
 8002026:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2204      	movs	r2, #4
 800202c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	2203      	movs	r2, #3
 8002036:	4013      	ands	r3, r2
 8002038:	d004      	beq.n	8002044 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	0018      	movs	r0, r3
 800203e:	f000 f8c5 	bl	80021cc <HAL_TIM_IC_CaptureCallback>
 8002042:	e007      	b.n	8002054 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	0018      	movs	r0, r3
 8002048:	f000 f8b8 	bl	80021bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	0018      	movs	r0, r3
 8002050:	f000 f8c4 	bl	80021dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	2210      	movs	r2, #16
 8002062:	4013      	ands	r3, r2
 8002064:	2b10      	cmp	r3, #16
 8002066:	d125      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	2210      	movs	r2, #16
 8002070:	4013      	ands	r3, r2
 8002072:	2b10      	cmp	r3, #16
 8002074:	d11e      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2211      	movs	r2, #17
 800207c:	4252      	negs	r2, r2
 800207e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2208      	movs	r2, #8
 8002084:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	69da      	ldr	r2, [r3, #28]
 800208c:	23c0      	movs	r3, #192	; 0xc0
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4013      	ands	r3, r2
 8002092:	d004      	beq.n	800209e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	0018      	movs	r0, r3
 8002098:	f000 f898 	bl	80021cc <HAL_TIM_IC_CaptureCallback>
 800209c:	e007      	b.n	80020ae <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	0018      	movs	r0, r3
 80020a2:	f000 f88b 	bl	80021bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	0018      	movs	r0, r3
 80020aa:	f000 f897 	bl	80021dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	2201      	movs	r2, #1
 80020bc:	4013      	ands	r3, r2
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d10f      	bne.n	80020e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	2201      	movs	r2, #1
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d108      	bne.n	80020e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2202      	movs	r2, #2
 80020d6:	4252      	negs	r2, r2
 80020d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	0018      	movs	r0, r3
 80020de:	f000 f865 	bl	80021ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	2280      	movs	r2, #128	; 0x80
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b80      	cmp	r3, #128	; 0x80
 80020ee:	d10f      	bne.n	8002110 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	2280      	movs	r2, #128	; 0x80
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b80      	cmp	r3, #128	; 0x80
 80020fc:	d108      	bne.n	8002110 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2281      	movs	r2, #129	; 0x81
 8002104:	4252      	negs	r2, r2
 8002106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	0018      	movs	r0, r3
 800210c:	f000 f95c 	bl	80023c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691a      	ldr	r2, [r3, #16]
 8002116:	2380      	movs	r3, #128	; 0x80
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	401a      	ands	r2, r3
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	429a      	cmp	r2, r3
 8002122:	d10e      	bne.n	8002142 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	2280      	movs	r2, #128	; 0x80
 800212c:	4013      	ands	r3, r2
 800212e:	2b80      	cmp	r3, #128	; 0x80
 8002130:	d107      	bne.n	8002142 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a1c      	ldr	r2, [pc, #112]	; (80021a8 <HAL_TIM_IRQHandler+0x260>)
 8002138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	0018      	movs	r0, r3
 800213e:	f000 f94b 	bl	80023d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	2240      	movs	r2, #64	; 0x40
 800214a:	4013      	ands	r3, r2
 800214c:	2b40      	cmp	r3, #64	; 0x40
 800214e:	d10f      	bne.n	8002170 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	2240      	movs	r2, #64	; 0x40
 8002158:	4013      	ands	r3, r2
 800215a:	2b40      	cmp	r3, #64	; 0x40
 800215c:	d108      	bne.n	8002170 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2241      	movs	r2, #65	; 0x41
 8002164:	4252      	negs	r2, r2
 8002166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	0018      	movs	r0, r3
 800216c:	f000 f83e 	bl	80021ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	2220      	movs	r2, #32
 8002178:	4013      	ands	r3, r2
 800217a:	2b20      	cmp	r3, #32
 800217c:	d10f      	bne.n	800219e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	2220      	movs	r2, #32
 8002186:	4013      	ands	r3, r2
 8002188:	2b20      	cmp	r3, #32
 800218a:	d108      	bne.n	800219e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2221      	movs	r2, #33	; 0x21
 8002192:	4252      	negs	r2, r2
 8002194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	0018      	movs	r0, r3
 800219a:	f000 f90d 	bl	80023b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	46bd      	mov	sp, r7
 80021a2:	b002      	add	sp, #8
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	fffffeff 	.word	0xfffffeff

080021ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80021b4:	46c0      	nop			; (mov r8, r8)
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b002      	add	sp, #8
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021c4:	46c0      	nop			; (mov r8, r8)
 80021c6:	46bd      	mov	sp, r7
 80021c8:	b002      	add	sp, #8
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021d4:	46c0      	nop			; (mov r8, r8)
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b002      	add	sp, #8
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021e4:	46c0      	nop			; (mov r8, r8)
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b002      	add	sp, #8
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021f4:	46c0      	nop			; (mov r8, r8)
 80021f6:	46bd      	mov	sp, r7
 80021f8:	b002      	add	sp, #8
 80021fa:	bd80      	pop	{r7, pc}

080021fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a2f      	ldr	r2, [pc, #188]	; (80022cc <TIM_Base_SetConfig+0xd0>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d003      	beq.n	800221c <TIM_Base_SetConfig+0x20>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a2e      	ldr	r2, [pc, #184]	; (80022d0 <TIM_Base_SetConfig+0xd4>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d108      	bne.n	800222e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2270      	movs	r2, #112	; 0x70
 8002220:	4393      	bics	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a26      	ldr	r2, [pc, #152]	; (80022cc <TIM_Base_SetConfig+0xd0>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d013      	beq.n	800225e <TIM_Base_SetConfig+0x62>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a25      	ldr	r2, [pc, #148]	; (80022d0 <TIM_Base_SetConfig+0xd4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00f      	beq.n	800225e <TIM_Base_SetConfig+0x62>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a24      	ldr	r2, [pc, #144]	; (80022d4 <TIM_Base_SetConfig+0xd8>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d00b      	beq.n	800225e <TIM_Base_SetConfig+0x62>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a23      	ldr	r2, [pc, #140]	; (80022d8 <TIM_Base_SetConfig+0xdc>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d007      	beq.n	800225e <TIM_Base_SetConfig+0x62>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a22      	ldr	r2, [pc, #136]	; (80022dc <TIM_Base_SetConfig+0xe0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d003      	beq.n	800225e <TIM_Base_SetConfig+0x62>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a21      	ldr	r2, [pc, #132]	; (80022e0 <TIM_Base_SetConfig+0xe4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d108      	bne.n	8002270 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	4a20      	ldr	r2, [pc, #128]	; (80022e4 <TIM_Base_SetConfig+0xe8>)
 8002262:	4013      	ands	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	4313      	orrs	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2280      	movs	r2, #128	; 0x80
 8002274:	4393      	bics	r3, r2
 8002276:	001a      	movs	r2, r3
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	4313      	orrs	r3, r2
 800227e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a0c      	ldr	r2, [pc, #48]	; (80022cc <TIM_Base_SetConfig+0xd0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d00b      	beq.n	80022b6 <TIM_Base_SetConfig+0xba>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a0d      	ldr	r2, [pc, #52]	; (80022d8 <TIM_Base_SetConfig+0xdc>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d007      	beq.n	80022b6 <TIM_Base_SetConfig+0xba>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a0c      	ldr	r2, [pc, #48]	; (80022dc <TIM_Base_SetConfig+0xe0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d003      	beq.n	80022b6 <TIM_Base_SetConfig+0xba>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a0b      	ldr	r2, [pc, #44]	; (80022e0 <TIM_Base_SetConfig+0xe4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d103      	bne.n	80022be <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	691a      	ldr	r2, [r3, #16]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	615a      	str	r2, [r3, #20]
}
 80022c4:	46c0      	nop			; (mov r8, r8)
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b004      	add	sp, #16
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40012c00 	.word	0x40012c00
 80022d0:	40000400 	.word	0x40000400
 80022d4:	40002000 	.word	0x40002000
 80022d8:	40014000 	.word	0x40014000
 80022dc:	40014400 	.word	0x40014400
 80022e0:	40014800 	.word	0x40014800
 80022e4:	fffffcff 	.word	0xfffffcff

080022e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	223c      	movs	r2, #60	; 0x3c
 80022f6:	5c9b      	ldrb	r3, [r3, r2]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e04f      	b.n	80023a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	223c      	movs	r2, #60	; 0x3c
 8002304:	2101      	movs	r1, #1
 8002306:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	223d      	movs	r2, #61	; 0x3d
 800230c:	2102      	movs	r1, #2
 800230e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a20      	ldr	r2, [pc, #128]	; (80023a8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d108      	bne.n	800233c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4a1f      	ldr	r2, [pc, #124]	; (80023ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800232e:	4013      	ands	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	4313      	orrs	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2270      	movs	r2, #112	; 0x70
 8002340:	4393      	bics	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	4313      	orrs	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a13      	ldr	r2, [pc, #76]	; (80023a8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d009      	beq.n	8002374 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d004      	beq.n	8002374 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a11      	ldr	r2, [pc, #68]	; (80023b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d10c      	bne.n	800238e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2280      	movs	r2, #128	; 0x80
 8002378:	4393      	bics	r3, r2
 800237a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	4313      	orrs	r3, r2
 8002384:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	223d      	movs	r2, #61	; 0x3d
 8002392:	2101      	movs	r1, #1
 8002394:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	223c      	movs	r2, #60	; 0x3c
 800239a:	2100      	movs	r1, #0
 800239c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	0018      	movs	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b004      	add	sp, #16
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40012c00 	.word	0x40012c00
 80023ac:	ff0fffff 	.word	0xff0fffff
 80023b0:	40000400 	.word	0x40000400
 80023b4:	40014000 	.word	0x40014000

080023b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023c0:	46c0      	nop			; (mov r8, r8)
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b002      	add	sp, #8
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023d0:	46c0      	nop			; (mov r8, r8)
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b002      	add	sp, #8
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80023e0:	46c0      	nop			; (mov r8, r8)
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b002      	add	sp, #8
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e046      	b.n	8002488 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2288      	movs	r2, #136	; 0x88
 80023fe:	589b      	ldr	r3, [r3, r2]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d107      	bne.n	8002414 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2284      	movs	r2, #132	; 0x84
 8002408:	2100      	movs	r1, #0
 800240a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	0018      	movs	r0, r3
 8002410:	f7fe fa54 	bl	80008bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2288      	movs	r2, #136	; 0x88
 8002418:	2124      	movs	r1, #36	; 0x24
 800241a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2101      	movs	r1, #1
 8002428:	438a      	bics	r2, r1
 800242a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	0018      	movs	r0, r3
 8002430:	f000 fc66 	bl	8002d00 <UART_SetConfig>
 8002434:	0003      	movs	r3, r0
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e024      	b.n	8002488 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	0018      	movs	r0, r3
 800244a:	f000 fdfd 	bl	8003048 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	490d      	ldr	r1, [pc, #52]	; (8002490 <HAL_UART_Init+0xa8>)
 800245a:	400a      	ands	r2, r1
 800245c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	212a      	movs	r1, #42	; 0x2a
 800246a:	438a      	bics	r2, r1
 800246c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2101      	movs	r1, #1
 800247a:	430a      	orrs	r2, r1
 800247c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	0018      	movs	r0, r3
 8002482:	f000 fe95 	bl	80031b0 <UART_CheckIdleState>
 8002486:	0003      	movs	r3, r0
}
 8002488:	0018      	movs	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	b002      	add	sp, #8
 800248e:	bd80      	pop	{r7, pc}
 8002490:	ffffb7ff 	.word	0xffffb7ff

08002494 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08a      	sub	sp, #40	; 0x28
 8002498:	af02      	add	r7, sp, #8
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	1dbb      	adds	r3, r7, #6
 80024a2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2288      	movs	r2, #136	; 0x88
 80024a8:	589b      	ldr	r3, [r3, r2]
 80024aa:	2b20      	cmp	r3, #32
 80024ac:	d000      	beq.n	80024b0 <HAL_UART_Transmit+0x1c>
 80024ae:	e088      	b.n	80025c2 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_UART_Transmit+0x2a>
 80024b6:	1dbb      	adds	r3, r7, #6
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e080      	b.n	80025c4 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	015b      	lsls	r3, r3, #5
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d109      	bne.n	80024e2 <HAL_UART_Transmit+0x4e>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d105      	bne.n	80024e2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2201      	movs	r2, #1
 80024da:	4013      	ands	r3, r2
 80024dc:	d001      	beq.n	80024e2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e070      	b.n	80025c4 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2290      	movs	r2, #144	; 0x90
 80024e6:	2100      	movs	r1, #0
 80024e8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2288      	movs	r2, #136	; 0x88
 80024ee:	2121      	movs	r1, #33	; 0x21
 80024f0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024f2:	f7fe faf1 	bl	8000ad8 <HAL_GetTick>
 80024f6:	0003      	movs	r3, r0
 80024f8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1dba      	adds	r2, r7, #6
 80024fe:	2154      	movs	r1, #84	; 0x54
 8002500:	8812      	ldrh	r2, [r2, #0]
 8002502:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1dba      	adds	r2, r7, #6
 8002508:	2156      	movs	r1, #86	; 0x56
 800250a:	8812      	ldrh	r2, [r2, #0]
 800250c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	015b      	lsls	r3, r3, #5
 8002516:	429a      	cmp	r2, r3
 8002518:	d108      	bne.n	800252c <HAL_UART_Transmit+0x98>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d104      	bne.n	800252c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	61bb      	str	r3, [r7, #24]
 800252a:	e003      	b.n	8002534 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002530:	2300      	movs	r3, #0
 8002532:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002534:	e02c      	b.n	8002590 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	0013      	movs	r3, r2
 8002540:	2200      	movs	r2, #0
 8002542:	2180      	movs	r1, #128	; 0x80
 8002544:	f000 fe82 	bl	800324c <UART_WaitOnFlagUntilTimeout>
 8002548:	1e03      	subs	r3, r0, #0
 800254a:	d001      	beq.n	8002550 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e039      	b.n	80025c4 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10b      	bne.n	800256e <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	001a      	movs	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	05d2      	lsls	r2, r2, #23
 8002562:	0dd2      	lsrs	r2, r2, #23
 8002564:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	3302      	adds	r3, #2
 800256a:	61bb      	str	r3, [r7, #24]
 800256c:	e007      	b.n	800257e <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	781a      	ldrb	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	3301      	adds	r3, #1
 800257c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2256      	movs	r2, #86	; 0x56
 8002582:	5a9b      	ldrh	r3, [r3, r2]
 8002584:	b29b      	uxth	r3, r3
 8002586:	3b01      	subs	r3, #1
 8002588:	b299      	uxth	r1, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2256      	movs	r2, #86	; 0x56
 800258e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2256      	movs	r2, #86	; 0x56
 8002594:	5a9b      	ldrh	r3, [r3, r2]
 8002596:	b29b      	uxth	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1cc      	bne.n	8002536 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	0013      	movs	r3, r2
 80025a6:	2200      	movs	r2, #0
 80025a8:	2140      	movs	r1, #64	; 0x40
 80025aa:	f000 fe4f 	bl	800324c <UART_WaitOnFlagUntilTimeout>
 80025ae:	1e03      	subs	r3, r0, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e006      	b.n	80025c4 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2288      	movs	r2, #136	; 0x88
 80025ba:	2120      	movs	r1, #32
 80025bc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	e000      	b.n	80025c4 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80025c2:	2302      	movs	r3, #2
  }
}
 80025c4:	0018      	movs	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b008      	add	sp, #32
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	1dbb      	adds	r3, r7, #6
 80025d8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	228c      	movs	r2, #140	; 0x8c
 80025de:	589b      	ldr	r3, [r3, r2]
 80025e0:	2b20      	cmp	r3, #32
 80025e2:	d145      	bne.n	8002670 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_UART_Receive_IT+0x26>
 80025ea:	1dbb      	adds	r3, r7, #6
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e03d      	b.n	8002672 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	2380      	movs	r3, #128	; 0x80
 80025fc:	015b      	lsls	r3, r3, #5
 80025fe:	429a      	cmp	r2, r3
 8002600:	d109      	bne.n	8002616 <HAL_UART_Receive_IT+0x4a>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d105      	bne.n	8002616 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2201      	movs	r2, #1
 800260e:	4013      	ands	r3, r2
 8002610:	d001      	beq.n	8002616 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e02d      	b.n	8002672 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	2380      	movs	r3, #128	; 0x80
 8002624:	041b      	lsls	r3, r3, #16
 8002626:	4013      	ands	r3, r2
 8002628:	d019      	beq.n	800265e <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800262a:	f3ef 8310 	mrs	r3, PRIMASK
 800262e:	613b      	str	r3, [r7, #16]
  return(result);
 8002630:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002632:	61fb      	str	r3, [r7, #28]
 8002634:	2301      	movs	r3, #1
 8002636:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f383 8810 	msr	PRIMASK, r3
}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2180      	movs	r1, #128	; 0x80
 800264c:	04c9      	lsls	r1, r1, #19
 800264e:	430a      	orrs	r2, r1
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	f383 8810 	msr	PRIMASK, r3
}
 800265c:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800265e:	1dbb      	adds	r3, r7, #6
 8002660:	881a      	ldrh	r2, [r3, #0]
 8002662:	68b9      	ldr	r1, [r7, #8]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	0018      	movs	r0, r3
 8002668:	f000 feb8 	bl	80033dc <UART_Start_Receive_IT>
 800266c:	0003      	movs	r3, r0
 800266e:	e000      	b.n	8002672 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002670:	2302      	movs	r3, #2
  }
}
 8002672:	0018      	movs	r0, r3
 8002674:	46bd      	mov	sp, r7
 8002676:	b008      	add	sp, #32
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800267c:	b5b0      	push	{r4, r5, r7, lr}
 800267e:	b0aa      	sub	sp, #168	; 0xa8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	22a4      	movs	r2, #164	; 0xa4
 800268c:	18b9      	adds	r1, r7, r2
 800268e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	20a0      	movs	r0, #160	; 0xa0
 8002698:	1839      	adds	r1, r7, r0
 800269a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	249c      	movs	r4, #156	; 0x9c
 80026a4:	1939      	adds	r1, r7, r4
 80026a6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80026a8:	0011      	movs	r1, r2
 80026aa:	18bb      	adds	r3, r7, r2
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4aa2      	ldr	r2, [pc, #648]	; (8002938 <HAL_UART_IRQHandler+0x2bc>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	2298      	movs	r2, #152	; 0x98
 80026b4:	18bd      	adds	r5, r7, r2
 80026b6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80026b8:	18bb      	adds	r3, r7, r2
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d11a      	bne.n	80026f6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80026c0:	187b      	adds	r3, r7, r1
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2220      	movs	r2, #32
 80026c6:	4013      	ands	r3, r2
 80026c8:	d015      	beq.n	80026f6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80026ca:	183b      	adds	r3, r7, r0
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2220      	movs	r2, #32
 80026d0:	4013      	ands	r3, r2
 80026d2:	d105      	bne.n	80026e0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80026d4:	193b      	adds	r3, r7, r4
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	055b      	lsls	r3, r3, #21
 80026dc:	4013      	ands	r3, r2
 80026de:	d00a      	beq.n	80026f6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d100      	bne.n	80026ea <HAL_UART_IRQHandler+0x6e>
 80026e8:	e2dc      	b.n	8002ca4 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	0010      	movs	r0, r2
 80026f2:	4798      	blx	r3
      }
      return;
 80026f4:	e2d6      	b.n	8002ca4 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80026f6:	2398      	movs	r3, #152	; 0x98
 80026f8:	18fb      	adds	r3, r7, r3
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d100      	bne.n	8002702 <HAL_UART_IRQHandler+0x86>
 8002700:	e122      	b.n	8002948 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002702:	239c      	movs	r3, #156	; 0x9c
 8002704:	18fb      	adds	r3, r7, r3
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a8c      	ldr	r2, [pc, #560]	; (800293c <HAL_UART_IRQHandler+0x2c0>)
 800270a:	4013      	ands	r3, r2
 800270c:	d106      	bne.n	800271c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800270e:	23a0      	movs	r3, #160	; 0xa0
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a8a      	ldr	r2, [pc, #552]	; (8002940 <HAL_UART_IRQHandler+0x2c4>)
 8002716:	4013      	ands	r3, r2
 8002718:	d100      	bne.n	800271c <HAL_UART_IRQHandler+0xa0>
 800271a:	e115      	b.n	8002948 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800271c:	23a4      	movs	r3, #164	; 0xa4
 800271e:	18fb      	adds	r3, r7, r3
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2201      	movs	r2, #1
 8002724:	4013      	ands	r3, r2
 8002726:	d012      	beq.n	800274e <HAL_UART_IRQHandler+0xd2>
 8002728:	23a0      	movs	r3, #160	; 0xa0
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	2380      	movs	r3, #128	; 0x80
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	4013      	ands	r3, r2
 8002734:	d00b      	beq.n	800274e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2201      	movs	r2, #1
 800273c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2290      	movs	r2, #144	; 0x90
 8002742:	589b      	ldr	r3, [r3, r2]
 8002744:	2201      	movs	r2, #1
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2190      	movs	r1, #144	; 0x90
 800274c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800274e:	23a4      	movs	r3, #164	; 0xa4
 8002750:	18fb      	adds	r3, r7, r3
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2202      	movs	r2, #2
 8002756:	4013      	ands	r3, r2
 8002758:	d011      	beq.n	800277e <HAL_UART_IRQHandler+0x102>
 800275a:	239c      	movs	r3, #156	; 0x9c
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2201      	movs	r2, #1
 8002762:	4013      	ands	r3, r2
 8002764:	d00b      	beq.n	800277e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2202      	movs	r2, #2
 800276c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2290      	movs	r2, #144	; 0x90
 8002772:	589b      	ldr	r3, [r3, r2]
 8002774:	2204      	movs	r2, #4
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2190      	movs	r1, #144	; 0x90
 800277c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800277e:	23a4      	movs	r3, #164	; 0xa4
 8002780:	18fb      	adds	r3, r7, r3
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2204      	movs	r2, #4
 8002786:	4013      	ands	r3, r2
 8002788:	d011      	beq.n	80027ae <HAL_UART_IRQHandler+0x132>
 800278a:	239c      	movs	r3, #156	; 0x9c
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2201      	movs	r2, #1
 8002792:	4013      	ands	r3, r2
 8002794:	d00b      	beq.n	80027ae <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2204      	movs	r2, #4
 800279c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2290      	movs	r2, #144	; 0x90
 80027a2:	589b      	ldr	r3, [r3, r2]
 80027a4:	2202      	movs	r2, #2
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2190      	movs	r1, #144	; 0x90
 80027ac:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80027ae:	23a4      	movs	r3, #164	; 0xa4
 80027b0:	18fb      	adds	r3, r7, r3
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2208      	movs	r2, #8
 80027b6:	4013      	ands	r3, r2
 80027b8:	d017      	beq.n	80027ea <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80027ba:	23a0      	movs	r3, #160	; 0xa0
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2220      	movs	r2, #32
 80027c2:	4013      	ands	r3, r2
 80027c4:	d105      	bne.n	80027d2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80027c6:	239c      	movs	r3, #156	; 0x9c
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a5b      	ldr	r2, [pc, #364]	; (800293c <HAL_UART_IRQHandler+0x2c0>)
 80027ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80027d0:	d00b      	beq.n	80027ea <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2208      	movs	r2, #8
 80027d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2290      	movs	r2, #144	; 0x90
 80027de:	589b      	ldr	r3, [r3, r2]
 80027e0:	2208      	movs	r2, #8
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2190      	movs	r1, #144	; 0x90
 80027e8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80027ea:	23a4      	movs	r3, #164	; 0xa4
 80027ec:	18fb      	adds	r3, r7, r3
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	2380      	movs	r3, #128	; 0x80
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	4013      	ands	r3, r2
 80027f6:	d013      	beq.n	8002820 <HAL_UART_IRQHandler+0x1a4>
 80027f8:	23a0      	movs	r3, #160	; 0xa0
 80027fa:	18fb      	adds	r3, r7, r3
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	2380      	movs	r3, #128	; 0x80
 8002800:	04db      	lsls	r3, r3, #19
 8002802:	4013      	ands	r3, r2
 8002804:	d00c      	beq.n	8002820 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2280      	movs	r2, #128	; 0x80
 800280c:	0112      	lsls	r2, r2, #4
 800280e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2290      	movs	r2, #144	; 0x90
 8002814:	589b      	ldr	r3, [r3, r2]
 8002816:	2220      	movs	r2, #32
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2190      	movs	r1, #144	; 0x90
 800281e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2290      	movs	r2, #144	; 0x90
 8002824:	589b      	ldr	r3, [r3, r2]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d100      	bne.n	800282c <HAL_UART_IRQHandler+0x1b0>
 800282a:	e23d      	b.n	8002ca8 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800282c:	23a4      	movs	r3, #164	; 0xa4
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2220      	movs	r2, #32
 8002834:	4013      	ands	r3, r2
 8002836:	d015      	beq.n	8002864 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002838:	23a0      	movs	r3, #160	; 0xa0
 800283a:	18fb      	adds	r3, r7, r3
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2220      	movs	r2, #32
 8002840:	4013      	ands	r3, r2
 8002842:	d106      	bne.n	8002852 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002844:	239c      	movs	r3, #156	; 0x9c
 8002846:	18fb      	adds	r3, r7, r3
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	055b      	lsls	r3, r3, #21
 800284e:	4013      	ands	r3, r2
 8002850:	d008      	beq.n	8002864 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002856:	2b00      	cmp	r3, #0
 8002858:	d004      	beq.n	8002864 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	0010      	movs	r0, r2
 8002862:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2290      	movs	r2, #144	; 0x90
 8002868:	589b      	ldr	r3, [r3, r2]
 800286a:	2194      	movs	r1, #148	; 0x94
 800286c:	187a      	adds	r2, r7, r1
 800286e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2240      	movs	r2, #64	; 0x40
 8002878:	4013      	ands	r3, r2
 800287a:	2b40      	cmp	r3, #64	; 0x40
 800287c:	d004      	beq.n	8002888 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800287e:	187b      	adds	r3, r7, r1
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2228      	movs	r2, #40	; 0x28
 8002884:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002886:	d04c      	beq.n	8002922 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	0018      	movs	r0, r3
 800288c:	f000 feca 	bl	8003624 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2240      	movs	r2, #64	; 0x40
 8002898:	4013      	ands	r3, r2
 800289a:	2b40      	cmp	r3, #64	; 0x40
 800289c:	d13c      	bne.n	8002918 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800289e:	f3ef 8310 	mrs	r3, PRIMASK
 80028a2:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80028a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028a6:	2090      	movs	r0, #144	; 0x90
 80028a8:	183a      	adds	r2, r7, r0
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	2301      	movs	r3, #1
 80028ae:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028b2:	f383 8810 	msr	PRIMASK, r3
}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2140      	movs	r1, #64	; 0x40
 80028c4:	438a      	bics	r2, r1
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	183b      	adds	r3, r7, r0
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028d0:	f383 8810 	msr	PRIMASK, r3
}
 80028d4:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2280      	movs	r2, #128	; 0x80
 80028da:	589b      	ldr	r3, [r3, r2]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d016      	beq.n	800290e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2280      	movs	r2, #128	; 0x80
 80028e4:	589b      	ldr	r3, [r3, r2]
 80028e6:	4a17      	ldr	r2, [pc, #92]	; (8002944 <HAL_UART_IRQHandler+0x2c8>)
 80028e8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2280      	movs	r2, #128	; 0x80
 80028ee:	589b      	ldr	r3, [r3, r2]
 80028f0:	0018      	movs	r0, r3
 80028f2:	f7fe fa3b 	bl	8000d6c <HAL_DMA_Abort_IT>
 80028f6:	1e03      	subs	r3, r0, #0
 80028f8:	d01c      	beq.n	8002934 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2280      	movs	r2, #128	; 0x80
 80028fe:	589b      	ldr	r3, [r3, r2]
 8002900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	2180      	movs	r1, #128	; 0x80
 8002906:	5852      	ldr	r2, [r2, r1]
 8002908:	0010      	movs	r0, r2
 800290a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800290c:	e012      	b.n	8002934 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	0018      	movs	r0, r3
 8002912:	f000 f9e1 	bl	8002cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002916:	e00d      	b.n	8002934 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	0018      	movs	r0, r3
 800291c:	f000 f9dc 	bl	8002cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002920:	e008      	b.n	8002934 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	0018      	movs	r0, r3
 8002926:	f000 f9d7 	bl	8002cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2290      	movs	r2, #144	; 0x90
 800292e:	2100      	movs	r1, #0
 8002930:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002932:	e1b9      	b.n	8002ca8 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002934:	46c0      	nop			; (mov r8, r8)
    return;
 8002936:	e1b7      	b.n	8002ca8 <HAL_UART_IRQHandler+0x62c>
 8002938:	0000080f 	.word	0x0000080f
 800293c:	10000001 	.word	0x10000001
 8002940:	04000120 	.word	0x04000120
 8002944:	080036f1 	.word	0x080036f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800294c:	2b01      	cmp	r3, #1
 800294e:	d000      	beq.n	8002952 <HAL_UART_IRQHandler+0x2d6>
 8002950:	e13e      	b.n	8002bd0 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002952:	23a4      	movs	r3, #164	; 0xa4
 8002954:	18fb      	adds	r3, r7, r3
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2210      	movs	r2, #16
 800295a:	4013      	ands	r3, r2
 800295c:	d100      	bne.n	8002960 <HAL_UART_IRQHandler+0x2e4>
 800295e:	e137      	b.n	8002bd0 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002960:	23a0      	movs	r3, #160	; 0xa0
 8002962:	18fb      	adds	r3, r7, r3
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2210      	movs	r2, #16
 8002968:	4013      	ands	r3, r2
 800296a:	d100      	bne.n	800296e <HAL_UART_IRQHandler+0x2f2>
 800296c:	e130      	b.n	8002bd0 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2210      	movs	r2, #16
 8002974:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2240      	movs	r2, #64	; 0x40
 800297e:	4013      	ands	r3, r2
 8002980:	2b40      	cmp	r3, #64	; 0x40
 8002982:	d000      	beq.n	8002986 <HAL_UART_IRQHandler+0x30a>
 8002984:	e0a4      	b.n	8002ad0 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2280      	movs	r2, #128	; 0x80
 800298a:	589b      	ldr	r3, [r3, r2]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	217e      	movs	r1, #126	; 0x7e
 8002992:	187b      	adds	r3, r7, r1
 8002994:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002996:	187b      	adds	r3, r7, r1
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d100      	bne.n	80029a0 <HAL_UART_IRQHandler+0x324>
 800299e:	e185      	b.n	8002cac <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	225c      	movs	r2, #92	; 0x5c
 80029a4:	5a9b      	ldrh	r3, [r3, r2]
 80029a6:	187a      	adds	r2, r7, r1
 80029a8:	8812      	ldrh	r2, [r2, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d300      	bcc.n	80029b0 <HAL_UART_IRQHandler+0x334>
 80029ae:	e17d      	b.n	8002cac <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	187a      	adds	r2, r7, r1
 80029b4:	215e      	movs	r1, #94	; 0x5e
 80029b6:	8812      	ldrh	r2, [r2, #0]
 80029b8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2280      	movs	r2, #128	; 0x80
 80029be:	589b      	ldr	r3, [r3, r2]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2220      	movs	r2, #32
 80029c6:	4013      	ands	r3, r2
 80029c8:	d170      	bne.n	8002aac <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029ca:	f3ef 8310 	mrs	r3, PRIMASK
 80029ce:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80029d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80029d4:	2301      	movs	r3, #1
 80029d6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029da:	f383 8810 	msr	PRIMASK, r3
}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	49b4      	ldr	r1, [pc, #720]	; (8002cbc <HAL_UART_IRQHandler+0x640>)
 80029ec:	400a      	ands	r2, r1
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029f2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f6:	f383 8810 	msr	PRIMASK, r3
}
 80029fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002a00:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a04:	677b      	str	r3, [r7, #116]	; 0x74
 8002a06:	2301      	movs	r3, #1
 8002a08:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a0c:	f383 8810 	msr	PRIMASK, r3
}
 8002a10:	46c0      	nop			; (mov r8, r8)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	438a      	bics	r2, r1
 8002a20:	609a      	str	r2, [r3, #8]
 8002a22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a24:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a28:	f383 8810 	msr	PRIMASK, r3
}
 8002a2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a32:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a36:	673b      	str	r3, [r7, #112]	; 0x70
 8002a38:	2301      	movs	r3, #1
 8002a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a3e:	f383 8810 	msr	PRIMASK, r3
}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2140      	movs	r1, #64	; 0x40
 8002a50:	438a      	bics	r2, r1
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a56:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a5a:	f383 8810 	msr	PRIMASK, r3
}
 8002a5e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	228c      	movs	r2, #140	; 0x8c
 8002a64:	2120      	movs	r1, #32
 8002a66:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a72:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a78:	2301      	movs	r3, #1
 8002a7a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a7e:	f383 8810 	msr	PRIMASK, r3
}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2110      	movs	r1, #16
 8002a90:	438a      	bics	r2, r1
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a96:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a9a:	f383 8810 	msr	PRIMASK, r3
}
 8002a9e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2280      	movs	r2, #128	; 0x80
 8002aa4:	589b      	ldr	r3, [r3, r2]
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f7fe f8fe 	bl	8000ca8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	225c      	movs	r2, #92	; 0x5c
 8002ab6:	5a9a      	ldrh	r2, [r3, r2]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	215e      	movs	r1, #94	; 0x5e
 8002abc:	5a5b      	ldrh	r3, [r3, r1]
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	0011      	movs	r1, r2
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f000 f90d 	bl	8002ce8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ace:	e0ed      	b.n	8002cac <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	225c      	movs	r2, #92	; 0x5c
 8002ad4:	5a99      	ldrh	r1, [r3, r2]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	225e      	movs	r2, #94	; 0x5e
 8002ada:	5a9b      	ldrh	r3, [r3, r2]
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	208e      	movs	r0, #142	; 0x8e
 8002ae0:	183b      	adds	r3, r7, r0
 8002ae2:	1a8a      	subs	r2, r1, r2
 8002ae4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	225e      	movs	r2, #94	; 0x5e
 8002aea:	5a9b      	ldrh	r3, [r3, r2]
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d100      	bne.n	8002af4 <HAL_UART_IRQHandler+0x478>
 8002af2:	e0dd      	b.n	8002cb0 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002af4:	183b      	adds	r3, r7, r0
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d100      	bne.n	8002afe <HAL_UART_IRQHandler+0x482>
 8002afc:	e0d8      	b.n	8002cb0 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002afe:	f3ef 8310 	mrs	r3, PRIMASK
 8002b02:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b04:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002b06:	2488      	movs	r4, #136	; 0x88
 8002b08:	193a      	adds	r2, r7, r4
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	f383 8810 	msr	PRIMASK, r3
}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4967      	ldr	r1, [pc, #412]	; (8002cc0 <HAL_UART_IRQHandler+0x644>)
 8002b24:	400a      	ands	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	193b      	adds	r3, r7, r4
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f383 8810 	msr	PRIMASK, r3
}
 8002b34:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b36:	f3ef 8310 	mrs	r3, PRIMASK
 8002b3a:	61bb      	str	r3, [r7, #24]
  return(result);
 8002b3c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002b3e:	2484      	movs	r4, #132	; 0x84
 8002b40:	193a      	adds	r2, r7, r4
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	2301      	movs	r3, #1
 8002b46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f383 8810 	msr	PRIMASK, r3
}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	495a      	ldr	r1, [pc, #360]	; (8002cc4 <HAL_UART_IRQHandler+0x648>)
 8002b5c:	400a      	ands	r2, r1
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	193b      	adds	r3, r7, r4
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	f383 8810 	msr	PRIMASK, r3
}
 8002b6c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	228c      	movs	r2, #140	; 0x8c
 8002b72:	2120      	movs	r1, #32
 8002b74:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b82:	f3ef 8310 	mrs	r3, PRIMASK
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b8a:	2480      	movs	r4, #128	; 0x80
 8002b8c:	193a      	adds	r2, r7, r4
 8002b8e:	6013      	str	r3, [r2, #0]
 8002b90:	2301      	movs	r3, #1
 8002b92:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b96:	f383 8810 	msr	PRIMASK, r3
}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2110      	movs	r1, #16
 8002ba8:	438a      	bics	r2, r1
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	193b      	adds	r3, r7, r4
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	f383 8810 	msr	PRIMASK, r3
}
 8002bb8:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002bc0:	183b      	adds	r3, r7, r0
 8002bc2:	881a      	ldrh	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	0011      	movs	r1, r2
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f000 f88d 	bl	8002ce8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002bce:	e06f      	b.n	8002cb0 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002bd0:	23a4      	movs	r3, #164	; 0xa4
 8002bd2:	18fb      	adds	r3, r7, r3
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	035b      	lsls	r3, r3, #13
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d010      	beq.n	8002c00 <HAL_UART_IRQHandler+0x584>
 8002bde:	239c      	movs	r3, #156	; 0x9c
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	2380      	movs	r3, #128	; 0x80
 8002be6:	03db      	lsls	r3, r3, #15
 8002be8:	4013      	ands	r3, r2
 8002bea:	d009      	beq.n	8002c00 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2280      	movs	r2, #128	; 0x80
 8002bf2:	0352      	lsls	r2, r2, #13
 8002bf4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f001 fa1d 	bl	8004038 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002bfe:	e05a      	b.n	8002cb6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002c00:	23a4      	movs	r3, #164	; 0xa4
 8002c02:	18fb      	adds	r3, r7, r3
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2280      	movs	r2, #128	; 0x80
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d016      	beq.n	8002c3a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002c0c:	23a0      	movs	r3, #160	; 0xa0
 8002c0e:	18fb      	adds	r3, r7, r3
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2280      	movs	r2, #128	; 0x80
 8002c14:	4013      	ands	r3, r2
 8002c16:	d106      	bne.n	8002c26 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002c18:	239c      	movs	r3, #156	; 0x9c
 8002c1a:	18fb      	adds	r3, r7, r3
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	2380      	movs	r3, #128	; 0x80
 8002c20:	041b      	lsls	r3, r3, #16
 8002c22:	4013      	ands	r3, r2
 8002c24:	d009      	beq.n	8002c3a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d042      	beq.n	8002cb4 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	0010      	movs	r0, r2
 8002c36:	4798      	blx	r3
    }
    return;
 8002c38:	e03c      	b.n	8002cb4 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c3a:	23a4      	movs	r3, #164	; 0xa4
 8002c3c:	18fb      	adds	r3, r7, r3
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2240      	movs	r2, #64	; 0x40
 8002c42:	4013      	ands	r3, r2
 8002c44:	d00a      	beq.n	8002c5c <HAL_UART_IRQHandler+0x5e0>
 8002c46:	23a0      	movs	r3, #160	; 0xa0
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2240      	movs	r2, #64	; 0x40
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d004      	beq.n	8002c5c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	0018      	movs	r0, r3
 8002c56:	f000 fd62 	bl	800371e <UART_EndTransmit_IT>
    return;
 8002c5a:	e02c      	b.n	8002cb6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002c5c:	23a4      	movs	r3, #164	; 0xa4
 8002c5e:	18fb      	adds	r3, r7, r3
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	041b      	lsls	r3, r3, #16
 8002c66:	4013      	ands	r3, r2
 8002c68:	d00b      	beq.n	8002c82 <HAL_UART_IRQHandler+0x606>
 8002c6a:	23a0      	movs	r3, #160	; 0xa0
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	2380      	movs	r3, #128	; 0x80
 8002c72:	05db      	lsls	r3, r3, #23
 8002c74:	4013      	ands	r3, r2
 8002c76:	d004      	beq.n	8002c82 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	f001 f9ec 	bl	8004058 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c80:	e019      	b.n	8002cb6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002c82:	23a4      	movs	r3, #164	; 0xa4
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	045b      	lsls	r3, r3, #17
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d012      	beq.n	8002cb6 <HAL_UART_IRQHandler+0x63a>
 8002c90:	23a0      	movs	r3, #160	; 0xa0
 8002c92:	18fb      	adds	r3, r7, r3
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	da0d      	bge.n	8002cb6 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f001 f9d3 	bl	8004048 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ca2:	e008      	b.n	8002cb6 <HAL_UART_IRQHandler+0x63a>
      return;
 8002ca4:	46c0      	nop			; (mov r8, r8)
 8002ca6:	e006      	b.n	8002cb6 <HAL_UART_IRQHandler+0x63a>
    return;
 8002ca8:	46c0      	nop			; (mov r8, r8)
 8002caa:	e004      	b.n	8002cb6 <HAL_UART_IRQHandler+0x63a>
      return;
 8002cac:	46c0      	nop			; (mov r8, r8)
 8002cae:	e002      	b.n	8002cb6 <HAL_UART_IRQHandler+0x63a>
      return;
 8002cb0:	46c0      	nop			; (mov r8, r8)
 8002cb2:	e000      	b.n	8002cb6 <HAL_UART_IRQHandler+0x63a>
    return;
 8002cb4:	46c0      	nop			; (mov r8, r8)
  }
}
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b02a      	add	sp, #168	; 0xa8
 8002cba:	bdb0      	pop	{r4, r5, r7, pc}
 8002cbc:	fffffeff 	.word	0xfffffeff
 8002cc0:	fffffedf 	.word	0xfffffedf
 8002cc4:	effffffe 	.word	0xeffffffe

08002cc8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002cd0:	46c0      	nop			; (mov r8, r8)
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	b002      	add	sp, #8
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002ce0:	46c0      	nop			; (mov r8, r8)
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b002      	add	sp, #8
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	000a      	movs	r2, r1
 8002cf2:	1cbb      	adds	r3, r7, #2
 8002cf4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b002      	add	sp, #8
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d08:	231a      	movs	r3, #26
 8002d0a:	18fb      	adds	r3, r7, r3
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4abc      	ldr	r2, [pc, #752]	; (8003020 <UART_SetConfig+0x320>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	0019      	movs	r1, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	69fa      	ldr	r2, [r7, #28]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	4ab7      	ldr	r2, [pc, #732]	; (8003024 <UART_SetConfig+0x324>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	0019      	movs	r1, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	69fa      	ldr	r2, [r7, #28]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4aae      	ldr	r2, [pc, #696]	; (8003028 <UART_SetConfig+0x328>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	0019      	movs	r1, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	69fa      	ldr	r2, [r7, #28]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	220f      	movs	r2, #15
 8002d84:	4393      	bics	r3, r2
 8002d86:	0019      	movs	r1, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4aa4      	ldr	r2, [pc, #656]	; (800302c <UART_SetConfig+0x32c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d127      	bne.n	8002dee <UART_SetConfig+0xee>
 8002d9e:	4ba4      	ldr	r3, [pc, #656]	; (8003030 <UART_SetConfig+0x330>)
 8002da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da2:	2203      	movs	r2, #3
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d017      	beq.n	8002dda <UART_SetConfig+0xda>
 8002daa:	d81b      	bhi.n	8002de4 <UART_SetConfig+0xe4>
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d00a      	beq.n	8002dc6 <UART_SetConfig+0xc6>
 8002db0:	d818      	bhi.n	8002de4 <UART_SetConfig+0xe4>
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <UART_SetConfig+0xbc>
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d00a      	beq.n	8002dd0 <UART_SetConfig+0xd0>
 8002dba:	e013      	b.n	8002de4 <UART_SetConfig+0xe4>
 8002dbc:	231b      	movs	r3, #27
 8002dbe:	18fb      	adds	r3, r7, r3
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	701a      	strb	r2, [r3, #0]
 8002dc4:	e058      	b.n	8002e78 <UART_SetConfig+0x178>
 8002dc6:	231b      	movs	r3, #27
 8002dc8:	18fb      	adds	r3, r7, r3
 8002dca:	2202      	movs	r2, #2
 8002dcc:	701a      	strb	r2, [r3, #0]
 8002dce:	e053      	b.n	8002e78 <UART_SetConfig+0x178>
 8002dd0:	231b      	movs	r3, #27
 8002dd2:	18fb      	adds	r3, r7, r3
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	701a      	strb	r2, [r3, #0]
 8002dd8:	e04e      	b.n	8002e78 <UART_SetConfig+0x178>
 8002dda:	231b      	movs	r3, #27
 8002ddc:	18fb      	adds	r3, r7, r3
 8002dde:	2208      	movs	r2, #8
 8002de0:	701a      	strb	r2, [r3, #0]
 8002de2:	e049      	b.n	8002e78 <UART_SetConfig+0x178>
 8002de4:	231b      	movs	r3, #27
 8002de6:	18fb      	adds	r3, r7, r3
 8002de8:	2210      	movs	r2, #16
 8002dea:	701a      	strb	r2, [r3, #0]
 8002dec:	e044      	b.n	8002e78 <UART_SetConfig+0x178>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a90      	ldr	r2, [pc, #576]	; (8003034 <UART_SetConfig+0x334>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d127      	bne.n	8002e48 <UART_SetConfig+0x148>
 8002df8:	4b8d      	ldr	r3, [pc, #564]	; (8003030 <UART_SetConfig+0x330>)
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfc:	220c      	movs	r2, #12
 8002dfe:	4013      	ands	r3, r2
 8002e00:	2b0c      	cmp	r3, #12
 8002e02:	d017      	beq.n	8002e34 <UART_SetConfig+0x134>
 8002e04:	d81b      	bhi.n	8002e3e <UART_SetConfig+0x13e>
 8002e06:	2b08      	cmp	r3, #8
 8002e08:	d00a      	beq.n	8002e20 <UART_SetConfig+0x120>
 8002e0a:	d818      	bhi.n	8002e3e <UART_SetConfig+0x13e>
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d002      	beq.n	8002e16 <UART_SetConfig+0x116>
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d00a      	beq.n	8002e2a <UART_SetConfig+0x12a>
 8002e14:	e013      	b.n	8002e3e <UART_SetConfig+0x13e>
 8002e16:	231b      	movs	r3, #27
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	e02b      	b.n	8002e78 <UART_SetConfig+0x178>
 8002e20:	231b      	movs	r3, #27
 8002e22:	18fb      	adds	r3, r7, r3
 8002e24:	2202      	movs	r2, #2
 8002e26:	701a      	strb	r2, [r3, #0]
 8002e28:	e026      	b.n	8002e78 <UART_SetConfig+0x178>
 8002e2a:	231b      	movs	r3, #27
 8002e2c:	18fb      	adds	r3, r7, r3
 8002e2e:	2204      	movs	r2, #4
 8002e30:	701a      	strb	r2, [r3, #0]
 8002e32:	e021      	b.n	8002e78 <UART_SetConfig+0x178>
 8002e34:	231b      	movs	r3, #27
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	2208      	movs	r2, #8
 8002e3a:	701a      	strb	r2, [r3, #0]
 8002e3c:	e01c      	b.n	8002e78 <UART_SetConfig+0x178>
 8002e3e:	231b      	movs	r3, #27
 8002e40:	18fb      	adds	r3, r7, r3
 8002e42:	2210      	movs	r2, #16
 8002e44:	701a      	strb	r2, [r3, #0]
 8002e46:	e017      	b.n	8002e78 <UART_SetConfig+0x178>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a7a      	ldr	r2, [pc, #488]	; (8003038 <UART_SetConfig+0x338>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d104      	bne.n	8002e5c <UART_SetConfig+0x15c>
 8002e52:	231b      	movs	r3, #27
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	2200      	movs	r2, #0
 8002e58:	701a      	strb	r2, [r3, #0]
 8002e5a:	e00d      	b.n	8002e78 <UART_SetConfig+0x178>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a76      	ldr	r2, [pc, #472]	; (800303c <UART_SetConfig+0x33c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d104      	bne.n	8002e70 <UART_SetConfig+0x170>
 8002e66:	231b      	movs	r3, #27
 8002e68:	18fb      	adds	r3, r7, r3
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	701a      	strb	r2, [r3, #0]
 8002e6e:	e003      	b.n	8002e78 <UART_SetConfig+0x178>
 8002e70:	231b      	movs	r3, #27
 8002e72:	18fb      	adds	r3, r7, r3
 8002e74:	2210      	movs	r2, #16
 8002e76:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69da      	ldr	r2, [r3, #28]
 8002e7c:	2380      	movs	r3, #128	; 0x80
 8002e7e:	021b      	lsls	r3, r3, #8
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d000      	beq.n	8002e86 <UART_SetConfig+0x186>
 8002e84:	e065      	b.n	8002f52 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8002e86:	231b      	movs	r3, #27
 8002e88:	18fb      	adds	r3, r7, r3
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d015      	beq.n	8002ebc <UART_SetConfig+0x1bc>
 8002e90:	dc18      	bgt.n	8002ec4 <UART_SetConfig+0x1c4>
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d00d      	beq.n	8002eb2 <UART_SetConfig+0x1b2>
 8002e96:	dc15      	bgt.n	8002ec4 <UART_SetConfig+0x1c4>
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <UART_SetConfig+0x1a2>
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d005      	beq.n	8002eac <UART_SetConfig+0x1ac>
 8002ea0:	e010      	b.n	8002ec4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ea2:	f7fe fe59 	bl	8001b58 <HAL_RCC_GetPCLK1Freq>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	617b      	str	r3, [r7, #20]
        break;
 8002eaa:	e012      	b.n	8002ed2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002eac:	4b64      	ldr	r3, [pc, #400]	; (8003040 <UART_SetConfig+0x340>)
 8002eae:	617b      	str	r3, [r7, #20]
        break;
 8002eb0:	e00f      	b.n	8002ed2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eb2:	f7fe fdc5 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 8002eb6:	0003      	movs	r3, r0
 8002eb8:	617b      	str	r3, [r7, #20]
        break;
 8002eba:	e00a      	b.n	8002ed2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ebc:	2380      	movs	r3, #128	; 0x80
 8002ebe:	021b      	lsls	r3, r3, #8
 8002ec0:	617b      	str	r3, [r7, #20]
        break;
 8002ec2:	e006      	b.n	8002ed2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002ec8:	231a      	movs	r3, #26
 8002eca:	18fb      	adds	r3, r7, r3
 8002ecc:	2201      	movs	r2, #1
 8002ece:	701a      	strb	r2, [r3, #0]
        break;
 8002ed0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d100      	bne.n	8002eda <UART_SetConfig+0x1da>
 8002ed8:	e08d      	b.n	8002ff6 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ede:	4b59      	ldr	r3, [pc, #356]	; (8003044 <UART_SetConfig+0x344>)
 8002ee0:	0052      	lsls	r2, r2, #1
 8002ee2:	5ad3      	ldrh	r3, [r2, r3]
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	6978      	ldr	r0, [r7, #20]
 8002ee8:	f7fd f912 	bl	8000110 <__udivsi3>
 8002eec:	0003      	movs	r3, r0
 8002eee:	005a      	lsls	r2, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	085b      	lsrs	r3, r3, #1
 8002ef6:	18d2      	adds	r2, r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	0019      	movs	r1, r3
 8002efe:	0010      	movs	r0, r2
 8002f00:	f7fd f906 	bl	8000110 <__udivsi3>
 8002f04:	0003      	movs	r3, r0
 8002f06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	2b0f      	cmp	r3, #15
 8002f0c:	d91c      	bls.n	8002f48 <UART_SetConfig+0x248>
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	2380      	movs	r3, #128	; 0x80
 8002f12:	025b      	lsls	r3, r3, #9
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d217      	bcs.n	8002f48 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	200e      	movs	r0, #14
 8002f1e:	183b      	adds	r3, r7, r0
 8002f20:	210f      	movs	r1, #15
 8002f22:	438a      	bics	r2, r1
 8002f24:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	085b      	lsrs	r3, r3, #1
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2207      	movs	r2, #7
 8002f2e:	4013      	ands	r3, r2
 8002f30:	b299      	uxth	r1, r3
 8002f32:	183b      	adds	r3, r7, r0
 8002f34:	183a      	adds	r2, r7, r0
 8002f36:	8812      	ldrh	r2, [r2, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	183a      	adds	r2, r7, r0
 8002f42:	8812      	ldrh	r2, [r2, #0]
 8002f44:	60da      	str	r2, [r3, #12]
 8002f46:	e056      	b.n	8002ff6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002f48:	231a      	movs	r3, #26
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	701a      	strb	r2, [r3, #0]
 8002f50:	e051      	b.n	8002ff6 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f52:	231b      	movs	r3, #27
 8002f54:	18fb      	adds	r3, r7, r3
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d015      	beq.n	8002f88 <UART_SetConfig+0x288>
 8002f5c:	dc18      	bgt.n	8002f90 <UART_SetConfig+0x290>
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d00d      	beq.n	8002f7e <UART_SetConfig+0x27e>
 8002f62:	dc15      	bgt.n	8002f90 <UART_SetConfig+0x290>
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <UART_SetConfig+0x26e>
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d005      	beq.n	8002f78 <UART_SetConfig+0x278>
 8002f6c:	e010      	b.n	8002f90 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f6e:	f7fe fdf3 	bl	8001b58 <HAL_RCC_GetPCLK1Freq>
 8002f72:	0003      	movs	r3, r0
 8002f74:	617b      	str	r3, [r7, #20]
        break;
 8002f76:	e012      	b.n	8002f9e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f78:	4b31      	ldr	r3, [pc, #196]	; (8003040 <UART_SetConfig+0x340>)
 8002f7a:	617b      	str	r3, [r7, #20]
        break;
 8002f7c:	e00f      	b.n	8002f9e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f7e:	f7fe fd5f 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 8002f82:	0003      	movs	r3, r0
 8002f84:	617b      	str	r3, [r7, #20]
        break;
 8002f86:	e00a      	b.n	8002f9e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	021b      	lsls	r3, r3, #8
 8002f8c:	617b      	str	r3, [r7, #20]
        break;
 8002f8e:	e006      	b.n	8002f9e <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002f94:	231a      	movs	r3, #26
 8002f96:	18fb      	adds	r3, r7, r3
 8002f98:	2201      	movs	r2, #1
 8002f9a:	701a      	strb	r2, [r3, #0]
        break;
 8002f9c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d028      	beq.n	8002ff6 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fa8:	4b26      	ldr	r3, [pc, #152]	; (8003044 <UART_SetConfig+0x344>)
 8002faa:	0052      	lsls	r2, r2, #1
 8002fac:	5ad3      	ldrh	r3, [r2, r3]
 8002fae:	0019      	movs	r1, r3
 8002fb0:	6978      	ldr	r0, [r7, #20]
 8002fb2:	f7fd f8ad 	bl	8000110 <__udivsi3>
 8002fb6:	0003      	movs	r3, r0
 8002fb8:	001a      	movs	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	085b      	lsrs	r3, r3, #1
 8002fc0:	18d2      	adds	r2, r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	0010      	movs	r0, r2
 8002fca:	f7fd f8a1 	bl	8000110 <__udivsi3>
 8002fce:	0003      	movs	r3, r0
 8002fd0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	2b0f      	cmp	r3, #15
 8002fd6:	d90a      	bls.n	8002fee <UART_SetConfig+0x2ee>
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	2380      	movs	r3, #128	; 0x80
 8002fdc:	025b      	lsls	r3, r3, #9
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d205      	bcs.n	8002fee <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	60da      	str	r2, [r3, #12]
 8002fec:	e003      	b.n	8002ff6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002fee:	231a      	movs	r3, #26
 8002ff0:	18fb      	adds	r3, r7, r3
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	226a      	movs	r2, #106	; 0x6a
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2268      	movs	r2, #104	; 0x68
 8003002:	2101      	movs	r1, #1
 8003004:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003012:	231a      	movs	r3, #26
 8003014:	18fb      	adds	r3, r7, r3
 8003016:	781b      	ldrb	r3, [r3, #0]
}
 8003018:	0018      	movs	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	b008      	add	sp, #32
 800301e:	bd80      	pop	{r7, pc}
 8003020:	cfff69f3 	.word	0xcfff69f3
 8003024:	ffffcfff 	.word	0xffffcfff
 8003028:	11fff4ff 	.word	0x11fff4ff
 800302c:	40013800 	.word	0x40013800
 8003030:	40021000 	.word	0x40021000
 8003034:	40004400 	.word	0x40004400
 8003038:	40004800 	.word	0x40004800
 800303c:	40004c00 	.word	0x40004c00
 8003040:	00f42400 	.word	0x00f42400
 8003044:	0800436c 	.word	0x0800436c

08003048 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	2201      	movs	r2, #1
 8003056:	4013      	ands	r3, r2
 8003058:	d00b      	beq.n	8003072 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	4a4a      	ldr	r2, [pc, #296]	; (800318c <UART_AdvFeatureConfig+0x144>)
 8003062:	4013      	ands	r3, r2
 8003064:	0019      	movs	r1, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003076:	2202      	movs	r2, #2
 8003078:	4013      	ands	r3, r2
 800307a:	d00b      	beq.n	8003094 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	4a43      	ldr	r2, [pc, #268]	; (8003190 <UART_AdvFeatureConfig+0x148>)
 8003084:	4013      	ands	r3, r2
 8003086:	0019      	movs	r1, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	2204      	movs	r2, #4
 800309a:	4013      	ands	r3, r2
 800309c:	d00b      	beq.n	80030b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	4a3b      	ldr	r2, [pc, #236]	; (8003194 <UART_AdvFeatureConfig+0x14c>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	0019      	movs	r1, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ba:	2208      	movs	r2, #8
 80030bc:	4013      	ands	r3, r2
 80030be:	d00b      	beq.n	80030d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	4a34      	ldr	r2, [pc, #208]	; (8003198 <UART_AdvFeatureConfig+0x150>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	0019      	movs	r1, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030dc:	2210      	movs	r2, #16
 80030de:	4013      	ands	r3, r2
 80030e0:	d00b      	beq.n	80030fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	4a2c      	ldr	r2, [pc, #176]	; (800319c <UART_AdvFeatureConfig+0x154>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	0019      	movs	r1, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fe:	2220      	movs	r2, #32
 8003100:	4013      	ands	r3, r2
 8003102:	d00b      	beq.n	800311c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	4a25      	ldr	r2, [pc, #148]	; (80031a0 <UART_AdvFeatureConfig+0x158>)
 800310c:	4013      	ands	r3, r2
 800310e:	0019      	movs	r1, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	2240      	movs	r2, #64	; 0x40
 8003122:	4013      	ands	r3, r2
 8003124:	d01d      	beq.n	8003162 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	4a1d      	ldr	r2, [pc, #116]	; (80031a4 <UART_AdvFeatureConfig+0x15c>)
 800312e:	4013      	ands	r3, r2
 8003130:	0019      	movs	r1, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003142:	2380      	movs	r3, #128	; 0x80
 8003144:	035b      	lsls	r3, r3, #13
 8003146:	429a      	cmp	r2, r3
 8003148:	d10b      	bne.n	8003162 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	4a15      	ldr	r2, [pc, #84]	; (80031a8 <UART_AdvFeatureConfig+0x160>)
 8003152:	4013      	ands	r3, r2
 8003154:	0019      	movs	r1, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003166:	2280      	movs	r2, #128	; 0x80
 8003168:	4013      	ands	r3, r2
 800316a:	d00b      	beq.n	8003184 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	4a0e      	ldr	r2, [pc, #56]	; (80031ac <UART_AdvFeatureConfig+0x164>)
 8003174:	4013      	ands	r3, r2
 8003176:	0019      	movs	r1, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	605a      	str	r2, [r3, #4]
  }
}
 8003184:	46c0      	nop			; (mov r8, r8)
 8003186:	46bd      	mov	sp, r7
 8003188:	b002      	add	sp, #8
 800318a:	bd80      	pop	{r7, pc}
 800318c:	fffdffff 	.word	0xfffdffff
 8003190:	fffeffff 	.word	0xfffeffff
 8003194:	fffbffff 	.word	0xfffbffff
 8003198:	ffff7fff 	.word	0xffff7fff
 800319c:	ffffefff 	.word	0xffffefff
 80031a0:	ffffdfff 	.word	0xffffdfff
 80031a4:	ffefffff 	.word	0xffefffff
 80031a8:	ff9fffff 	.word	0xff9fffff
 80031ac:	fff7ffff 	.word	0xfff7ffff

080031b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af02      	add	r7, sp, #8
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2290      	movs	r2, #144	; 0x90
 80031bc:	2100      	movs	r1, #0
 80031be:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031c0:	f7fd fc8a 	bl	8000ad8 <HAL_GetTick>
 80031c4:	0003      	movs	r3, r0
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2208      	movs	r2, #8
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d10c      	bne.n	80031f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2280      	movs	r2, #128	; 0x80
 80031da:	0391      	lsls	r1, r2, #14
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	4a1a      	ldr	r2, [pc, #104]	; (8003248 <UART_CheckIdleState+0x98>)
 80031e0:	9200      	str	r2, [sp, #0]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f000 f832 	bl	800324c <UART_WaitOnFlagUntilTimeout>
 80031e8:	1e03      	subs	r3, r0, #0
 80031ea:	d001      	beq.n	80031f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e026      	b.n	800323e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2204      	movs	r2, #4
 80031f8:	4013      	ands	r3, r2
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d10c      	bne.n	8003218 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2280      	movs	r2, #128	; 0x80
 8003202:	03d1      	lsls	r1, r2, #15
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	4a10      	ldr	r2, [pc, #64]	; (8003248 <UART_CheckIdleState+0x98>)
 8003208:	9200      	str	r2, [sp, #0]
 800320a:	2200      	movs	r2, #0
 800320c:	f000 f81e 	bl	800324c <UART_WaitOnFlagUntilTimeout>
 8003210:	1e03      	subs	r3, r0, #0
 8003212:	d001      	beq.n	8003218 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e012      	b.n	800323e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2288      	movs	r2, #136	; 0x88
 800321c:	2120      	movs	r1, #32
 800321e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	228c      	movs	r2, #140	; 0x8c
 8003224:	2120      	movs	r1, #32
 8003226:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2284      	movs	r2, #132	; 0x84
 8003238:	2100      	movs	r1, #0
 800323a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	0018      	movs	r0, r3
 8003240:	46bd      	mov	sp, r7
 8003242:	b004      	add	sp, #16
 8003244:	bd80      	pop	{r7, pc}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	01ffffff 	.word	0x01ffffff

0800324c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b094      	sub	sp, #80	; 0x50
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	1dfb      	adds	r3, r7, #7
 800325a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800325c:	e0a7      	b.n	80033ae <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003260:	3301      	adds	r3, #1
 8003262:	d100      	bne.n	8003266 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003264:	e0a3      	b.n	80033ae <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003266:	f7fd fc37 	bl	8000ad8 <HAL_GetTick>
 800326a:	0002      	movs	r2, r0
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003272:	429a      	cmp	r2, r3
 8003274:	d302      	bcc.n	800327c <UART_WaitOnFlagUntilTimeout+0x30>
 8003276:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003278:	2b00      	cmp	r3, #0
 800327a:	d13f      	bne.n	80032fc <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800327c:	f3ef 8310 	mrs	r3, PRIMASK
 8003280:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003282:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003284:	647b      	str	r3, [r7, #68]	; 0x44
 8003286:	2301      	movs	r3, #1
 8003288:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328c:	f383 8810 	msr	PRIMASK, r3
}
 8003290:	46c0      	nop			; (mov r8, r8)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	494e      	ldr	r1, [pc, #312]	; (80033d8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800329e:	400a      	ands	r2, r1
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032a4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a8:	f383 8810 	msr	PRIMASK, r3
}
 80032ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ae:	f3ef 8310 	mrs	r3, PRIMASK
 80032b2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80032b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b6:	643b      	str	r3, [r7, #64]	; 0x40
 80032b8:	2301      	movs	r3, #1
 80032ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032be:	f383 8810 	msr	PRIMASK, r3
}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2101      	movs	r1, #1
 80032d0:	438a      	bics	r2, r1
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032da:	f383 8810 	msr	PRIMASK, r3
}
 80032de:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2288      	movs	r2, #136	; 0x88
 80032e4:	2120      	movs	r1, #32
 80032e6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	228c      	movs	r2, #140	; 0x8c
 80032ec:	2120      	movs	r1, #32
 80032ee:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2284      	movs	r2, #132	; 0x84
 80032f4:	2100      	movs	r1, #0
 80032f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e069      	b.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2204      	movs	r2, #4
 8003304:	4013      	ands	r3, r2
 8003306:	d052      	beq.n	80033ae <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	69da      	ldr	r2, [r3, #28]
 800330e:	2380      	movs	r3, #128	; 0x80
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	401a      	ands	r2, r3
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	429a      	cmp	r2, r3
 800331a:	d148      	bne.n	80033ae <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2280      	movs	r2, #128	; 0x80
 8003322:	0112      	lsls	r2, r2, #4
 8003324:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003326:	f3ef 8310 	mrs	r3, PRIMASK
 800332a:	613b      	str	r3, [r7, #16]
  return(result);
 800332c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800332e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003330:	2301      	movs	r3, #1
 8003332:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f383 8810 	msr	PRIMASK, r3
}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4924      	ldr	r1, [pc, #144]	; (80033d8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003348:	400a      	ands	r2, r1
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800334e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	f383 8810 	msr	PRIMASK, r3
}
 8003356:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003358:	f3ef 8310 	mrs	r3, PRIMASK
 800335c:	61fb      	str	r3, [r7, #28]
  return(result);
 800335e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003360:	64bb      	str	r3, [r7, #72]	; 0x48
 8003362:	2301      	movs	r3, #1
 8003364:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	f383 8810 	msr	PRIMASK, r3
}
 800336c:	46c0      	nop			; (mov r8, r8)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2101      	movs	r1, #1
 800337a:	438a      	bics	r2, r1
 800337c:	609a      	str	r2, [r3, #8]
 800337e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	f383 8810 	msr	PRIMASK, r3
}
 8003388:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2288      	movs	r2, #136	; 0x88
 800338e:	2120      	movs	r1, #32
 8003390:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	228c      	movs	r2, #140	; 0x8c
 8003396:	2120      	movs	r1, #32
 8003398:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2290      	movs	r2, #144	; 0x90
 800339e:	2120      	movs	r1, #32
 80033a0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2284      	movs	r2, #132	; 0x84
 80033a6:	2100      	movs	r1, #0
 80033a8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e010      	b.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	4013      	ands	r3, r2
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	425a      	negs	r2, r3
 80033be:	4153      	adcs	r3, r2
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	001a      	movs	r2, r3
 80033c4:	1dfb      	adds	r3, r7, #7
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d100      	bne.n	80033ce <UART_WaitOnFlagUntilTimeout+0x182>
 80033cc:	e747      	b.n	800325e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	0018      	movs	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b014      	add	sp, #80	; 0x50
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	fffffe5f 	.word	0xfffffe5f

080033dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b098      	sub	sp, #96	; 0x60
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	1dbb      	adds	r3, r7, #6
 80033e8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1dba      	adds	r2, r7, #6
 80033f4:	215c      	movs	r1, #92	; 0x5c
 80033f6:	8812      	ldrh	r2, [r2, #0]
 80033f8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1dba      	adds	r2, r7, #6
 80033fe:	215e      	movs	r1, #94	; 0x5e
 8003400:	8812      	ldrh	r2, [r2, #0]
 8003402:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	2380      	movs	r3, #128	; 0x80
 8003410:	015b      	lsls	r3, r3, #5
 8003412:	429a      	cmp	r2, r3
 8003414:	d10d      	bne.n	8003432 <UART_Start_Receive_IT+0x56>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d104      	bne.n	8003428 <UART_Start_Receive_IT+0x4c>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2260      	movs	r2, #96	; 0x60
 8003422:	497b      	ldr	r1, [pc, #492]	; (8003610 <UART_Start_Receive_IT+0x234>)
 8003424:	5299      	strh	r1, [r3, r2]
 8003426:	e02e      	b.n	8003486 <UART_Start_Receive_IT+0xaa>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2260      	movs	r2, #96	; 0x60
 800342c:	21ff      	movs	r1, #255	; 0xff
 800342e:	5299      	strh	r1, [r3, r2]
 8003430:	e029      	b.n	8003486 <UART_Start_Receive_IT+0xaa>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10d      	bne.n	8003456 <UART_Start_Receive_IT+0x7a>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d104      	bne.n	800344c <UART_Start_Receive_IT+0x70>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2260      	movs	r2, #96	; 0x60
 8003446:	21ff      	movs	r1, #255	; 0xff
 8003448:	5299      	strh	r1, [r3, r2]
 800344a:	e01c      	b.n	8003486 <UART_Start_Receive_IT+0xaa>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2260      	movs	r2, #96	; 0x60
 8003450:	217f      	movs	r1, #127	; 0x7f
 8003452:	5299      	strh	r1, [r3, r2]
 8003454:	e017      	b.n	8003486 <UART_Start_Receive_IT+0xaa>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	2380      	movs	r3, #128	; 0x80
 800345c:	055b      	lsls	r3, r3, #21
 800345e:	429a      	cmp	r2, r3
 8003460:	d10d      	bne.n	800347e <UART_Start_Receive_IT+0xa2>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d104      	bne.n	8003474 <UART_Start_Receive_IT+0x98>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2260      	movs	r2, #96	; 0x60
 800346e:	217f      	movs	r1, #127	; 0x7f
 8003470:	5299      	strh	r1, [r3, r2]
 8003472:	e008      	b.n	8003486 <UART_Start_Receive_IT+0xaa>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2260      	movs	r2, #96	; 0x60
 8003478:	213f      	movs	r1, #63	; 0x3f
 800347a:	5299      	strh	r1, [r3, r2]
 800347c:	e003      	b.n	8003486 <UART_Start_Receive_IT+0xaa>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2260      	movs	r2, #96	; 0x60
 8003482:	2100      	movs	r1, #0
 8003484:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2290      	movs	r2, #144	; 0x90
 800348a:	2100      	movs	r1, #0
 800348c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	228c      	movs	r2, #140	; 0x8c
 8003492:	2122      	movs	r1, #34	; 0x22
 8003494:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003496:	f3ef 8310 	mrs	r3, PRIMASK
 800349a:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 800349c:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034a0:	2301      	movs	r3, #1
 80034a2:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034a6:	f383 8810 	msr	PRIMASK, r3
}
 80034aa:	46c0      	nop			; (mov r8, r8)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2101      	movs	r1, #1
 80034b8:	430a      	orrs	r2, r1
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034be:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034c2:	f383 8810 	msr	PRIMASK, r3
}
 80034c6:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80034cc:	2380      	movs	r3, #128	; 0x80
 80034ce:	059b      	lsls	r3, r3, #22
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d150      	bne.n	8003576 <UART_Start_Receive_IT+0x19a>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2268      	movs	r2, #104	; 0x68
 80034d8:	5a9b      	ldrh	r3, [r3, r2]
 80034da:	1dba      	adds	r2, r7, #6
 80034dc:	8812      	ldrh	r2, [r2, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d349      	bcc.n	8003576 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	2380      	movs	r3, #128	; 0x80
 80034e8:	015b      	lsls	r3, r3, #5
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d107      	bne.n	80034fe <UART_Start_Receive_IT+0x122>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d103      	bne.n	80034fe <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4a46      	ldr	r2, [pc, #280]	; (8003614 <UART_Start_Receive_IT+0x238>)
 80034fa:	675a      	str	r2, [r3, #116]	; 0x74
 80034fc:	e002      	b.n	8003504 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4a45      	ldr	r2, [pc, #276]	; (8003618 <UART_Start_Receive_IT+0x23c>)
 8003502:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d019      	beq.n	8003540 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800350c:	f3ef 8310 	mrs	r3, PRIMASK
 8003510:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003514:	65bb      	str	r3, [r7, #88]	; 0x58
 8003516:	2301      	movs	r3, #1
 8003518:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800351c:	f383 8810 	msr	PRIMASK, r3
}
 8003520:	46c0      	nop			; (mov r8, r8)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2180      	movs	r1, #128	; 0x80
 800352e:	0049      	lsls	r1, r1, #1
 8003530:	430a      	orrs	r2, r1
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003536:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800353a:	f383 8810 	msr	PRIMASK, r3
}
 800353e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003540:	f3ef 8310 	mrs	r3, PRIMASK
 8003544:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003546:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003548:	657b      	str	r3, [r7, #84]	; 0x54
 800354a:	2301      	movs	r3, #1
 800354c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003550:	f383 8810 	msr	PRIMASK, r3
}
 8003554:	46c0      	nop			; (mov r8, r8)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2180      	movs	r1, #128	; 0x80
 8003562:	0549      	lsls	r1, r1, #21
 8003564:	430a      	orrs	r2, r1
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800356a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800356c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356e:	f383 8810 	msr	PRIMASK, r3
}
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	e047      	b.n	8003606 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	2380      	movs	r3, #128	; 0x80
 800357c:	015b      	lsls	r3, r3, #5
 800357e:	429a      	cmp	r2, r3
 8003580:	d107      	bne.n	8003592 <UART_Start_Receive_IT+0x1b6>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d103      	bne.n	8003592 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4a23      	ldr	r2, [pc, #140]	; (800361c <UART_Start_Receive_IT+0x240>)
 800358e:	675a      	str	r2, [r3, #116]	; 0x74
 8003590:	e002      	b.n	8003598 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4a22      	ldr	r2, [pc, #136]	; (8003620 <UART_Start_Receive_IT+0x244>)
 8003596:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d019      	beq.n	80035d4 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a0:	f3ef 8310 	mrs	r3, PRIMASK
 80035a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80035a6:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80035a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035aa:	2301      	movs	r3, #1
 80035ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	f383 8810 	msr	PRIMASK, r3
}
 80035b4:	46c0      	nop			; (mov r8, r8)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2190      	movs	r1, #144	; 0x90
 80035c2:	0049      	lsls	r1, r1, #1
 80035c4:	430a      	orrs	r2, r1
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	f383 8810 	msr	PRIMASK, r3
}
 80035d2:	e018      	b.n	8003606 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035d4:	f3ef 8310 	mrs	r3, PRIMASK
 80035d8:	613b      	str	r3, [r7, #16]
  return(result);
 80035da:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80035dc:	653b      	str	r3, [r7, #80]	; 0x50
 80035de:	2301      	movs	r3, #1
 80035e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f383 8810 	msr	PRIMASK, r3
}
 80035e8:	46c0      	nop			; (mov r8, r8)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2120      	movs	r1, #32
 80035f6:	430a      	orrs	r2, r1
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	f383 8810 	msr	PRIMASK, r3
}
 8003604:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	0018      	movs	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	b018      	add	sp, #96	; 0x60
 800360e:	bd80      	pop	{r7, pc}
 8003610:	000001ff 	.word	0x000001ff
 8003614:	08003d4d 	.word	0x08003d4d
 8003618:	08003a61 	.word	0x08003a61
 800361c:	080038ed 	.word	0x080038ed
 8003620:	08003779 	.word	0x08003779

08003624 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08e      	sub	sp, #56	; 0x38
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800362c:	f3ef 8310 	mrs	r3, PRIMASK
 8003630:	617b      	str	r3, [r7, #20]
  return(result);
 8003632:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003634:	637b      	str	r3, [r7, #52]	; 0x34
 8003636:	2301      	movs	r3, #1
 8003638:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	f383 8810 	msr	PRIMASK, r3
}
 8003640:	46c0      	nop			; (mov r8, r8)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4926      	ldr	r1, [pc, #152]	; (80036e8 <UART_EndRxTransfer+0xc4>)
 800364e:	400a      	ands	r2, r1
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003654:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	f383 8810 	msr	PRIMASK, r3
}
 800365c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800365e:	f3ef 8310 	mrs	r3, PRIMASK
 8003662:	623b      	str	r3, [r7, #32]
  return(result);
 8003664:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003666:	633b      	str	r3, [r7, #48]	; 0x30
 8003668:	2301      	movs	r3, #1
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	f383 8810 	msr	PRIMASK, r3
}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	491b      	ldr	r1, [pc, #108]	; (80036ec <UART_EndRxTransfer+0xc8>)
 8003680:	400a      	ands	r2, r1
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003686:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368a:	f383 8810 	msr	PRIMASK, r3
}
 800368e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003694:	2b01      	cmp	r3, #1
 8003696:	d118      	bne.n	80036ca <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003698:	f3ef 8310 	mrs	r3, PRIMASK
 800369c:	60bb      	str	r3, [r7, #8]
  return(result);
 800369e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036a2:	2301      	movs	r3, #1
 80036a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f383 8810 	msr	PRIMASK, r3
}
 80036ac:	46c0      	nop			; (mov r8, r8)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2110      	movs	r1, #16
 80036ba:	438a      	bics	r2, r1
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f383 8810 	msr	PRIMASK, r3
}
 80036c8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	228c      	movs	r2, #140	; 0x8c
 80036ce:	2120      	movs	r1, #32
 80036d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	675a      	str	r2, [r3, #116]	; 0x74
}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	46bd      	mov	sp, r7
 80036e2:	b00e      	add	sp, #56	; 0x38
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	fffffedf 	.word	0xfffffedf
 80036ec:	effffffe 	.word	0xeffffffe

080036f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	225e      	movs	r2, #94	; 0x5e
 8003702:	2100      	movs	r1, #0
 8003704:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2256      	movs	r2, #86	; 0x56
 800370a:	2100      	movs	r1, #0
 800370c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	0018      	movs	r0, r3
 8003712:	f7ff fae1 	bl	8002cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	46bd      	mov	sp, r7
 800371a:	b004      	add	sp, #16
 800371c:	bd80      	pop	{r7, pc}

0800371e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b086      	sub	sp, #24
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003726:	f3ef 8310 	mrs	r3, PRIMASK
 800372a:	60bb      	str	r3, [r7, #8]
  return(result);
 800372c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	2301      	movs	r3, #1
 8003732:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f383 8810 	msr	PRIMASK, r3
}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2140      	movs	r1, #64	; 0x40
 8003748:	438a      	bics	r2, r1
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f383 8810 	msr	PRIMASK, r3
}
 8003756:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2288      	movs	r2, #136	; 0x88
 800375c:	2120      	movs	r1, #32
 800375e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	0018      	movs	r0, r3
 800376a:	f7ff faad 	bl	8002cc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	46bd      	mov	sp, r7
 8003772:	b006      	add	sp, #24
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b090      	sub	sp, #64	; 0x40
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003780:	203e      	movs	r0, #62	; 0x3e
 8003782:	183b      	adds	r3, r7, r0
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	2160      	movs	r1, #96	; 0x60
 8003788:	5a52      	ldrh	r2, [r2, r1]
 800378a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	228c      	movs	r2, #140	; 0x8c
 8003790:	589b      	ldr	r3, [r3, r2]
 8003792:	2b22      	cmp	r3, #34	; 0x22
 8003794:	d000      	beq.n	8003798 <UART_RxISR_8BIT+0x20>
 8003796:	e09a      	b.n	80038ce <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800379e:	213c      	movs	r1, #60	; 0x3c
 80037a0:	187b      	adds	r3, r7, r1
 80037a2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80037a4:	187b      	adds	r3, r7, r1
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	183b      	adds	r3, r7, r0
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	b2d9      	uxtb	r1, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b4:	400a      	ands	r2, r1
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	225e      	movs	r2, #94	; 0x5e
 80037c8:	5a9b      	ldrh	r3, [r3, r2]
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b299      	uxth	r1, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	225e      	movs	r2, #94	; 0x5e
 80037d4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	225e      	movs	r2, #94	; 0x5e
 80037da:	5a9b      	ldrh	r3, [r3, r2]
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d000      	beq.n	80037e4 <UART_RxISR_8BIT+0x6c>
 80037e2:	e07c      	b.n	80038de <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e4:	f3ef 8310 	mrs	r3, PRIMASK
 80037e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80037ea:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80037ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80037ee:	2301      	movs	r3, #1
 80037f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	f383 8810 	msr	PRIMASK, r3
}
 80037f8:	46c0      	nop			; (mov r8, r8)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4938      	ldr	r1, [pc, #224]	; (80038e8 <UART_RxISR_8BIT+0x170>)
 8003806:	400a      	ands	r2, r1
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	f383 8810 	msr	PRIMASK, r3
}
 8003814:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003816:	f3ef 8310 	mrs	r3, PRIMASK
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800381e:	637b      	str	r3, [r7, #52]	; 0x34
 8003820:	2301      	movs	r3, #1
 8003822:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003826:	f383 8810 	msr	PRIMASK, r3
}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2101      	movs	r1, #1
 8003838:	438a      	bics	r2, r1
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003842:	f383 8810 	msr	PRIMASK, r3
}
 8003846:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	228c      	movs	r2, #140	; 0x8c
 800384c:	2120      	movs	r1, #32
 800384e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003860:	2b01      	cmp	r3, #1
 8003862:	d12f      	bne.n	80038c4 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800386a:	f3ef 8310 	mrs	r3, PRIMASK
 800386e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003870:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003872:	633b      	str	r3, [r7, #48]	; 0x30
 8003874:	2301      	movs	r3, #1
 8003876:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f383 8810 	msr	PRIMASK, r3
}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2110      	movs	r1, #16
 800388c:	438a      	bics	r2, r1
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003892:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f383 8810 	msr	PRIMASK, r3
}
 800389a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	2210      	movs	r2, #16
 80038a4:	4013      	ands	r3, r2
 80038a6:	2b10      	cmp	r3, #16
 80038a8:	d103      	bne.n	80038b2 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2210      	movs	r2, #16
 80038b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	225c      	movs	r2, #92	; 0x5c
 80038b6:	5a9a      	ldrh	r2, [r3, r2]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	0011      	movs	r1, r2
 80038bc:	0018      	movs	r0, r3
 80038be:	f7ff fa13 	bl	8002ce8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80038c2:	e00c      	b.n	80038de <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	0018      	movs	r0, r3
 80038c8:	f7fc fda6 	bl	8000418 <HAL_UART_RxCpltCallback>
}
 80038cc:	e007      	b.n	80038de <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	699a      	ldr	r2, [r3, #24]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2108      	movs	r1, #8
 80038da:	430a      	orrs	r2, r1
 80038dc:	619a      	str	r2, [r3, #24]
}
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	46bd      	mov	sp, r7
 80038e2:	b010      	add	sp, #64	; 0x40
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	fffffedf 	.word	0xfffffedf

080038ec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b090      	sub	sp, #64	; 0x40
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80038f4:	203e      	movs	r0, #62	; 0x3e
 80038f6:	183b      	adds	r3, r7, r0
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	2160      	movs	r1, #96	; 0x60
 80038fc:	5a52      	ldrh	r2, [r2, r1]
 80038fe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	228c      	movs	r2, #140	; 0x8c
 8003904:	589b      	ldr	r3, [r3, r2]
 8003906:	2b22      	cmp	r3, #34	; 0x22
 8003908:	d000      	beq.n	800390c <UART_RxISR_16BIT+0x20>
 800390a:	e09a      	b.n	8003a42 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003912:	213c      	movs	r1, #60	; 0x3c
 8003914:	187b      	adds	r3, r7, r1
 8003916:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391c:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800391e:	187b      	adds	r3, r7, r1
 8003920:	183a      	adds	r2, r7, r0
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	8812      	ldrh	r2, [r2, #0]
 8003926:	4013      	ands	r3, r2
 8003928:	b29a      	uxth	r2, r3
 800392a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003932:	1c9a      	adds	r2, r3, #2
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	225e      	movs	r2, #94	; 0x5e
 800393c:	5a9b      	ldrh	r3, [r3, r2]
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b299      	uxth	r1, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	225e      	movs	r2, #94	; 0x5e
 8003948:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	225e      	movs	r2, #94	; 0x5e
 800394e:	5a9b      	ldrh	r3, [r3, r2]
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d000      	beq.n	8003958 <UART_RxISR_16BIT+0x6c>
 8003956:	e07c      	b.n	8003a52 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003958:	f3ef 8310 	mrs	r3, PRIMASK
 800395c:	617b      	str	r3, [r7, #20]
  return(result);
 800395e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003960:	637b      	str	r3, [r7, #52]	; 0x34
 8003962:	2301      	movs	r3, #1
 8003964:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	f383 8810 	msr	PRIMASK, r3
}
 800396c:	46c0      	nop			; (mov r8, r8)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4938      	ldr	r1, [pc, #224]	; (8003a5c <UART_RxISR_16BIT+0x170>)
 800397a:	400a      	ands	r2, r1
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003980:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	f383 8810 	msr	PRIMASK, r3
}
 8003988:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800398a:	f3ef 8310 	mrs	r3, PRIMASK
 800398e:	623b      	str	r3, [r7, #32]
  return(result);
 8003990:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003992:	633b      	str	r3, [r7, #48]	; 0x30
 8003994:	2301      	movs	r3, #1
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	f383 8810 	msr	PRIMASK, r3
}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2101      	movs	r1, #1
 80039ac:	438a      	bics	r2, r1
 80039ae:	609a      	str	r2, [r3, #8]
 80039b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b6:	f383 8810 	msr	PRIMASK, r3
}
 80039ba:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	228c      	movs	r2, #140	; 0x8c
 80039c0:	2120      	movs	r1, #32
 80039c2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d12f      	bne.n	8003a38 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039de:	f3ef 8310 	mrs	r3, PRIMASK
 80039e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80039e4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039e8:	2301      	movs	r3, #1
 80039ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f383 8810 	msr	PRIMASK, r3
}
 80039f2:	46c0      	nop			; (mov r8, r8)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2110      	movs	r1, #16
 8003a00:	438a      	bics	r2, r1
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f383 8810 	msr	PRIMASK, r3
}
 8003a0e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	2210      	movs	r2, #16
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b10      	cmp	r3, #16
 8003a1c:	d103      	bne.n	8003a26 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2210      	movs	r2, #16
 8003a24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	225c      	movs	r2, #92	; 0x5c
 8003a2a:	5a9a      	ldrh	r2, [r3, r2]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	0011      	movs	r1, r2
 8003a30:	0018      	movs	r0, r3
 8003a32:	f7ff f959 	bl	8002ce8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003a36:	e00c      	b.n	8003a52 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f7fc fcec 	bl	8000418 <HAL_UART_RxCpltCallback>
}
 8003a40:	e007      	b.n	8003a52 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699a      	ldr	r2, [r3, #24]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2108      	movs	r1, #8
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	619a      	str	r2, [r3, #24]
}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	46bd      	mov	sp, r7
 8003a56:	b010      	add	sp, #64	; 0x40
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	fffffedf 	.word	0xfffffedf

08003a60 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b09c      	sub	sp, #112	; 0x70
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003a68:	236a      	movs	r3, #106	; 0x6a
 8003a6a:	18fb      	adds	r3, r7, r3
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	2160      	movs	r1, #96	; 0x60
 8003a70:	5a52      	ldrh	r2, [r2, r1]
 8003a72:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	228c      	movs	r2, #140	; 0x8c
 8003a90:	589b      	ldr	r3, [r3, r2]
 8003a92:	2b22      	cmp	r3, #34	; 0x22
 8003a94:	d000      	beq.n	8003a98 <UART_RxISR_8BIT_FIFOEN+0x38>
 8003a96:	e144      	b.n	8003d22 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003a98:	235e      	movs	r3, #94	; 0x5e
 8003a9a:	18fb      	adds	r3, r7, r3
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	2168      	movs	r1, #104	; 0x68
 8003aa0:	5a52      	ldrh	r2, [r2, r1]
 8003aa2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003aa4:	e0eb      	b.n	8003c7e <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aac:	215c      	movs	r1, #92	; 0x5c
 8003aae:	187b      	adds	r3, r7, r1
 8003ab0:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003ab2:	187b      	adds	r3, r7, r1
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	236a      	movs	r3, #106	; 0x6a
 8003aba:	18fb      	adds	r3, r7, r3
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	b2d9      	uxtb	r1, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac4:	400a      	ands	r2, r1
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	225e      	movs	r2, #94	; 0x5e
 8003ad8:	5a9b      	ldrh	r3, [r3, r2]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b299      	uxth	r1, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	225e      	movs	r2, #94	; 0x5e
 8003ae4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af0:	2207      	movs	r2, #7
 8003af2:	4013      	ands	r3, r2
 8003af4:	d049      	beq.n	8003b8a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af8:	2201      	movs	r2, #1
 8003afa:	4013      	ands	r3, r2
 8003afc:	d010      	beq.n	8003b20 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8003afe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003b00:	2380      	movs	r3, #128	; 0x80
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	4013      	ands	r3, r2
 8003b06:	d00b      	beq.n	8003b20 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2290      	movs	r2, #144	; 0x90
 8003b14:	589b      	ldr	r3, [r3, r2]
 8003b16:	2201      	movs	r2, #1
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2190      	movs	r1, #144	; 0x90
 8003b1e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b22:	2202      	movs	r2, #2
 8003b24:	4013      	ands	r3, r2
 8003b26:	d00f      	beq.n	8003b48 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8003b28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d00b      	beq.n	8003b48 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2202      	movs	r2, #2
 8003b36:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2290      	movs	r2, #144	; 0x90
 8003b3c:	589b      	ldr	r3, [r3, r2]
 8003b3e:	2204      	movs	r2, #4
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2190      	movs	r1, #144	; 0x90
 8003b46:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b4a:	2204      	movs	r2, #4
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d00f      	beq.n	8003b70 <UART_RxISR_8BIT_FIFOEN+0x110>
 8003b50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b52:	2201      	movs	r2, #1
 8003b54:	4013      	ands	r3, r2
 8003b56:	d00b      	beq.n	8003b70 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2204      	movs	r2, #4
 8003b5e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2290      	movs	r2, #144	; 0x90
 8003b64:	589b      	ldr	r3, [r3, r2]
 8003b66:	2202      	movs	r2, #2
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2190      	movs	r1, #144	; 0x90
 8003b6e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2290      	movs	r2, #144	; 0x90
 8003b74:	589b      	ldr	r3, [r3, r2]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d007      	beq.n	8003b8a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f7ff f8ab 	bl	8002cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2290      	movs	r2, #144	; 0x90
 8003b86:	2100      	movs	r1, #0
 8003b88:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	225e      	movs	r2, #94	; 0x5e
 8003b8e:	5a9b      	ldrh	r3, [r3, r2]
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d173      	bne.n	8003c7e <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b96:	f3ef 8310 	mrs	r3, PRIMASK
 8003b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba6:	f383 8810 	msr	PRIMASK, r3
}
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4961      	ldr	r1, [pc, #388]	; (8003d3c <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8003bb8:	400a      	ands	r2, r1
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bbe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc2:	f383 8810 	msr	PRIMASK, r3
}
 8003bc6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bc8:	f3ef 8310 	mrs	r3, PRIMASK
 8003bcc:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8003bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003bd0:	657b      	str	r3, [r7, #84]	; 0x54
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bd8:	f383 8810 	msr	PRIMASK, r3
}
 8003bdc:	46c0      	nop			; (mov r8, r8)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4955      	ldr	r1, [pc, #340]	; (8003d40 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8003bea:	400a      	ands	r2, r1
 8003bec:	609a      	str	r2, [r3, #8]
 8003bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bf0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bf4:	f383 8810 	msr	PRIMASK, r3
}
 8003bf8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	228c      	movs	r2, #140	; 0x8c
 8003bfe:	2120      	movs	r1, #32
 8003c00:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d12f      	bne.n	8003c76 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c20:	623b      	str	r3, [r7, #32]
  return(result);
 8003c22:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c24:	653b      	str	r3, [r7, #80]	; 0x50
 8003c26:	2301      	movs	r3, #1
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	f383 8810 	msr	PRIMASK, r3
}
 8003c30:	46c0      	nop			; (mov r8, r8)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2110      	movs	r1, #16
 8003c3e:	438a      	bics	r2, r1
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c44:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c48:	f383 8810 	msr	PRIMASK, r3
}
 8003c4c:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	2210      	movs	r2, #16
 8003c56:	4013      	ands	r3, r2
 8003c58:	2b10      	cmp	r3, #16
 8003c5a:	d103      	bne.n	8003c64 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2210      	movs	r2, #16
 8003c62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	225c      	movs	r2, #92	; 0x5c
 8003c68:	5a9a      	ldrh	r2, [r3, r2]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	0011      	movs	r1, r2
 8003c6e:	0018      	movs	r0, r3
 8003c70:	f7ff f83a 	bl	8002ce8 <HAL_UARTEx_RxEventCallback>
 8003c74:	e003      	b.n	8003c7e <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f7fc fbcd 	bl	8000418 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003c7e:	235e      	movs	r3, #94	; 0x5e
 8003c80:	18fb      	adds	r3, r7, r3
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d004      	beq.n	8003c92 <UART_RxISR_8BIT_FIFOEN+0x232>
 8003c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	d000      	beq.n	8003c92 <UART_RxISR_8BIT_FIFOEN+0x232>
 8003c90:	e709      	b.n	8003aa6 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003c92:	204e      	movs	r0, #78	; 0x4e
 8003c94:	183b      	adds	r3, r7, r0
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	215e      	movs	r1, #94	; 0x5e
 8003c9a:	5a52      	ldrh	r2, [r2, r1]
 8003c9c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003c9e:	0001      	movs	r1, r0
 8003ca0:	187b      	adds	r3, r7, r1
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d044      	beq.n	8003d32 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2268      	movs	r2, #104	; 0x68
 8003cac:	5a9b      	ldrh	r3, [r3, r2]
 8003cae:	187a      	adds	r2, r7, r1
 8003cb0:	8812      	ldrh	r2, [r2, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d23d      	bcs.n	8003d32 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8003cba:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cbc:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003cbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f383 8810 	msr	PRIMASK, r3
}
 8003cca:	46c0      	nop			; (mov r8, r8)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	491b      	ldr	r1, [pc, #108]	; (8003d44 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8003cd8:	400a      	ands	r2, r1
 8003cda:	609a      	str	r2, [r3, #8]
 8003cdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f383 8810 	msr	PRIMASK, r3
}
 8003ce6:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a17      	ldr	r2, [pc, #92]	; (8003d48 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8003cec:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cee:	f3ef 8310 	mrs	r3, PRIMASK
 8003cf2:	617b      	str	r3, [r7, #20]
  return(result);
 8003cf4:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003cf6:	647b      	str	r3, [r7, #68]	; 0x44
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	f383 8810 	msr	PRIMASK, r3
}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2120      	movs	r1, #32
 8003d10:	430a      	orrs	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f383 8810 	msr	PRIMASK, r3
}
 8003d1e:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d20:	e007      	b.n	8003d32 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	699a      	ldr	r2, [r3, #24]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2108      	movs	r1, #8
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	619a      	str	r2, [r3, #24]
}
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	46bd      	mov	sp, r7
 8003d36:	b01c      	add	sp, #112	; 0x70
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	fffffeff 	.word	0xfffffeff
 8003d40:	effffffe 	.word	0xeffffffe
 8003d44:	efffffff 	.word	0xefffffff
 8003d48:	08003779 	.word	0x08003779

08003d4c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b09e      	sub	sp, #120	; 0x78
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003d54:	2372      	movs	r3, #114	; 0x72
 8003d56:	18fb      	adds	r3, r7, r3
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	2160      	movs	r1, #96	; 0x60
 8003d5c:	5a52      	ldrh	r2, [r2, r1]
 8003d5e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	228c      	movs	r2, #140	; 0x8c
 8003d7c:	589b      	ldr	r3, [r3, r2]
 8003d7e:	2b22      	cmp	r3, #34	; 0x22
 8003d80:	d000      	beq.n	8003d84 <UART_RxISR_16BIT_FIFOEN+0x38>
 8003d82:	e144      	b.n	800400e <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003d84:	2366      	movs	r3, #102	; 0x66
 8003d86:	18fb      	adds	r3, r7, r3
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	2168      	movs	r1, #104	; 0x68
 8003d8c:	5a52      	ldrh	r2, [r2, r1]
 8003d8e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003d90:	e0eb      	b.n	8003f6a <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d98:	2164      	movs	r1, #100	; 0x64
 8003d9a:	187b      	adds	r3, r7, r1
 8003d9c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da2:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8003da4:	187b      	adds	r3, r7, r1
 8003da6:	2272      	movs	r2, #114	; 0x72
 8003da8:	18ba      	adds	r2, r7, r2
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	8812      	ldrh	r2, [r2, #0]
 8003dae:	4013      	ands	r3, r2
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003db4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dba:	1c9a      	adds	r2, r3, #2
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	225e      	movs	r2, #94	; 0x5e
 8003dc4:	5a9b      	ldrh	r3, [r3, r2]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b299      	uxth	r1, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	225e      	movs	r2, #94	; 0x5e
 8003dd0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ddc:	2207      	movs	r2, #7
 8003dde:	4013      	ands	r3, r2
 8003de0:	d049      	beq.n	8003e76 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003de4:	2201      	movs	r2, #1
 8003de6:	4013      	ands	r3, r2
 8003de8:	d010      	beq.n	8003e0c <UART_RxISR_16BIT_FIFOEN+0xc0>
 8003dea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003dec:	2380      	movs	r3, #128	; 0x80
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	4013      	ands	r3, r2
 8003df2:	d00b      	beq.n	8003e0c <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2290      	movs	r2, #144	; 0x90
 8003e00:	589b      	ldr	r3, [r3, r2]
 8003e02:	2201      	movs	r2, #1
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2190      	movs	r1, #144	; 0x90
 8003e0a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e0e:	2202      	movs	r2, #2
 8003e10:	4013      	ands	r3, r2
 8003e12:	d00f      	beq.n	8003e34 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8003e14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e16:	2201      	movs	r2, #1
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d00b      	beq.n	8003e34 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2202      	movs	r2, #2
 8003e22:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2290      	movs	r2, #144	; 0x90
 8003e28:	589b      	ldr	r3, [r3, r2]
 8003e2a:	2204      	movs	r2, #4
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2190      	movs	r1, #144	; 0x90
 8003e32:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e36:	2204      	movs	r2, #4
 8003e38:	4013      	ands	r3, r2
 8003e3a:	d00f      	beq.n	8003e5c <UART_RxISR_16BIT_FIFOEN+0x110>
 8003e3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e3e:	2201      	movs	r2, #1
 8003e40:	4013      	ands	r3, r2
 8003e42:	d00b      	beq.n	8003e5c <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2204      	movs	r2, #4
 8003e4a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2290      	movs	r2, #144	; 0x90
 8003e50:	589b      	ldr	r3, [r3, r2]
 8003e52:	2202      	movs	r2, #2
 8003e54:	431a      	orrs	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2190      	movs	r1, #144	; 0x90
 8003e5a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2290      	movs	r2, #144	; 0x90
 8003e60:	589b      	ldr	r3, [r3, r2]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d007      	beq.n	8003e76 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	0018      	movs	r0, r3
 8003e6a:	f7fe ff35 	bl	8002cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2290      	movs	r2, #144	; 0x90
 8003e72:	2100      	movs	r1, #0
 8003e74:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	225e      	movs	r2, #94	; 0x5e
 8003e7a:	5a9b      	ldrh	r3, [r3, r2]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d173      	bne.n	8003f6a <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e82:	f3ef 8310 	mrs	r3, PRIMASK
 8003e86:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e92:	f383 8810 	msr	PRIMASK, r3
}
 8003e96:	46c0      	nop			; (mov r8, r8)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4961      	ldr	r1, [pc, #388]	; (8004028 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8003ea4:	400a      	ands	r2, r1
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eaa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eae:	f383 8810 	msr	PRIMASK, r3
}
 8003eb2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8003eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ebc:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec4:	f383 8810 	msr	PRIMASK, r3
}
 8003ec8:	46c0      	nop			; (mov r8, r8)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4955      	ldr	r1, [pc, #340]	; (800402c <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8003ed6:	400a      	ands	r2, r1
 8003ed8:	609a      	str	r2, [r3, #8]
 8003eda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003edc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ee0:	f383 8810 	msr	PRIMASK, r3
}
 8003ee4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	228c      	movs	r2, #140	; 0x8c
 8003eea:	2120      	movs	r1, #32
 8003eec:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d12f      	bne.n	8003f62 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f08:	f3ef 8310 	mrs	r3, PRIMASK
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f10:	657b      	str	r3, [r7, #84]	; 0x54
 8003f12:	2301      	movs	r3, #1
 8003f14:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f18:	f383 8810 	msr	PRIMASK, r3
}
 8003f1c:	46c0      	nop			; (mov r8, r8)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2110      	movs	r1, #16
 8003f2a:	438a      	bics	r2, r1
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f34:	f383 8810 	msr	PRIMASK, r3
}
 8003f38:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	2210      	movs	r2, #16
 8003f42:	4013      	ands	r3, r2
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d103      	bne.n	8003f50 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2210      	movs	r2, #16
 8003f4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	225c      	movs	r2, #92	; 0x5c
 8003f54:	5a9a      	ldrh	r2, [r3, r2]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	0011      	movs	r1, r2
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f7fe fec4 	bl	8002ce8 <HAL_UARTEx_RxEventCallback>
 8003f60:	e003      	b.n	8003f6a <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	0018      	movs	r0, r3
 8003f66:	f7fc fa57 	bl	8000418 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003f6a:	2366      	movs	r3, #102	; 0x66
 8003f6c:	18fb      	adds	r3, r7, r3
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d004      	beq.n	8003f7e <UART_RxISR_16BIT_FIFOEN+0x232>
 8003f74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f76:	2220      	movs	r2, #32
 8003f78:	4013      	ands	r3, r2
 8003f7a:	d000      	beq.n	8003f7e <UART_RxISR_16BIT_FIFOEN+0x232>
 8003f7c:	e709      	b.n	8003d92 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003f7e:	2052      	movs	r0, #82	; 0x52
 8003f80:	183b      	adds	r3, r7, r0
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	215e      	movs	r1, #94	; 0x5e
 8003f86:	5a52      	ldrh	r2, [r2, r1]
 8003f88:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003f8a:	0001      	movs	r1, r0
 8003f8c:	187b      	adds	r3, r7, r1
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d044      	beq.n	800401e <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2268      	movs	r2, #104	; 0x68
 8003f98:	5a9b      	ldrh	r3, [r3, r2]
 8003f9a:	187a      	adds	r2, r7, r1
 8003f9c:	8812      	ldrh	r2, [r2, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d23d      	bcs.n	800401e <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8003fa6:	60fb      	str	r3, [r7, #12]
  return(result);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fac:	2301      	movs	r3, #1
 8003fae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f383 8810 	msr	PRIMASK, r3
}
 8003fb6:	46c0      	nop			; (mov r8, r8)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	491b      	ldr	r1, [pc, #108]	; (8004030 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8003fc4:	400a      	ands	r2, r1
 8003fc6:	609a      	str	r2, [r3, #8]
 8003fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f383 8810 	msr	PRIMASK, r3
}
 8003fd2:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a17      	ldr	r2, [pc, #92]	; (8004034 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8003fd8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fda:	f3ef 8310 	mrs	r3, PRIMASK
 8003fde:	61bb      	str	r3, [r7, #24]
  return(result);
 8003fe0:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003fe2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	f383 8810 	msr	PRIMASK, r3
}
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2120      	movs	r1, #32
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004002:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	f383 8810 	msr	PRIMASK, r3
}
 800400a:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800400c:	e007      	b.n	800401e <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699a      	ldr	r2, [r3, #24]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2108      	movs	r1, #8
 800401a:	430a      	orrs	r2, r1
 800401c:	619a      	str	r2, [r3, #24]
}
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	46bd      	mov	sp, r7
 8004022:	b01e      	add	sp, #120	; 0x78
 8004024:	bd80      	pop	{r7, pc}
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	fffffeff 	.word	0xfffffeff
 800402c:	effffffe 	.word	0xeffffffe
 8004030:	efffffff 	.word	0xefffffff
 8004034:	080038ed 	.word	0x080038ed

08004038 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004040:	46c0      	nop			; (mov r8, r8)
 8004042:	46bd      	mov	sp, r7
 8004044:	b002      	add	sp, #8
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004050:	46c0      	nop			; (mov r8, r8)
 8004052:	46bd      	mov	sp, r7
 8004054:	b002      	add	sp, #8
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004060:	46c0      	nop			; (mov r8, r8)
 8004062:	46bd      	mov	sp, r7
 8004064:	b002      	add	sp, #8
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2284      	movs	r2, #132	; 0x84
 8004074:	5c9b      	ldrb	r3, [r3, r2]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_UARTEx_DisableFifoMode+0x16>
 800407a:	2302      	movs	r3, #2
 800407c:	e027      	b.n	80040ce <HAL_UARTEx_DisableFifoMode+0x66>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2284      	movs	r2, #132	; 0x84
 8004082:	2101      	movs	r1, #1
 8004084:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2288      	movs	r2, #136	; 0x88
 800408a:	2124      	movs	r1, #36	; 0x24
 800408c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2101      	movs	r1, #1
 80040a2:	438a      	bics	r2, r1
 80040a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4a0b      	ldr	r2, [pc, #44]	; (80040d8 <HAL_UARTEx_DisableFifoMode+0x70>)
 80040aa:	4013      	ands	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2288      	movs	r2, #136	; 0x88
 80040c0:	2120      	movs	r1, #32
 80040c2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2284      	movs	r2, #132	; 0x84
 80040c8:	2100      	movs	r1, #0
 80040ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	0018      	movs	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	b004      	add	sp, #16
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	46c0      	nop			; (mov r8, r8)
 80040d8:	dfffffff 	.word	0xdfffffff

080040dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2284      	movs	r2, #132	; 0x84
 80040ea:	5c9b      	ldrb	r3, [r3, r2]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d101      	bne.n	80040f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80040f0:	2302      	movs	r3, #2
 80040f2:	e02e      	b.n	8004152 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2284      	movs	r2, #132	; 0x84
 80040f8:	2101      	movs	r1, #1
 80040fa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2288      	movs	r2, #136	; 0x88
 8004100:	2124      	movs	r1, #36	; 0x24
 8004102:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2101      	movs	r1, #1
 8004118:	438a      	bics	r2, r1
 800411a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	08d9      	lsrs	r1, r3, #3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	0018      	movs	r0, r3
 8004134:	f000 f854 	bl	80041e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2288      	movs	r2, #136	; 0x88
 8004144:	2120      	movs	r1, #32
 8004146:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2284      	movs	r2, #132	; 0x84
 800414c:	2100      	movs	r1, #0
 800414e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	0018      	movs	r0, r3
 8004154:	46bd      	mov	sp, r7
 8004156:	b004      	add	sp, #16
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2284      	movs	r2, #132	; 0x84
 800416a:	5c9b      	ldrb	r3, [r3, r2]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004170:	2302      	movs	r3, #2
 8004172:	e02f      	b.n	80041d4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2284      	movs	r2, #132	; 0x84
 8004178:	2101      	movs	r1, #1
 800417a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2288      	movs	r2, #136	; 0x88
 8004180:	2124      	movs	r1, #36	; 0x24
 8004182:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2101      	movs	r1, #1
 8004198:	438a      	bics	r2, r1
 800419a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	4a0e      	ldr	r2, [pc, #56]	; (80041dc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	0019      	movs	r1, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	0018      	movs	r0, r3
 80041b6:	f000 f813 	bl	80041e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2288      	movs	r2, #136	; 0x88
 80041c6:	2120      	movs	r1, #32
 80041c8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2284      	movs	r2, #132	; 0x84
 80041ce:	2100      	movs	r1, #0
 80041d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	0018      	movs	r0, r3
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b004      	add	sp, #16
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	f1ffffff 	.word	0xf1ffffff

080041e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80041e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d108      	bne.n	8004202 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	226a      	movs	r2, #106	; 0x6a
 80041f4:	2101      	movs	r1, #1
 80041f6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2268      	movs	r2, #104	; 0x68
 80041fc:	2101      	movs	r1, #1
 80041fe:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004200:	e043      	b.n	800428a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004202:	260f      	movs	r6, #15
 8004204:	19bb      	adds	r3, r7, r6
 8004206:	2208      	movs	r2, #8
 8004208:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800420a:	200e      	movs	r0, #14
 800420c:	183b      	adds	r3, r7, r0
 800420e:	2208      	movs	r2, #8
 8004210:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	0e5b      	lsrs	r3, r3, #25
 800421a:	b2da      	uxtb	r2, r3
 800421c:	240d      	movs	r4, #13
 800421e:	193b      	adds	r3, r7, r4
 8004220:	2107      	movs	r1, #7
 8004222:	400a      	ands	r2, r1
 8004224:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	0f5b      	lsrs	r3, r3, #29
 800422e:	b2da      	uxtb	r2, r3
 8004230:	250c      	movs	r5, #12
 8004232:	197b      	adds	r3, r7, r5
 8004234:	2107      	movs	r1, #7
 8004236:	400a      	ands	r2, r1
 8004238:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800423a:	183b      	adds	r3, r7, r0
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	197a      	adds	r2, r7, r5
 8004240:	7812      	ldrb	r2, [r2, #0]
 8004242:	4914      	ldr	r1, [pc, #80]	; (8004294 <UARTEx_SetNbDataToProcess+0xb4>)
 8004244:	5c8a      	ldrb	r2, [r1, r2]
 8004246:	435a      	muls	r2, r3
 8004248:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800424a:	197b      	adds	r3, r7, r5
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	4a12      	ldr	r2, [pc, #72]	; (8004298 <UARTEx_SetNbDataToProcess+0xb8>)
 8004250:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004252:	0019      	movs	r1, r3
 8004254:	f7fb ffe6 	bl	8000224 <__divsi3>
 8004258:	0003      	movs	r3, r0
 800425a:	b299      	uxth	r1, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	226a      	movs	r2, #106	; 0x6a
 8004260:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004262:	19bb      	adds	r3, r7, r6
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	193a      	adds	r2, r7, r4
 8004268:	7812      	ldrb	r2, [r2, #0]
 800426a:	490a      	ldr	r1, [pc, #40]	; (8004294 <UARTEx_SetNbDataToProcess+0xb4>)
 800426c:	5c8a      	ldrb	r2, [r1, r2]
 800426e:	435a      	muls	r2, r3
 8004270:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004272:	193b      	adds	r3, r7, r4
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	4a08      	ldr	r2, [pc, #32]	; (8004298 <UARTEx_SetNbDataToProcess+0xb8>)
 8004278:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800427a:	0019      	movs	r1, r3
 800427c:	f7fb ffd2 	bl	8000224 <__divsi3>
 8004280:	0003      	movs	r3, r0
 8004282:	b299      	uxth	r1, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2268      	movs	r2, #104	; 0x68
 8004288:	5299      	strh	r1, [r3, r2]
}
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	46bd      	mov	sp, r7
 800428e:	b005      	add	sp, #20
 8004290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004292:	46c0      	nop			; (mov r8, r8)
 8004294:	08004384 	.word	0x08004384
 8004298:	0800438c 	.word	0x0800438c

0800429c <__libc_init_array>:
 800429c:	b570      	push	{r4, r5, r6, lr}
 800429e:	2600      	movs	r6, #0
 80042a0:	4d0c      	ldr	r5, [pc, #48]	; (80042d4 <__libc_init_array+0x38>)
 80042a2:	4c0d      	ldr	r4, [pc, #52]	; (80042d8 <__libc_init_array+0x3c>)
 80042a4:	1b64      	subs	r4, r4, r5
 80042a6:	10a4      	asrs	r4, r4, #2
 80042a8:	42a6      	cmp	r6, r4
 80042aa:	d109      	bne.n	80042c0 <__libc_init_array+0x24>
 80042ac:	2600      	movs	r6, #0
 80042ae:	f000 f821 	bl	80042f4 <_init>
 80042b2:	4d0a      	ldr	r5, [pc, #40]	; (80042dc <__libc_init_array+0x40>)
 80042b4:	4c0a      	ldr	r4, [pc, #40]	; (80042e0 <__libc_init_array+0x44>)
 80042b6:	1b64      	subs	r4, r4, r5
 80042b8:	10a4      	asrs	r4, r4, #2
 80042ba:	42a6      	cmp	r6, r4
 80042bc:	d105      	bne.n	80042ca <__libc_init_array+0x2e>
 80042be:	bd70      	pop	{r4, r5, r6, pc}
 80042c0:	00b3      	lsls	r3, r6, #2
 80042c2:	58eb      	ldr	r3, [r5, r3]
 80042c4:	4798      	blx	r3
 80042c6:	3601      	adds	r6, #1
 80042c8:	e7ee      	b.n	80042a8 <__libc_init_array+0xc>
 80042ca:	00b3      	lsls	r3, r6, #2
 80042cc:	58eb      	ldr	r3, [r5, r3]
 80042ce:	4798      	blx	r3
 80042d0:	3601      	adds	r6, #1
 80042d2:	e7f2      	b.n	80042ba <__libc_init_array+0x1e>
 80042d4:	08004394 	.word	0x08004394
 80042d8:	08004394 	.word	0x08004394
 80042dc:	08004394 	.word	0x08004394
 80042e0:	08004398 	.word	0x08004398

080042e4 <memset>:
 80042e4:	0003      	movs	r3, r0
 80042e6:	1882      	adds	r2, r0, r2
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d100      	bne.n	80042ee <memset+0xa>
 80042ec:	4770      	bx	lr
 80042ee:	7019      	strb	r1, [r3, #0]
 80042f0:	3301      	adds	r3, #1
 80042f2:	e7f9      	b.n	80042e8 <memset+0x4>

080042f4 <_init>:
 80042f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fa:	bc08      	pop	{r3}
 80042fc:	469e      	mov	lr, r3
 80042fe:	4770      	bx	lr

08004300 <_fini>:
 8004300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004302:	46c0      	nop			; (mov r8, r8)
 8004304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004306:	bc08      	pop	{r3}
 8004308:	469e      	mov	lr, r3
 800430a:	4770      	bx	lr
