
ledsViaUart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005180  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08005238  08005238  00015238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800540c  0800540c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  0800540c  0800540c  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800540c  0800540c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800540c  0800540c  0001540c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005410  08005410  00015410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08005414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000008c  080054a0  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  080054a0  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012602  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ae  00000000  00000000  000326b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00034f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  00035dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017753  00000000  00000000  00036b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139f6  00000000  00000000  0004e273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ea2b  00000000  00000000  00061c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0694  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003738  00000000  00000000  000f06e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000008c 	.word	0x2000008c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005220 	.word	0x08005220

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000090 	.word	0x20000090
 80000fc:	08005220 	.word	0x08005220

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	; 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	; 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	; 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <TimerBlinkIT>:
uint8_t OutOfRangeMes[20] = "OutOfRange \n";
uint8_t EndOfParsingMes[5] = "End\n";
uint8_t ParsingMes[20] = "Parsing \n";
int CurrentPeriod = 1000;

void TimerBlinkIT(){
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_9);
 8000414:	2380      	movs	r3, #128	; 0x80
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	4a03      	ldr	r2, [pc, #12]	; (8000428 <TimerBlinkIT+0x18>)
 800041a:	0019      	movs	r1, r3
 800041c:	0010      	movs	r0, r2
 800041e:	f000 ff50 	bl	80012c2 <HAL_GPIO_TogglePin>
}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	50000c00 	.word	0x50000c00

0800042c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]

  if(huart == &huart2) {
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	4b07      	ldr	r3, [pc, #28]	; (8000454 <HAL_UART_RxCpltCallback+0x28>)
 8000438:	429a      	cmp	r2, r3
 800043a:	d107      	bne.n	800044c <HAL_UART_RxCpltCallback+0x20>
	  HAL_UART_Receive_IT(&huart2, RxBuf, 1);
 800043c:	4906      	ldr	r1, [pc, #24]	; (8000458 <HAL_UART_RxCpltCallback+0x2c>)
 800043e:	4b05      	ldr	r3, [pc, #20]	; (8000454 <HAL_UART_RxCpltCallback+0x28>)
 8000440:	2201      	movs	r2, #1
 8000442:	0018      	movs	r0, r3
 8000444:	f002 f98e 	bl	8002764 <HAL_UART_Receive_IT>
	  ParsingProtocol();
 8000448:	f000 f808 	bl	800045c <ParsingProtocol>
  }
}
 800044c:	46c0      	nop			; (mov r8, r8)
 800044e:	46bd      	mov	sp, r7
 8000450:	b002      	add	sp, #8
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20000164 	.word	0x20000164
 8000458:	200000ac 	.word	0x200000ac

0800045c <ParsingProtocol>:

void ParsingProtocol(){
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	if (ParsingSTATUS == WAITING){
 8000460:	4b2b      	ldr	r3, [pc, #172]	; (8000510 <ParsingProtocol+0xb4>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d11b      	bne.n	80004a0 <ParsingProtocol+0x44>
	  if(RxBuf[0] == FIRSTCHAR){
 8000468:	4b2a      	ldr	r3, [pc, #168]	; (8000514 <ParsingProtocol+0xb8>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b3a      	cmp	r3, #58	; 0x3a
 800046e:	d103      	bne.n	8000478 <ParsingProtocol+0x1c>
		  ParsingSTATUS = PARSING;
 8000470:	4b27      	ldr	r3, [pc, #156]	; (8000510 <ParsingProtocol+0xb4>)
 8000472:	2201      	movs	r2, #1
 8000474:	701a      	strb	r2, [r3, #0]
			  LastCharCount = 0;
			  ParsingSTATUS = WAITING;
		  }
	  }
	}
}
 8000476:	e047      	b.n	8000508 <ParsingProtocol+0xac>
		  while(HAL_UART_GetState(&huart2) == HAL_UART_STATE_BUSY_TX);
 8000478:	46c0      	nop			; (mov r8, r8)
 800047a:	4b27      	ldr	r3, [pc, #156]	; (8000518 <ParsingProtocol+0xbc>)
 800047c:	0018      	movs	r0, r3
 800047e:	f002 fd0a 	bl	8002e96 <HAL_UART_GetState>
 8000482:	0003      	movs	r3, r0
 8000484:	2b21      	cmp	r3, #33	; 0x21
 8000486:	d0f8      	beq.n	800047a <ParsingProtocol+0x1e>
		  HAL_UART_Transmit_IT(&huart2, WrongSeqMes, strlen((const char*)WrongSeqMes));
 8000488:	4b24      	ldr	r3, [pc, #144]	; (800051c <ParsingProtocol+0xc0>)
 800048a:	0018      	movs	r0, r3
 800048c:	f7ff fe38 	bl	8000100 <strlen>
 8000490:	0003      	movs	r3, r0
 8000492:	b29a      	uxth	r2, r3
 8000494:	4921      	ldr	r1, [pc, #132]	; (800051c <ParsingProtocol+0xc0>)
 8000496:	4b20      	ldr	r3, [pc, #128]	; (8000518 <ParsingProtocol+0xbc>)
 8000498:	0018      	movs	r0, r3
 800049a:	f002 f8bb 	bl	8002614 <HAL_UART_Transmit_IT>
}
 800049e:	e033      	b.n	8000508 <ParsingProtocol+0xac>
	}else if(ParsingSTATUS == PARSING){
 80004a0:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <ParsingProtocol+0xb4>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d12f      	bne.n	8000508 <ParsingProtocol+0xac>
	  if(RxBuf[0] == LASTCHAR){
 80004a8:	4b1a      	ldr	r3, [pc, #104]	; (8000514 <ParsingProtocol+0xb8>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b3b      	cmp	r3, #59	; 0x3b
 80004ae:	d106      	bne.n	80004be <ParsingProtocol+0x62>
		  ParsingSTATUS = EndOfParsing;
 80004b0:	4b17      	ldr	r3, [pc, #92]	; (8000510 <ParsingProtocol+0xb4>)
 80004b2:	2202      	movs	r2, #2
 80004b4:	701a      	strb	r2, [r3, #0]
		  LastCharCount = 0;
 80004b6:	4b1a      	ldr	r3, [pc, #104]	; (8000520 <ParsingProtocol+0xc4>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	701a      	strb	r2, [r3, #0]
}
 80004bc:	e024      	b.n	8000508 <ParsingProtocol+0xac>
		  if (LastCharCount < MAXPERIOD){
 80004be:	4b18      	ldr	r3, [pc, #96]	; (8000520 <ParsingProtocol+0xc4>)
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	2b05      	cmp	r3, #5
 80004c4:	d81a      	bhi.n	80004fc <ParsingProtocol+0xa0>
			  if (RxBuf[0] >= 0x30 && RxBuf[0] <= 0x39){
 80004c6:	4b13      	ldr	r3, [pc, #76]	; (8000514 <ParsingProtocol+0xb8>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2b2f      	cmp	r3, #47	; 0x2f
 80004cc:	d90f      	bls.n	80004ee <ParsingProtocol+0x92>
 80004ce:	4b11      	ldr	r3, [pc, #68]	; (8000514 <ParsingProtocol+0xb8>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	2b39      	cmp	r3, #57	; 0x39
 80004d4:	d80b      	bhi.n	80004ee <ParsingProtocol+0x92>
				  RxMessage[LastCharCount++] = RxBuf[0];
 80004d6:	4b12      	ldr	r3, [pc, #72]	; (8000520 <ParsingProtocol+0xc4>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	1c5a      	adds	r2, r3, #1
 80004dc:	b2d1      	uxtb	r1, r2
 80004de:	4a10      	ldr	r2, [pc, #64]	; (8000520 <ParsingProtocol+0xc4>)
 80004e0:	7011      	strb	r1, [r2, #0]
 80004e2:	001a      	movs	r2, r3
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <ParsingProtocol+0xb8>)
 80004e6:	7819      	ldrb	r1, [r3, #0]
 80004e8:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <ParsingProtocol+0xc8>)
 80004ea:	5499      	strb	r1, [r3, r2]
}
 80004ec:	e00c      	b.n	8000508 <ParsingProtocol+0xac>
				  ParsingSTATUS = WAITING;
 80004ee:	4b08      	ldr	r3, [pc, #32]	; (8000510 <ParsingProtocol+0xb4>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	701a      	strb	r2, [r3, #0]
				  LastCharCount = 0;
 80004f4:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <ParsingProtocol+0xc4>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	701a      	strb	r2, [r3, #0]
}
 80004fa:	e005      	b.n	8000508 <ParsingProtocol+0xac>
			  LastCharCount = 0;
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <ParsingProtocol+0xc4>)
 80004fe:	2200      	movs	r2, #0
 8000500:	701a      	strb	r2, [r3, #0]
			  ParsingSTATUS = WAITING;
 8000502:	4b03      	ldr	r3, [pc, #12]	; (8000510 <ParsingProtocol+0xb4>)
 8000504:	2200      	movs	r2, #0
 8000506:	701a      	strb	r2, [r3, #0]
}
 8000508:	46c0      	nop			; (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	200000a8 	.word	0x200000a8
 8000514:	200000ac 	.word	0x200000ac
 8000518:	20000164 	.word	0x20000164
 800051c:	20000000 	.word	0x20000000
 8000520:	200000a9 	.word	0x200000a9
 8000524:	200000b0 	.word	0x200000b0

08000528 <ChangeDelayBlinking>:


void ChangeDelayBlinking(){
 8000528:	b580      	push	{r7, lr}
 800052a:	b0b8      	sub	sp, #224	; 0xe0
 800052c:	af00      	add	r7, sp, #0
	if (ParsingSTATUS == EndOfParsing){
 800052e:	4b3d      	ldr	r3, [pc, #244]	; (8000624 <ChangeDelayBlinking+0xfc>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b02      	cmp	r3, #2
 8000534:	d171      	bne.n	800061a <ChangeDelayBlinking+0xf2>
		ParsingSTATUS = WAITING;
 8000536:	4b3b      	ldr	r3, [pc, #236]	; (8000624 <ChangeDelayBlinking+0xfc>)
 8000538:	2200      	movs	r2, #0
 800053a:	701a      	strb	r2, [r3, #0]

		int channel = RxMessage[0] - '0';
 800053c:	4b3a      	ldr	r3, [pc, #232]	; (8000628 <ChangeDelayBlinking+0x100>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	3b30      	subs	r3, #48	; 0x30
 8000542:	22d8      	movs	r2, #216	; 0xd8
 8000544:	18ba      	adds	r2, r7, r2
 8000546:	6013      	str	r3, [r2, #0]
		char periodChar[MAXPERIOD] = {};
 8000548:	23cc      	movs	r3, #204	; 0xcc
 800054a:	18fb      	adds	r3, r7, r3
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	2200      	movs	r2, #0
 8000552:	809a      	strh	r2, [r3, #4]
		uint8_t temp[200] = "";
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	3304      	adds	r3, #4
 800055c:	22c4      	movs	r2, #196	; 0xc4
 800055e:	2100      	movs	r1, #0
 8000560:	0018      	movs	r0, r3
 8000562:	f004 f951 	bl	8004808 <memset>

		for (int i = 1; i < strlen((const char*)RxMessage); i++){
 8000566:	2301      	movs	r3, #1
 8000568:	22dc      	movs	r2, #220	; 0xdc
 800056a:	18ba      	adds	r2, r7, r2
 800056c:	6013      	str	r3, [r2, #0]
 800056e:	e010      	b.n	8000592 <ChangeDelayBlinking+0x6a>
		 periodChar[i - 1] = RxMessage[i];
 8000570:	20dc      	movs	r0, #220	; 0xdc
 8000572:	183b      	adds	r3, r7, r0
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	3b01      	subs	r3, #1
 8000578:	492b      	ldr	r1, [pc, #172]	; (8000628 <ChangeDelayBlinking+0x100>)
 800057a:	183a      	adds	r2, r7, r0
 800057c:	6812      	ldr	r2, [r2, #0]
 800057e:	188a      	adds	r2, r1, r2
 8000580:	7811      	ldrb	r1, [r2, #0]
 8000582:	22cc      	movs	r2, #204	; 0xcc
 8000584:	18ba      	adds	r2, r7, r2
 8000586:	54d1      	strb	r1, [r2, r3]
		for (int i = 1; i < strlen((const char*)RxMessage); i++){
 8000588:	183b      	adds	r3, r7, r0
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	3301      	adds	r3, #1
 800058e:	183a      	adds	r2, r7, r0
 8000590:	6013      	str	r3, [r2, #0]
 8000592:	4b25      	ldr	r3, [pc, #148]	; (8000628 <ChangeDelayBlinking+0x100>)
 8000594:	0018      	movs	r0, r3
 8000596:	f7ff fdb3 	bl	8000100 <strlen>
 800059a:	0002      	movs	r2, r0
 800059c:	23dc      	movs	r3, #220	; 0xdc
 800059e:	18fb      	adds	r3, r7, r3
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d8e4      	bhi.n	8000570 <ChangeDelayBlinking+0x48>
		}
		int periodInt = atoi(periodChar);
 80005a6:	23cc      	movs	r3, #204	; 0xcc
 80005a8:	18fb      	adds	r3, r7, r3
 80005aa:	0018      	movs	r0, r3
 80005ac:	f004 f8fc 	bl	80047a8 <atoi>
 80005b0:	0003      	movs	r3, r0
 80005b2:	22d4      	movs	r2, #212	; 0xd4
 80005b4:	18ba      	adds	r2, r7, r2
 80005b6:	6013      	str	r3, [r2, #0]


		sprintf((char *)temp, "Status: %s RxMes: %s \n",(char *)EndOfParsingMes, (char *)RxMessage);
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <ChangeDelayBlinking+0x100>)
 80005ba:	4a1c      	ldr	r2, [pc, #112]	; (800062c <ChangeDelayBlinking+0x104>)
 80005bc:	491c      	ldr	r1, [pc, #112]	; (8000630 <ChangeDelayBlinking+0x108>)
 80005be:	1d38      	adds	r0, r7, #4
 80005c0:	f004 f92a 	bl	8004818 <siprintf>
		while(HAL_UART_GetState(&huart2) == HAL_UART_STATE_BUSY_TX);
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <ChangeDelayBlinking+0x10c>)
 80005c8:	0018      	movs	r0, r3
 80005ca:	f002 fc64 	bl	8002e96 <HAL_UART_GetState>
 80005ce:	0003      	movs	r3, r0
 80005d0:	2b21      	cmp	r3, #33	; 0x21
 80005d2:	d0f8      	beq.n	80005c6 <ChangeDelayBlinking+0x9e>
		HAL_UART_Transmit_IT(&huart2, temp, strlen((const char*)temp));
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	0018      	movs	r0, r3
 80005d8:	f7ff fd92 	bl	8000100 <strlen>
 80005dc:	0003      	movs	r3, r0
 80005de:	b29a      	uxth	r2, r3
 80005e0:	1d39      	adds	r1, r7, #4
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <ChangeDelayBlinking+0x10c>)
 80005e4:	0018      	movs	r0, r3
 80005e6:	f002 f815 	bl	8002614 <HAL_UART_Transmit_IT>

		if (channel == 0){
 80005ea:	23d8      	movs	r3, #216	; 0xd8
 80005ec:	18fb      	adds	r3, r7, r3
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d10c      	bne.n	800060e <ChangeDelayBlinking+0xe6>
			htim6.Init.Period = periodInt;
 80005f4:	23d4      	movs	r3, #212	; 0xd4
 80005f6:	18fb      	adds	r3, r7, r3
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <ChangeDelayBlinking+0x110>)
 80005fc:	60da      	str	r2, [r3, #12]
			HAL_TIM_Base_Init(&htim6);
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <ChangeDelayBlinking+0x110>)
 8000600:	0018      	movs	r0, r3
 8000602:	f001 fcb3 	bl	8001f6c <HAL_TIM_Base_Init>
			HAL_TIM_Base_Start_IT(&htim6);
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <ChangeDelayBlinking+0x110>)
 8000608:	0018      	movs	r0, r3
 800060a:	f001 fd07 	bl	800201c <HAL_TIM_Base_Start_IT>
		}else if(channel == 1){

		}
		memset(RxMessage, 0, MAXRxMessage*sizeof(RxMessage[0]));
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <ChangeDelayBlinking+0x100>)
 8000610:	2264      	movs	r2, #100	; 0x64
 8000612:	2100      	movs	r1, #0
 8000614:	0018      	movs	r0, r3
 8000616:	f004 f8f7 	bl	8004808 <memset>
	}
}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	b038      	add	sp, #224	; 0xe0
 8000620:	bd80      	pop	{r7, pc}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	200000a8 	.word	0x200000a8
 8000628:	200000b0 	.word	0x200000b0
 800062c:	20000014 	.word	0x20000014
 8000630:	08005238 	.word	0x08005238
 8000634:	20000164 	.word	0x20000164
 8000638:	20000118 	.word	0x20000118

0800063c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b089      	sub	sp, #36	; 0x24
 8000640:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	240c      	movs	r4, #12
 8000644:	193b      	adds	r3, r7, r4
 8000646:	0018      	movs	r0, r3
 8000648:	2314      	movs	r3, #20
 800064a:	001a      	movs	r2, r3
 800064c:	2100      	movs	r1, #0
 800064e:	f004 f8db 	bl	8004808 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000652:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <MX_GPIO_Init+0x9c>)
 8000654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <MX_GPIO_Init+0x9c>)
 8000658:	2120      	movs	r1, #32
 800065a:	430a      	orrs	r2, r1
 800065c:	635a      	str	r2, [r3, #52]	; 0x34
 800065e:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <MX_GPIO_Init+0x9c>)
 8000660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000662:	2220      	movs	r2, #32
 8000664:	4013      	ands	r3, r2
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <MX_GPIO_Init+0x9c>)
 800066c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_GPIO_Init+0x9c>)
 8000670:	2101      	movs	r1, #1
 8000672:	430a      	orrs	r2, r1
 8000674:	635a      	str	r2, [r3, #52]	; 0x34
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_GPIO_Init+0x9c>)
 8000678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800067a:	2201      	movs	r2, #1
 800067c:	4013      	ands	r3, r2
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_GPIO_Init+0x9c>)
 8000684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <MX_GPIO_Init+0x9c>)
 8000688:	2108      	movs	r1, #8
 800068a:	430a      	orrs	r2, r1
 800068c:	635a      	str	r2, [r3, #52]	; 0x34
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_GPIO_Init+0x9c>)
 8000690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000692:	2208      	movs	r2, #8
 8000694:	4013      	ands	r3, r2
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 800069a:	2380      	movs	r3, #128	; 0x80
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	480f      	ldr	r0, [pc, #60]	; (80006dc <MX_GPIO_Init+0xa0>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	0019      	movs	r1, r3
 80006a4:	f000 fdf0 	bl	8001288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	2280      	movs	r2, #128	; 0x80
 80006ac:	0092      	lsls	r2, r2, #2
 80006ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	2201      	movs	r2, #1
 80006b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	4a05      	ldr	r2, [pc, #20]	; (80006dc <MX_GPIO_Init+0xa0>)
 80006c6:	0019      	movs	r1, r3
 80006c8:	0010      	movs	r0, r2
 80006ca:	f000 fc79 	bl	8000fc0 <HAL_GPIO_Init>

}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b009      	add	sp, #36	; 0x24
 80006d4:	bd90      	pop	{r4, r7, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	40021000 	.word	0x40021000
 80006dc:	50000c00 	.word	0x50000c00

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e4:	f000 fa3c 	bl	8000b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e8:	f000 f814 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ec:	f7ff ffa6 	bl	800063c <MX_GPIO_Init>
  MX_TIM6_Init();
 80006f0:	f000 f8f0 	bl	80008d4 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80006f4:	f000 f954 	bl	80009a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, RxBuf, 1);
 80006f8:	4904      	ldr	r1, [pc, #16]	; (800070c <main+0x2c>)
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <main+0x30>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	0018      	movs	r0, r3
 8000700:	f002 f830 	bl	8002764 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	ChangeDelayBlinking();
 8000704:	f7ff ff10 	bl	8000528 <ChangeDelayBlinking>
  {
 8000708:	e7fc      	b.n	8000704 <main+0x24>
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	200000ac 	.word	0x200000ac
 8000710:	20000164 	.word	0x20000164

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b093      	sub	sp, #76	; 0x4c
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	2414      	movs	r4, #20
 800071c:	193b      	adds	r3, r7, r4
 800071e:	0018      	movs	r0, r3
 8000720:	2334      	movs	r3, #52	; 0x34
 8000722:	001a      	movs	r2, r3
 8000724:	2100      	movs	r1, #0
 8000726:	f004 f86f 	bl	8004808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	0018      	movs	r0, r3
 800072e:	2310      	movs	r3, #16
 8000730:	001a      	movs	r2, r3
 8000732:	2100      	movs	r1, #0
 8000734:	f004 f868 	bl	8004808 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	0018      	movs	r0, r3
 800073e:	f000 fddb 	bl	80012f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000742:	193b      	adds	r3, r7, r4
 8000744:	2202      	movs	r2, #2
 8000746:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	193b      	adds	r3, r7, r4
 800074a:	2280      	movs	r2, #128	; 0x80
 800074c:	0052      	lsls	r2, r2, #1
 800074e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000750:	193b      	adds	r3, r7, r4
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2240      	movs	r2, #64	; 0x40
 800075a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800075c:	193b      	adds	r3, r7, r4
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000762:	193b      	adds	r3, r7, r4
 8000764:	0018      	movs	r0, r3
 8000766:	f000 fe13 	bl	8001390 <HAL_RCC_OscConfig>
 800076a:	1e03      	subs	r3, r0, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800076e:	f000 f819 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2207      	movs	r2, #7
 8000776:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2200      	movs	r2, #0
 800077c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2100      	movs	r1, #0
 800078e:	0018      	movs	r0, r3
 8000790:	f001 f90e 	bl	80019b0 <HAL_RCC_ClockConfig>
 8000794:	1e03      	subs	r3, r0, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000798:	f000 f804 	bl	80007a4 <Error_Handler>
  }
}
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	b013      	add	sp, #76	; 0x4c
 80007a2:	bd90      	pop	{r4, r7, pc}

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	e7fe      	b.n	80007ac <Error_Handler+0x8>
	...

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <HAL_MspInit+0x44>)
 80007b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <HAL_MspInit+0x44>)
 80007bc:	2101      	movs	r1, #1
 80007be:	430a      	orrs	r2, r1
 80007c0:	641a      	str	r2, [r3, #64]	; 0x40
 80007c2:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <HAL_MspInit+0x44>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	2201      	movs	r2, #1
 80007c8:	4013      	ands	r3, r2
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <HAL_MspInit+0x44>)
 80007d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <HAL_MspInit+0x44>)
 80007d4:	2180      	movs	r1, #128	; 0x80
 80007d6:	0549      	lsls	r1, r1, #21
 80007d8:	430a      	orrs	r2, r1
 80007da:	63da      	str	r2, [r3, #60]	; 0x3c
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <HAL_MspInit+0x44>)
 80007de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007e0:	2380      	movs	r3, #128	; 0x80
 80007e2:	055b      	lsls	r3, r3, #21
 80007e4:	4013      	ands	r3, r2
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b002      	add	sp, #8
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	40021000 	.word	0x40021000

080007f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <NMI_Handler+0x4>

080007fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000802:	e7fe      	b.n	8000802 <HardFault_Handler+0x4>

08000804 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800081c:	f000 fa0a 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <TIM6_IRQHandler+0x18>)
 800082e:	0018      	movs	r0, r3
 8000830:	f001 fc4a 	bl	80020c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */
  TimerBlinkIT();
 8000834:	f7ff fdec 	bl	8000410 <TimerBlinkIT>

  /* USER CODE END TIM6_IRQn 1 */
}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	20000118 	.word	0x20000118

08000844 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000848:	4b03      	ldr	r3, [pc, #12]	; (8000858 <USART2_IRQHandler+0x14>)
 800084a:	0018      	movs	r0, r3
 800084c:	f001 ffe2 	bl	8002814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000850:	46c0      	nop			; (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	20000164 	.word	0x20000164

0800085c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000864:	4a14      	ldr	r2, [pc, #80]	; (80008b8 <_sbrk+0x5c>)
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <_sbrk+0x60>)
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <_sbrk+0x64>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d102      	bne.n	800087e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <_sbrk+0x64>)
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <_sbrk+0x68>)
 800087c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <_sbrk+0x64>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	18d3      	adds	r3, r2, r3
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	429a      	cmp	r2, r3
 800088a:	d207      	bcs.n	800089c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800088c:	f003 ff92 	bl	80047b4 <__errno>
 8000890:	0003      	movs	r3, r0
 8000892:	220c      	movs	r2, #12
 8000894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000896:	2301      	movs	r3, #1
 8000898:	425b      	negs	r3, r3
 800089a:	e009      	b.n	80008b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <_sbrk+0x64>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008a2:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <_sbrk+0x64>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	18d2      	adds	r2, r2, r3
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <_sbrk+0x64>)
 80008ac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80008ae:	68fb      	ldr	r3, [r7, #12]
}
 80008b0:	0018      	movs	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b006      	add	sp, #24
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20009000 	.word	0x20009000
 80008bc:	00000400 	.word	0x00000400
 80008c0:	20000114 	.word	0x20000114
 80008c4:	20000210 	.word	0x20000210

080008c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	0018      	movs	r0, r3
 80008de:	230c      	movs	r3, #12
 80008e0:	001a      	movs	r2, r3
 80008e2:	2100      	movs	r1, #0
 80008e4:	f003 ff90 	bl	8004808 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_TIM6_Init+0x74>)
 80008ea:	4a18      	ldr	r2, [pc, #96]	; (800094c <MX_TIM6_Init+0x78>)
 80008ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 12000;
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <MX_TIM6_Init+0x74>)
 80008f0:	4a17      	ldr	r2, [pc, #92]	; (8000950 <MX_TIM6_Init+0x7c>)
 80008f2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_TIM6_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_TIM6_Init+0x74>)
 80008fc:	22fa      	movs	r2, #250	; 0xfa
 80008fe:	0092      	lsls	r2, r2, #2
 8000900:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_TIM6_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_TIM6_Init+0x74>)
 800090a:	0018      	movs	r0, r3
 800090c:	f001 fb2e 	bl	8001f6c <HAL_TIM_Base_Init>
 8000910:	1e03      	subs	r3, r0, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8000914:	f7ff ff46 	bl	80007a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000924:	1d3a      	adds	r2, r7, #4
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_TIM6_Init+0x74>)
 8000928:	0011      	movs	r1, r2
 800092a:	0018      	movs	r0, r3
 800092c:	f001 fd9c 	bl	8002468 <HAL_TIMEx_MasterConfigSynchronization>
 8000930:	1e03      	subs	r3, r0, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8000934:	f7ff ff36 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <MX_TIM6_Init+0x74>)
 800093a:	0018      	movs	r0, r3
 800093c:	f001 fb6e 	bl	800201c <HAL_TIM_Base_Start_IT>

  /* USER CODE END TIM6_Init 2 */

}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	b004      	add	sp, #16
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000118 	.word	0x20000118
 800094c:	40001000 	.word	0x40001000
 8000950:	00002ee0 	.word	0x00002ee0

08000954 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a0d      	ldr	r2, [pc, #52]	; (8000998 <HAL_TIM_Base_MspInit+0x44>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d113      	bne.n	800098e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <HAL_TIM_Base_MspInit+0x48>)
 8000968:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <HAL_TIM_Base_MspInit+0x48>)
 800096c:	2110      	movs	r1, #16
 800096e:	430a      	orrs	r2, r1
 8000970:	63da      	str	r2, [r3, #60]	; 0x3c
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <HAL_TIM_Base_MspInit+0x48>)
 8000974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000976:	2210      	movs	r2, #16
 8000978:	4013      	ands	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	2011      	movs	r0, #17
 8000984:	f000 fa1e 	bl	8000dc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000988:	2011      	movs	r0, #17
 800098a:	f000 fa30 	bl	8000dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	b004      	add	sp, #16
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	40001000 	.word	0x40001000
 800099c:	40021000 	.word	0x40021000

080009a0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a4:	4b23      	ldr	r3, [pc, #140]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009a6:	4a24      	ldr	r2, [pc, #144]	; (8000a38 <MX_USART2_UART_Init+0x98>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009aa:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009ac:	22e1      	movs	r2, #225	; 0xe1
 80009ae:	0252      	lsls	r2, r2, #9
 80009b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009be:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009ea:	0018      	movs	r0, r3
 80009ec:	f001 fdbc 	bl	8002568 <HAL_UART_Init>
 80009f0:	1e03      	subs	r3, r0, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009f4:	f7ff fed6 	bl	80007a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009fa:	2100      	movs	r1, #0
 80009fc:	0018      	movs	r0, r3
 80009fe:	f003 fdf3 	bl	80045e8 <HAL_UARTEx_SetTxFifoThreshold>
 8000a02:	1e03      	subs	r3, r0, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a06:	f7ff fecd 	bl	80007a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f003 fe2a 	bl	8004668 <HAL_UARTEx_SetRxFifoThreshold>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a18:	f7ff fec4 	bl	80007a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f003 fda8 	bl	8004574 <HAL_UARTEx_DisableFifoMode>
 8000a24:	1e03      	subs	r3, r0, #0
 8000a26:	d001      	beq.n	8000a2c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a28:	f7ff febc 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	20000164 	.word	0x20000164
 8000a38:	40004400 	.word	0x40004400

08000a3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b091      	sub	sp, #68	; 0x44
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	232c      	movs	r3, #44	; 0x2c
 8000a46:	18fb      	adds	r3, r7, r3
 8000a48:	0018      	movs	r0, r3
 8000a4a:	2314      	movs	r3, #20
 8000a4c:	001a      	movs	r2, r3
 8000a4e:	2100      	movs	r1, #0
 8000a50:	f003 feda 	bl	8004808 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a54:	2410      	movs	r4, #16
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	0018      	movs	r0, r3
 8000a5a:	231c      	movs	r3, #28
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	2100      	movs	r1, #0
 8000a60:	f003 fed2 	bl	8004808 <memset>
  if(uartHandle->Instance==USART2)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a26      	ldr	r2, [pc, #152]	; (8000b04 <HAL_UART_MspInit+0xc8>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d146      	bne.n	8000afc <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	2202      	movs	r2, #2
 8000a72:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a74:	193b      	adds	r3, r7, r4
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a7a:	193b      	adds	r3, r7, r4
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f001 f941 	bl	8001d04 <HAL_RCCEx_PeriphCLKConfig>
 8000a82:	1e03      	subs	r3, r0, #0
 8000a84:	d001      	beq.n	8000a8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a86:	f7ff fe8d 	bl	80007a4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a8a:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <HAL_UART_MspInit+0xcc>)
 8000a8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <HAL_UART_MspInit+0xcc>)
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	0289      	lsls	r1, r1, #10
 8000a94:	430a      	orrs	r2, r1
 8000a96:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <HAL_UART_MspInit+0xcc>)
 8000a9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a9c:	2380      	movs	r3, #128	; 0x80
 8000a9e:	029b      	lsls	r3, r3, #10
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <HAL_UART_MspInit+0xcc>)
 8000aa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <HAL_UART_MspInit+0xcc>)
 8000aac:	2101      	movs	r1, #1
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <HAL_UART_MspInit+0xcc>)
 8000ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000abe:	212c      	movs	r1, #44	; 0x2c
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2202      	movs	r2, #2
 8000aca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2201      	movs	r2, #1
 8000adc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ade:	187a      	adds	r2, r7, r1
 8000ae0:	23a0      	movs	r3, #160	; 0xa0
 8000ae2:	05db      	lsls	r3, r3, #23
 8000ae4:	0011      	movs	r1, r2
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f000 fa6a 	bl	8000fc0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2100      	movs	r1, #0
 8000af0:	201c      	movs	r0, #28
 8000af2:	f000 f967 	bl	8000dc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000af6:	201c      	movs	r0, #28
 8000af8:	f000 f979 	bl	8000dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b011      	add	sp, #68	; 0x44
 8000b02:	bd90      	pop	{r4, r7, pc}
 8000b04:	40004400 	.word	0x40004400
 8000b08:	40021000 	.word	0x40021000

08000b0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b0c:	480d      	ldr	r0, [pc, #52]	; (8000b44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b0e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b10:	f7ff feda 	bl	80008c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b14:	480c      	ldr	r0, [pc, #48]	; (8000b48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b16:	490d      	ldr	r1, [pc, #52]	; (8000b4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b18:	4a0d      	ldr	r2, [pc, #52]	; (8000b50 <LoopForever+0xe>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b1c:	e002      	b.n	8000b24 <LoopCopyDataInit>

08000b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b22:	3304      	adds	r3, #4

08000b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b28:	d3f9      	bcc.n	8000b1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b2c:	4c0a      	ldr	r4, [pc, #40]	; (8000b58 <LoopForever+0x16>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b30:	e001      	b.n	8000b36 <LoopFillZerobss>

08000b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b34:	3204      	adds	r2, #4

08000b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b38:	d3fb      	bcc.n	8000b32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b3a:	f003 fe41 	bl	80047c0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b3e:	f7ff fdcf 	bl	80006e0 <main>

08000b42 <LoopForever>:

LoopForever:
  b LoopForever
 8000b42:	e7fe      	b.n	8000b42 <LoopForever>
  ldr   r0, =_estack
 8000b44:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b4c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000b50:	08005414 	.word	0x08005414
  ldr r2, =_sbss
 8000b54:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000b58:	2000020c 	.word	0x2000020c

08000b5c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b5c:	e7fe      	b.n	8000b5c <ADC1_IRQHandler>
	...

08000b60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b66:	1dfb      	adds	r3, r7, #7
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <HAL_Init+0x3c>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <HAL_Init+0x3c>)
 8000b72:	2180      	movs	r1, #128	; 0x80
 8000b74:	0049      	lsls	r1, r1, #1
 8000b76:	430a      	orrs	r2, r1
 8000b78:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b7a:	2003      	movs	r0, #3
 8000b7c:	f000 f810 	bl	8000ba0 <HAL_InitTick>
 8000b80:	1e03      	subs	r3, r0, #0
 8000b82:	d003      	beq.n	8000b8c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b84:	1dfb      	adds	r3, r7, #7
 8000b86:	2201      	movs	r2, #1
 8000b88:	701a      	strb	r2, [r3, #0]
 8000b8a:	e001      	b.n	8000b90 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b8c:	f7ff fe10 	bl	80007b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b90:	1dfb      	adds	r3, r7, #7
 8000b92:	781b      	ldrb	r3, [r3, #0]
}
 8000b94:	0018      	movs	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b002      	add	sp, #8
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40022000 	.word	0x40022000

08000ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba8:	230f      	movs	r3, #15
 8000baa:	18fb      	adds	r3, r7, r3
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <HAL_InitTick+0x88>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d02b      	beq.n	8000c10 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000bb8:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <HAL_InitTick+0x8c>)
 8000bba:	681c      	ldr	r4, [r3, #0]
 8000bbc:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <HAL_InitTick+0x88>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	0019      	movs	r1, r3
 8000bc2:	23fa      	movs	r3, #250	; 0xfa
 8000bc4:	0098      	lsls	r0, r3, #2
 8000bc6:	f7ff faad 	bl	8000124 <__udivsi3>
 8000bca:	0003      	movs	r3, r0
 8000bcc:	0019      	movs	r1, r3
 8000bce:	0020      	movs	r0, r4
 8000bd0:	f7ff faa8 	bl	8000124 <__udivsi3>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f000 f919 	bl	8000e0e <HAL_SYSTICK_Config>
 8000bdc:	1e03      	subs	r3, r0, #0
 8000bde:	d112      	bne.n	8000c06 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b03      	cmp	r3, #3
 8000be4:	d80a      	bhi.n	8000bfc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	2301      	movs	r3, #1
 8000bea:	425b      	negs	r3, r3
 8000bec:	2200      	movs	r2, #0
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f000 f8e8 	bl	8000dc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <HAL_InitTick+0x90>)
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	e00d      	b.n	8000c18 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000bfc:	230f      	movs	r3, #15
 8000bfe:	18fb      	adds	r3, r7, r3
 8000c00:	2201      	movs	r2, #1
 8000c02:	701a      	strb	r2, [r3, #0]
 8000c04:	e008      	b.n	8000c18 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c06:	230f      	movs	r3, #15
 8000c08:	18fb      	adds	r3, r7, r3
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
 8000c0e:	e003      	b.n	8000c18 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c10:	230f      	movs	r3, #15
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	2201      	movs	r2, #1
 8000c16:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c18:	230f      	movs	r3, #15
 8000c1a:	18fb      	adds	r3, r7, r3
 8000c1c:	781b      	ldrb	r3, [r3, #0]
}
 8000c1e:	0018      	movs	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b005      	add	sp, #20
 8000c24:	bd90      	pop	{r4, r7, pc}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	20000024 	.word	0x20000024
 8000c2c:	2000001c 	.word	0x2000001c
 8000c30:	20000020 	.word	0x20000020

08000c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <HAL_IncTick+0x1c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_IncTick+0x20>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	18d2      	adds	r2, r2, r3
 8000c44:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <HAL_IncTick+0x20>)
 8000c46:	601a      	str	r2, [r3, #0]
}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	20000024 	.word	0x20000024
 8000c54:	200001f8 	.word	0x200001f8

08000c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b02      	ldr	r3, [pc, #8]	; (8000c68 <HAL_GetTick+0x10>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	0018      	movs	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	200001f8 	.word	0x200001f8

08000c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	0002      	movs	r2, r0
 8000c74:	1dfb      	adds	r3, r7, #7
 8000c76:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c78:	1dfb      	adds	r3, r7, #7
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b7f      	cmp	r3, #127	; 0x7f
 8000c7e:	d809      	bhi.n	8000c94 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c80:	1dfb      	adds	r3, r7, #7
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	001a      	movs	r2, r3
 8000c86:	231f      	movs	r3, #31
 8000c88:	401a      	ands	r2, r3
 8000c8a:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <__NVIC_EnableIRQ+0x30>)
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	4091      	lsls	r1, r2
 8000c90:	000a      	movs	r2, r1
 8000c92:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000c94:	46c0      	nop			; (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b002      	add	sp, #8
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	e000e100 	.word	0xe000e100

08000ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	0002      	movs	r2, r0
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	1dfb      	adds	r3, r7, #7
 8000cac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b7f      	cmp	r3, #127	; 0x7f
 8000cb4:	d828      	bhi.n	8000d08 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb6:	4a2f      	ldr	r2, [pc, #188]	; (8000d74 <__NVIC_SetPriority+0xd4>)
 8000cb8:	1dfb      	adds	r3, r7, #7
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	b25b      	sxtb	r3, r3
 8000cbe:	089b      	lsrs	r3, r3, #2
 8000cc0:	33c0      	adds	r3, #192	; 0xc0
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	589b      	ldr	r3, [r3, r2]
 8000cc6:	1dfa      	adds	r2, r7, #7
 8000cc8:	7812      	ldrb	r2, [r2, #0]
 8000cca:	0011      	movs	r1, r2
 8000ccc:	2203      	movs	r2, #3
 8000cce:	400a      	ands	r2, r1
 8000cd0:	00d2      	lsls	r2, r2, #3
 8000cd2:	21ff      	movs	r1, #255	; 0xff
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	000a      	movs	r2, r1
 8000cd8:	43d2      	mvns	r2, r2
 8000cda:	401a      	ands	r2, r3
 8000cdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	019b      	lsls	r3, r3, #6
 8000ce2:	22ff      	movs	r2, #255	; 0xff
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	0018      	movs	r0, r3
 8000cec:	2303      	movs	r3, #3
 8000cee:	4003      	ands	r3, r0
 8000cf0:	00db      	lsls	r3, r3, #3
 8000cf2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cf4:	481f      	ldr	r0, [pc, #124]	; (8000d74 <__NVIC_SetPriority+0xd4>)
 8000cf6:	1dfb      	adds	r3, r7, #7
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b25b      	sxtb	r3, r3
 8000cfc:	089b      	lsrs	r3, r3, #2
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	33c0      	adds	r3, #192	; 0xc0
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d06:	e031      	b.n	8000d6c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d08:	4a1b      	ldr	r2, [pc, #108]	; (8000d78 <__NVIC_SetPriority+0xd8>)
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	0019      	movs	r1, r3
 8000d10:	230f      	movs	r3, #15
 8000d12:	400b      	ands	r3, r1
 8000d14:	3b08      	subs	r3, #8
 8000d16:	089b      	lsrs	r3, r3, #2
 8000d18:	3306      	adds	r3, #6
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	18d3      	adds	r3, r2, r3
 8000d1e:	3304      	adds	r3, #4
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	1dfa      	adds	r2, r7, #7
 8000d24:	7812      	ldrb	r2, [r2, #0]
 8000d26:	0011      	movs	r1, r2
 8000d28:	2203      	movs	r2, #3
 8000d2a:	400a      	ands	r2, r1
 8000d2c:	00d2      	lsls	r2, r2, #3
 8000d2e:	21ff      	movs	r1, #255	; 0xff
 8000d30:	4091      	lsls	r1, r2
 8000d32:	000a      	movs	r2, r1
 8000d34:	43d2      	mvns	r2, r2
 8000d36:	401a      	ands	r2, r3
 8000d38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	019b      	lsls	r3, r3, #6
 8000d3e:	22ff      	movs	r2, #255	; 0xff
 8000d40:	401a      	ands	r2, r3
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	0018      	movs	r0, r3
 8000d48:	2303      	movs	r3, #3
 8000d4a:	4003      	ands	r3, r0
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d50:	4809      	ldr	r0, [pc, #36]	; (8000d78 <__NVIC_SetPriority+0xd8>)
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	001c      	movs	r4, r3
 8000d58:	230f      	movs	r3, #15
 8000d5a:	4023      	ands	r3, r4
 8000d5c:	3b08      	subs	r3, #8
 8000d5e:	089b      	lsrs	r3, r3, #2
 8000d60:	430a      	orrs	r2, r1
 8000d62:	3306      	adds	r3, #6
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	18c3      	adds	r3, r0, r3
 8000d68:	3304      	adds	r3, #4
 8000d6a:	601a      	str	r2, [r3, #0]
}
 8000d6c:	46c0      	nop			; (mov r8, r8)
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	b003      	add	sp, #12
 8000d72:	bd90      	pop	{r4, r7, pc}
 8000d74:	e000e100 	.word	0xe000e100
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	1e5a      	subs	r2, r3, #1
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	045b      	lsls	r3, r3, #17
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d301      	bcc.n	8000d94 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d90:	2301      	movs	r3, #1
 8000d92:	e010      	b.n	8000db6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d94:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <SysTick_Config+0x44>)
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	425b      	negs	r3, r3
 8000da0:	2103      	movs	r1, #3
 8000da2:	0018      	movs	r0, r3
 8000da4:	f7ff ff7c 	bl	8000ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <SysTick_Config+0x44>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dae:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <SysTick_Config+0x44>)
 8000db0:	2207      	movs	r2, #7
 8000db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	0018      	movs	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b002      	add	sp, #8
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	e000e010 	.word	0xe000e010

08000dc4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
 8000dce:	210f      	movs	r1, #15
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	1c02      	adds	r2, r0, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000dd6:	68ba      	ldr	r2, [r7, #8]
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	b25b      	sxtb	r3, r3
 8000dde:	0011      	movs	r1, r2
 8000de0:	0018      	movs	r0, r3
 8000de2:	f7ff ff5d 	bl	8000ca0 <__NVIC_SetPriority>
}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b004      	add	sp, #16
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	0002      	movs	r2, r0
 8000df6:	1dfb      	adds	r3, r7, #7
 8000df8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	b25b      	sxtb	r3, r3
 8000e00:	0018      	movs	r0, r3
 8000e02:	f7ff ff33 	bl	8000c6c <__NVIC_EnableIRQ>
}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b002      	add	sp, #8
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f7ff ffaf 	bl	8000d7c <SysTick_Config>
 8000e1e:	0003      	movs	r3, r0
}
 8000e20:	0018      	movs	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b002      	add	sp, #8
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d101      	bne.n	8000e3a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e050      	b.n	8000edc <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2225      	movs	r2, #37	; 0x25
 8000e3e:	5c9b      	ldrb	r3, [r3, r2]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d008      	beq.n	8000e58 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2204      	movs	r2, #4
 8000e4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2224      	movs	r2, #36	; 0x24
 8000e50:	2100      	movs	r1, #0
 8000e52:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e041      	b.n	8000edc <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	210e      	movs	r1, #14
 8000e64:	438a      	bics	r2, r1
 8000e66:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	491c      	ldr	r1, [pc, #112]	; (8000ee4 <HAL_DMA_Abort+0xbc>)
 8000e74:	400a      	ands	r2, r1
 8000e76:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2101      	movs	r1, #1
 8000e84:	438a      	bics	r2, r1
 8000e86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8000e88:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <HAL_DMA_Abort+0xc0>)
 8000e8a:	6859      	ldr	r1, [r3, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	221c      	movs	r2, #28
 8000e92:	4013      	ands	r3, r2
 8000e94:	2201      	movs	r2, #1
 8000e96:	409a      	lsls	r2, r3
 8000e98:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <HAL_DMA_Abort+0xc0>)
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000ea6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d00c      	beq.n	8000eca <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000eba:	490a      	ldr	r1, [pc, #40]	; (8000ee4 <HAL_DMA_Abort+0xbc>)
 8000ebc:	400a      	ands	r2, r1
 8000ebe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000ec8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2225      	movs	r2, #37	; 0x25
 8000ece:	2101      	movs	r1, #1
 8000ed0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2224      	movs	r2, #36	; 0x24
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	0018      	movs	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b002      	add	sp, #8
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	fffffeff 	.word	0xfffffeff
 8000ee8:	40020000 	.word	0x40020000

08000eec <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ef4:	210f      	movs	r1, #15
 8000ef6:	187b      	adds	r3, r7, r1
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2225      	movs	r2, #37	; 0x25
 8000f00:	5c9b      	ldrb	r3, [r3, r2]
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d006      	beq.n	8000f16 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f0e:	187b      	adds	r3, r7, r1
 8000f10:	2201      	movs	r2, #1
 8000f12:	701a      	strb	r2, [r3, #0]
 8000f14:	e049      	b.n	8000faa <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	210e      	movs	r1, #14
 8000f22:	438a      	bics	r2, r1
 8000f24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2101      	movs	r1, #1
 8000f32:	438a      	bics	r2, r1
 8000f34:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f40:	491d      	ldr	r1, [pc, #116]	; (8000fb8 <HAL_DMA_Abort_IT+0xcc>)
 8000f42:	400a      	ands	r2, r1
 8000f44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <HAL_DMA_Abort_IT+0xd0>)
 8000f48:	6859      	ldr	r1, [r3, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	221c      	movs	r2, #28
 8000f50:	4013      	ands	r3, r2
 8000f52:	2201      	movs	r2, #1
 8000f54:	409a      	lsls	r2, r3
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_DMA_Abort_IT+0xd0>)
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000f64:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00c      	beq.n	8000f88 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f78:	490f      	ldr	r1, [pc, #60]	; (8000fb8 <HAL_DMA_Abort_IT+0xcc>)
 8000f7a:	400a      	ands	r2, r1
 8000f7c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000f86:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2225      	movs	r2, #37	; 0x25
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2224      	movs	r2, #36	; 0x24
 8000f94:	2100      	movs	r1, #0
 8000f96:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d004      	beq.n	8000faa <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	0010      	movs	r0, r2
 8000fa8:	4798      	blx	r3
    }
  }
  return status;
 8000faa:	230f      	movs	r3, #15
 8000fac:	18fb      	adds	r3, r7, r3
 8000fae:	781b      	ldrb	r3, [r3, #0]
}
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b004      	add	sp, #16
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	fffffeff 	.word	0xfffffeff
 8000fbc:	40020000 	.word	0x40020000

08000fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fce:	e147      	b.n	8001260 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	4091      	lsls	r1, r2
 8000fda:	000a      	movs	r2, r1
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d100      	bne.n	8000fe8 <HAL_GPIO_Init+0x28>
 8000fe6:	e138      	b.n	800125a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2203      	movs	r2, #3
 8000fee:	4013      	ands	r3, r2
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d005      	beq.n	8001000 <HAL_GPIO_Init+0x40>
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d130      	bne.n	8001062 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	2203      	movs	r2, #3
 800100c:	409a      	lsls	r2, r3
 800100e:	0013      	movs	r3, r2
 8001010:	43da      	mvns	r2, r3
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	68da      	ldr	r2, [r3, #12]
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	409a      	lsls	r2, r3
 8001022:	0013      	movs	r3, r2
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001036:	2201      	movs	r2, #1
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
 800103c:	0013      	movs	r3, r2
 800103e:	43da      	mvns	r2, r3
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	091b      	lsrs	r3, r3, #4
 800104c:	2201      	movs	r2, #1
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
 8001054:	0013      	movs	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2203      	movs	r2, #3
 8001068:	4013      	ands	r3, r2
 800106a:	2b03      	cmp	r3, #3
 800106c:	d017      	beq.n	800109e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	2203      	movs	r2, #3
 800107a:	409a      	lsls	r2, r3
 800107c:	0013      	movs	r3, r2
 800107e:	43da      	mvns	r2, r3
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	409a      	lsls	r2, r3
 8001090:	0013      	movs	r3, r2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2203      	movs	r2, #3
 80010a4:	4013      	ands	r3, r2
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d123      	bne.n	80010f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	08da      	lsrs	r2, r3, #3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3208      	adds	r2, #8
 80010b2:	0092      	lsls	r2, r2, #2
 80010b4:	58d3      	ldr	r3, [r2, r3]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	2207      	movs	r2, #7
 80010bc:	4013      	ands	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	220f      	movs	r2, #15
 80010c2:	409a      	lsls	r2, r3
 80010c4:	0013      	movs	r3, r2
 80010c6:	43da      	mvns	r2, r3
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	691a      	ldr	r2, [r3, #16]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	2107      	movs	r1, #7
 80010d6:	400b      	ands	r3, r1
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	409a      	lsls	r2, r3
 80010dc:	0013      	movs	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	08da      	lsrs	r2, r3, #3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3208      	adds	r2, #8
 80010ec:	0092      	lsls	r2, r2, #2
 80010ee:	6939      	ldr	r1, [r7, #16]
 80010f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	2203      	movs	r2, #3
 80010fe:	409a      	lsls	r2, r3
 8001100:	0013      	movs	r3, r2
 8001102:	43da      	mvns	r2, r3
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2203      	movs	r2, #3
 8001110:	401a      	ands	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	409a      	lsls	r2, r3
 8001118:	0013      	movs	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	23c0      	movs	r3, #192	; 0xc0
 800112c:	029b      	lsls	r3, r3, #10
 800112e:	4013      	ands	r3, r2
 8001130:	d100      	bne.n	8001134 <HAL_GPIO_Init+0x174>
 8001132:	e092      	b.n	800125a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001134:	4a50      	ldr	r2, [pc, #320]	; (8001278 <HAL_GPIO_Init+0x2b8>)
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	089b      	lsrs	r3, r3, #2
 800113a:	3318      	adds	r3, #24
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	589b      	ldr	r3, [r3, r2]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	2203      	movs	r2, #3
 8001146:	4013      	ands	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	220f      	movs	r2, #15
 800114c:	409a      	lsls	r2, r3
 800114e:	0013      	movs	r3, r2
 8001150:	43da      	mvns	r2, r3
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	23a0      	movs	r3, #160	; 0xa0
 800115c:	05db      	lsls	r3, r3, #23
 800115e:	429a      	cmp	r2, r3
 8001160:	d013      	beq.n	800118a <HAL_GPIO_Init+0x1ca>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a45      	ldr	r2, [pc, #276]	; (800127c <HAL_GPIO_Init+0x2bc>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d00d      	beq.n	8001186 <HAL_GPIO_Init+0x1c6>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a44      	ldr	r2, [pc, #272]	; (8001280 <HAL_GPIO_Init+0x2c0>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d007      	beq.n	8001182 <HAL_GPIO_Init+0x1c2>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a43      	ldr	r2, [pc, #268]	; (8001284 <HAL_GPIO_Init+0x2c4>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d101      	bne.n	800117e <HAL_GPIO_Init+0x1be>
 800117a:	2303      	movs	r3, #3
 800117c:	e006      	b.n	800118c <HAL_GPIO_Init+0x1cc>
 800117e:	2305      	movs	r3, #5
 8001180:	e004      	b.n	800118c <HAL_GPIO_Init+0x1cc>
 8001182:	2302      	movs	r3, #2
 8001184:	e002      	b.n	800118c <HAL_GPIO_Init+0x1cc>
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <HAL_GPIO_Init+0x1cc>
 800118a:	2300      	movs	r3, #0
 800118c:	697a      	ldr	r2, [r7, #20]
 800118e:	2103      	movs	r1, #3
 8001190:	400a      	ands	r2, r1
 8001192:	00d2      	lsls	r2, r2, #3
 8001194:	4093      	lsls	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800119c:	4936      	ldr	r1, [pc, #216]	; (8001278 <HAL_GPIO_Init+0x2b8>)
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	089b      	lsrs	r3, r3, #2
 80011a2:	3318      	adds	r3, #24
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011aa:	4b33      	ldr	r3, [pc, #204]	; (8001278 <HAL_GPIO_Init+0x2b8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	43da      	mvns	r2, r3
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	2380      	movs	r3, #128	; 0x80
 80011c0:	035b      	lsls	r3, r3, #13
 80011c2:	4013      	ands	r3, r2
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011ce:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <HAL_GPIO_Init+0x2b8>)
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80011d4:	4b28      	ldr	r3, [pc, #160]	; (8001278 <HAL_GPIO_Init+0x2b8>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	43da      	mvns	r2, r3
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	2380      	movs	r3, #128	; 0x80
 80011ea:	039b      	lsls	r3, r3, #14
 80011ec:	4013      	ands	r3, r2
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011f8:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <HAL_GPIO_Init+0x2b8>)
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011fe:	4a1e      	ldr	r2, [pc, #120]	; (8001278 <HAL_GPIO_Init+0x2b8>)
 8001200:	2384      	movs	r3, #132	; 0x84
 8001202:	58d3      	ldr	r3, [r2, r3]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	43da      	mvns	r2, r3
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	2380      	movs	r3, #128	; 0x80
 8001216:	029b      	lsls	r3, r3, #10
 8001218:	4013      	ands	r3, r2
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001224:	4914      	ldr	r1, [pc, #80]	; (8001278 <HAL_GPIO_Init+0x2b8>)
 8001226:	2284      	movs	r2, #132	; 0x84
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800122c:	4a12      	ldr	r2, [pc, #72]	; (8001278 <HAL_GPIO_Init+0x2b8>)
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	58d3      	ldr	r3, [r2, r3]
 8001232:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	43da      	mvns	r2, r3
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	025b      	lsls	r3, r3, #9
 8001246:	4013      	ands	r3, r2
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001252:	4909      	ldr	r1, [pc, #36]	; (8001278 <HAL_GPIO_Init+0x2b8>)
 8001254:	2280      	movs	r2, #128	; 0x80
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	3301      	adds	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	40da      	lsrs	r2, r3
 8001268:	1e13      	subs	r3, r2, #0
 800126a:	d000      	beq.n	800126e <HAL_GPIO_Init+0x2ae>
 800126c:	e6b0      	b.n	8000fd0 <HAL_GPIO_Init+0x10>
  }
}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	b006      	add	sp, #24
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40021800 	.word	0x40021800
 800127c:	50000400 	.word	0x50000400
 8001280:	50000800 	.word	0x50000800
 8001284:	50000c00 	.word	0x50000c00

08001288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	0008      	movs	r0, r1
 8001292:	0011      	movs	r1, r2
 8001294:	1cbb      	adds	r3, r7, #2
 8001296:	1c02      	adds	r2, r0, #0
 8001298:	801a      	strh	r2, [r3, #0]
 800129a:	1c7b      	adds	r3, r7, #1
 800129c:	1c0a      	adds	r2, r1, #0
 800129e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012a0:	1c7b      	adds	r3, r7, #1
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d004      	beq.n	80012b2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012a8:	1cbb      	adds	r3, r7, #2
 80012aa:	881a      	ldrh	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012b0:	e003      	b.n	80012ba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012b2:	1cbb      	adds	r3, r7, #2
 80012b4:	881a      	ldrh	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	46bd      	mov	sp, r7
 80012be:	b002      	add	sp, #8
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b084      	sub	sp, #16
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	000a      	movs	r2, r1
 80012cc:	1cbb      	adds	r3, r7, #2
 80012ce:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012d6:	1cbb      	adds	r3, r7, #2
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	4013      	ands	r3, r2
 80012de:	041a      	lsls	r2, r3, #16
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	1cb9      	adds	r1, r7, #2
 80012e6:	8809      	ldrh	r1, [r1, #0]
 80012e8:	400b      	ands	r3, r1
 80012ea:	431a      	orrs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	619a      	str	r2, [r3, #24]
}
 80012f0:	46c0      	nop			; (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b004      	add	sp, #16
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a19      	ldr	r2, [pc, #100]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001306:	4013      	ands	r3, r2
 8001308:	0019      	movs	r1, r3
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	430a      	orrs	r2, r1
 8001310:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	429a      	cmp	r2, r3
 800131a:	d11f      	bne.n	800135c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800131c:	4b14      	ldr	r3, [pc, #80]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	0013      	movs	r3, r2
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	189b      	adds	r3, r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4912      	ldr	r1, [pc, #72]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800132a:	0018      	movs	r0, r3
 800132c:	f7fe fefa 	bl	8000124 <__udivsi3>
 8001330:	0003      	movs	r3, r0
 8001332:	3301      	adds	r3, #1
 8001334:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001336:	e008      	b.n	800134a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	3b01      	subs	r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	e001      	b.n	800134a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e009      	b.n	800135e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800134c:	695a      	ldr	r2, [r3, #20]
 800134e:	2380      	movs	r3, #128	; 0x80
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	401a      	ands	r2, r3
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	429a      	cmp	r2, r3
 800135a:	d0ed      	beq.n	8001338 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	0018      	movs	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	b004      	add	sp, #16
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	40007000 	.word	0x40007000
 800136c:	fffff9ff 	.word	0xfffff9ff
 8001370:	2000001c 	.word	0x2000001c
 8001374:	000f4240 	.word	0x000f4240

08001378 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <LL_RCC_GetAPB1Prescaler+0x14>)
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	23e0      	movs	r3, #224	; 0xe0
 8001382:	01db      	lsls	r3, r3, #7
 8001384:	4013      	ands	r3, r2
}
 8001386:	0018      	movs	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40021000 	.word	0x40021000

08001390 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e2f3      	b.n	800198a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2201      	movs	r2, #1
 80013a8:	4013      	ands	r3, r2
 80013aa:	d100      	bne.n	80013ae <HAL_RCC_OscConfig+0x1e>
 80013ac:	e07c      	b.n	80014a8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013ae:	4bc3      	ldr	r3, [pc, #780]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2238      	movs	r2, #56	; 0x38
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013b8:	4bc0      	ldr	r3, [pc, #768]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2203      	movs	r2, #3
 80013be:	4013      	ands	r3, r2
 80013c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	2b10      	cmp	r3, #16
 80013c6:	d102      	bne.n	80013ce <HAL_RCC_OscConfig+0x3e>
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	2b03      	cmp	r3, #3
 80013cc:	d002      	beq.n	80013d4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	2b08      	cmp	r3, #8
 80013d2:	d10b      	bne.n	80013ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d4:	4bb9      	ldr	r3, [pc, #740]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	029b      	lsls	r3, r3, #10
 80013dc:	4013      	ands	r3, r2
 80013de:	d062      	beq.n	80014a6 <HAL_RCC_OscConfig+0x116>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d15e      	bne.n	80014a6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e2ce      	b.n	800198a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	025b      	lsls	r3, r3, #9
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d107      	bne.n	8001408 <HAL_RCC_OscConfig+0x78>
 80013f8:	4bb0      	ldr	r3, [pc, #704]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4baf      	ldr	r3, [pc, #700]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80013fe:	2180      	movs	r1, #128	; 0x80
 8001400:	0249      	lsls	r1, r1, #9
 8001402:	430a      	orrs	r2, r1
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	e020      	b.n	800144a <HAL_RCC_OscConfig+0xba>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	23a0      	movs	r3, #160	; 0xa0
 800140e:	02db      	lsls	r3, r3, #11
 8001410:	429a      	cmp	r2, r3
 8001412:	d10e      	bne.n	8001432 <HAL_RCC_OscConfig+0xa2>
 8001414:	4ba9      	ldr	r3, [pc, #676]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4ba8      	ldr	r3, [pc, #672]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 800141a:	2180      	movs	r1, #128	; 0x80
 800141c:	02c9      	lsls	r1, r1, #11
 800141e:	430a      	orrs	r2, r1
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	4ba6      	ldr	r3, [pc, #664]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4ba5      	ldr	r3, [pc, #660]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001428:	2180      	movs	r1, #128	; 0x80
 800142a:	0249      	lsls	r1, r1, #9
 800142c:	430a      	orrs	r2, r1
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	e00b      	b.n	800144a <HAL_RCC_OscConfig+0xba>
 8001432:	4ba2      	ldr	r3, [pc, #648]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	4ba1      	ldr	r3, [pc, #644]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001438:	49a1      	ldr	r1, [pc, #644]	; (80016c0 <HAL_RCC_OscConfig+0x330>)
 800143a:	400a      	ands	r2, r1
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	4b9f      	ldr	r3, [pc, #636]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	4b9e      	ldr	r3, [pc, #632]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001444:	499f      	ldr	r1, [pc, #636]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 8001446:	400a      	ands	r2, r1
 8001448:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d014      	beq.n	800147c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001452:	f7ff fc01 	bl	8000c58 <HAL_GetTick>
 8001456:	0003      	movs	r3, r0
 8001458:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff fbfc 	bl	8000c58 <HAL_GetTick>
 8001460:	0002      	movs	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	; 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e28d      	b.n	800198a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800146e:	4b93      	ldr	r3, [pc, #588]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	029b      	lsls	r3, r3, #10
 8001476:	4013      	ands	r3, r2
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0xcc>
 800147a:	e015      	b.n	80014a8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147c:	f7ff fbec 	bl	8000c58 <HAL_GetTick>
 8001480:	0003      	movs	r3, r0
 8001482:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001486:	f7ff fbe7 	bl	8000c58 <HAL_GetTick>
 800148a:	0002      	movs	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b64      	cmp	r3, #100	; 0x64
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e278      	b.n	800198a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001498:	4b88      	ldr	r3, [pc, #544]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	029b      	lsls	r3, r3, #10
 80014a0:	4013      	ands	r3, r2
 80014a2:	d1f0      	bne.n	8001486 <HAL_RCC_OscConfig+0xf6>
 80014a4:	e000      	b.n	80014a8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2202      	movs	r2, #2
 80014ae:	4013      	ands	r3, r2
 80014b0:	d100      	bne.n	80014b4 <HAL_RCC_OscConfig+0x124>
 80014b2:	e099      	b.n	80015e8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014b4:	4b81      	ldr	r3, [pc, #516]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2238      	movs	r2, #56	; 0x38
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014be:	4b7f      	ldr	r3, [pc, #508]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	2203      	movs	r2, #3
 80014c4:	4013      	ands	r3, r2
 80014c6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	2b10      	cmp	r3, #16
 80014cc:	d102      	bne.n	80014d4 <HAL_RCC_OscConfig+0x144>
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d002      	beq.n	80014da <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d135      	bne.n	8001546 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014da:	4b78      	ldr	r3, [pc, #480]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	2380      	movs	r3, #128	; 0x80
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	4013      	ands	r3, r2
 80014e4:	d005      	beq.n	80014f2 <HAL_RCC_OscConfig+0x162>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e24b      	b.n	800198a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f2:	4b72      	ldr	r3, [pc, #456]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	4a74      	ldr	r2, [pc, #464]	; (80016c8 <HAL_RCC_OscConfig+0x338>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	0019      	movs	r1, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	695b      	ldr	r3, [r3, #20]
 8001500:	021a      	lsls	r2, r3, #8
 8001502:	4b6e      	ldr	r3, [pc, #440]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001504:	430a      	orrs	r2, r1
 8001506:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d112      	bne.n	8001534 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800150e:	4b6b      	ldr	r3, [pc, #428]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a6e      	ldr	r2, [pc, #440]	; (80016cc <HAL_RCC_OscConfig+0x33c>)
 8001514:	4013      	ands	r3, r2
 8001516:	0019      	movs	r1, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	691a      	ldr	r2, [r3, #16]
 800151c:	4b67      	ldr	r3, [pc, #412]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 800151e:	430a      	orrs	r2, r1
 8001520:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001522:	4b66      	ldr	r3, [pc, #408]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	0adb      	lsrs	r3, r3, #11
 8001528:	2207      	movs	r2, #7
 800152a:	4013      	ands	r3, r2
 800152c:	4a68      	ldr	r2, [pc, #416]	; (80016d0 <HAL_RCC_OscConfig+0x340>)
 800152e:	40da      	lsrs	r2, r3
 8001530:	4b68      	ldr	r3, [pc, #416]	; (80016d4 <HAL_RCC_OscConfig+0x344>)
 8001532:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001534:	4b68      	ldr	r3, [pc, #416]	; (80016d8 <HAL_RCC_OscConfig+0x348>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	0018      	movs	r0, r3
 800153a:	f7ff fb31 	bl	8000ba0 <HAL_InitTick>
 800153e:	1e03      	subs	r3, r0, #0
 8001540:	d051      	beq.n	80015e6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e221      	b.n	800198a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d030      	beq.n	80015b0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800154e:	4b5b      	ldr	r3, [pc, #364]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a5e      	ldr	r2, [pc, #376]	; (80016cc <HAL_RCC_OscConfig+0x33c>)
 8001554:	4013      	ands	r3, r2
 8001556:	0019      	movs	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691a      	ldr	r2, [r3, #16]
 800155c:	4b57      	ldr	r3, [pc, #348]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 800155e:	430a      	orrs	r2, r1
 8001560:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001562:	4b56      	ldr	r3, [pc, #344]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	4b55      	ldr	r3, [pc, #340]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001568:	2180      	movs	r1, #128	; 0x80
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	430a      	orrs	r2, r1
 800156e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001570:	f7ff fb72 	bl	8000c58 <HAL_GetTick>
 8001574:	0003      	movs	r3, r0
 8001576:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800157a:	f7ff fb6d 	bl	8000c58 <HAL_GetTick>
 800157e:	0002      	movs	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e1fe      	b.n	800198a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800158c:	4b4b      	ldr	r3, [pc, #300]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	4013      	ands	r3, r2
 8001596:	d0f0      	beq.n	800157a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001598:	4b48      	ldr	r3, [pc, #288]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	4a4a      	ldr	r2, [pc, #296]	; (80016c8 <HAL_RCC_OscConfig+0x338>)
 800159e:	4013      	ands	r3, r2
 80015a0:	0019      	movs	r1, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	021a      	lsls	r2, r3, #8
 80015a8:	4b44      	ldr	r3, [pc, #272]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80015aa:	430a      	orrs	r2, r1
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	e01b      	b.n	80015e8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80015b0:	4b42      	ldr	r3, [pc, #264]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4b41      	ldr	r3, [pc, #260]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80015b6:	4949      	ldr	r1, [pc, #292]	; (80016dc <HAL_RCC_OscConfig+0x34c>)
 80015b8:	400a      	ands	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015bc:	f7ff fb4c 	bl	8000c58 <HAL_GetTick>
 80015c0:	0003      	movs	r3, r0
 80015c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c6:	f7ff fb47 	bl	8000c58 <HAL_GetTick>
 80015ca:	0002      	movs	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e1d8      	b.n	800198a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015d8:	4b38      	ldr	r3, [pc, #224]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	4013      	ands	r3, r2
 80015e2:	d1f0      	bne.n	80015c6 <HAL_RCC_OscConfig+0x236>
 80015e4:	e000      	b.n	80015e8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2208      	movs	r2, #8
 80015ee:	4013      	ands	r3, r2
 80015f0:	d047      	beq.n	8001682 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80015f2:	4b32      	ldr	r3, [pc, #200]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2238      	movs	r2, #56	; 0x38
 80015f8:	4013      	ands	r3, r2
 80015fa:	2b18      	cmp	r3, #24
 80015fc:	d10a      	bne.n	8001614 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80015fe:	4b2f      	ldr	r3, [pc, #188]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001602:	2202      	movs	r2, #2
 8001604:	4013      	ands	r3, r2
 8001606:	d03c      	beq.n	8001682 <HAL_RCC_OscConfig+0x2f2>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d138      	bne.n	8001682 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e1ba      	b.n	800198a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d019      	beq.n	8001650 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800161c:	4b27      	ldr	r3, [pc, #156]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 800161e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001620:	4b26      	ldr	r3, [pc, #152]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001622:	2101      	movs	r1, #1
 8001624:	430a      	orrs	r2, r1
 8001626:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001628:	f7ff fb16 	bl	8000c58 <HAL_GetTick>
 800162c:	0003      	movs	r3, r0
 800162e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001632:	f7ff fb11 	bl	8000c58 <HAL_GetTick>
 8001636:	0002      	movs	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e1a2      	b.n	800198a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001644:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001648:	2202      	movs	r2, #2
 800164a:	4013      	ands	r3, r2
 800164c:	d0f1      	beq.n	8001632 <HAL_RCC_OscConfig+0x2a2>
 800164e:	e018      	b.n	8001682 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001650:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001652:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001654:	4b19      	ldr	r3, [pc, #100]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001656:	2101      	movs	r1, #1
 8001658:	438a      	bics	r2, r1
 800165a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165c:	f7ff fafc 	bl	8000c58 <HAL_GetTick>
 8001660:	0003      	movs	r3, r0
 8001662:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001666:	f7ff faf7 	bl	8000c58 <HAL_GetTick>
 800166a:	0002      	movs	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e188      	b.n	800198a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001678:	4b10      	ldr	r3, [pc, #64]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 800167a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167c:	2202      	movs	r2, #2
 800167e:	4013      	ands	r3, r2
 8001680:	d1f1      	bne.n	8001666 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2204      	movs	r2, #4
 8001688:	4013      	ands	r3, r2
 800168a:	d100      	bne.n	800168e <HAL_RCC_OscConfig+0x2fe>
 800168c:	e0c6      	b.n	800181c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800168e:	231f      	movs	r3, #31
 8001690:	18fb      	adds	r3, r7, r3
 8001692:	2200      	movs	r2, #0
 8001694:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2238      	movs	r2, #56	; 0x38
 800169c:	4013      	ands	r3, r2
 800169e:	2b20      	cmp	r3, #32
 80016a0:	d11e      	bne.n	80016e0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80016a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a6:	2202      	movs	r2, #2
 80016a8:	4013      	ands	r3, r2
 80016aa:	d100      	bne.n	80016ae <HAL_RCC_OscConfig+0x31e>
 80016ac:	e0b6      	b.n	800181c <HAL_RCC_OscConfig+0x48c>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d000      	beq.n	80016b8 <HAL_RCC_OscConfig+0x328>
 80016b6:	e0b1      	b.n	800181c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e166      	b.n	800198a <HAL_RCC_OscConfig+0x5fa>
 80016bc:	40021000 	.word	0x40021000
 80016c0:	fffeffff 	.word	0xfffeffff
 80016c4:	fffbffff 	.word	0xfffbffff
 80016c8:	ffff80ff 	.word	0xffff80ff
 80016cc:	ffffc7ff 	.word	0xffffc7ff
 80016d0:	00f42400 	.word	0x00f42400
 80016d4:	2000001c 	.word	0x2000001c
 80016d8:	20000020 	.word	0x20000020
 80016dc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016e0:	4bac      	ldr	r3, [pc, #688]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 80016e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	055b      	lsls	r3, r3, #21
 80016e8:	4013      	ands	r3, r2
 80016ea:	d101      	bne.n	80016f0 <HAL_RCC_OscConfig+0x360>
 80016ec:	2301      	movs	r3, #1
 80016ee:	e000      	b.n	80016f2 <HAL_RCC_OscConfig+0x362>
 80016f0:	2300      	movs	r3, #0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d011      	beq.n	800171a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	4ba7      	ldr	r3, [pc, #668]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 80016f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016fa:	4ba6      	ldr	r3, [pc, #664]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 80016fc:	2180      	movs	r1, #128	; 0x80
 80016fe:	0549      	lsls	r1, r1, #21
 8001700:	430a      	orrs	r2, r1
 8001702:	63da      	str	r2, [r3, #60]	; 0x3c
 8001704:	4ba3      	ldr	r3, [pc, #652]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 8001706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	055b      	lsls	r3, r3, #21
 800170c:	4013      	ands	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001712:	231f      	movs	r3, #31
 8001714:	18fb      	adds	r3, r7, r3
 8001716:	2201      	movs	r2, #1
 8001718:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800171a:	4b9f      	ldr	r3, [pc, #636]	; (8001998 <HAL_RCC_OscConfig+0x608>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4013      	ands	r3, r2
 8001724:	d11a      	bne.n	800175c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001726:	4b9c      	ldr	r3, [pc, #624]	; (8001998 <HAL_RCC_OscConfig+0x608>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4b9b      	ldr	r3, [pc, #620]	; (8001998 <HAL_RCC_OscConfig+0x608>)
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	0049      	lsls	r1, r1, #1
 8001730:	430a      	orrs	r2, r1
 8001732:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001734:	f7ff fa90 	bl	8000c58 <HAL_GetTick>
 8001738:	0003      	movs	r3, r0
 800173a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800173e:	f7ff fa8b 	bl	8000c58 <HAL_GetTick>
 8001742:	0002      	movs	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e11c      	b.n	800198a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001750:	4b91      	ldr	r3, [pc, #580]	; (8001998 <HAL_RCC_OscConfig+0x608>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4013      	ands	r3, r2
 800175a:	d0f0      	beq.n	800173e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d106      	bne.n	8001772 <HAL_RCC_OscConfig+0x3e2>
 8001764:	4b8b      	ldr	r3, [pc, #556]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 8001766:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001768:	4b8a      	ldr	r3, [pc, #552]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 800176a:	2101      	movs	r1, #1
 800176c:	430a      	orrs	r2, r1
 800176e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001770:	e01c      	b.n	80017ac <HAL_RCC_OscConfig+0x41c>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b05      	cmp	r3, #5
 8001778:	d10c      	bne.n	8001794 <HAL_RCC_OscConfig+0x404>
 800177a:	4b86      	ldr	r3, [pc, #536]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 800177c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800177e:	4b85      	ldr	r3, [pc, #532]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 8001780:	2104      	movs	r1, #4
 8001782:	430a      	orrs	r2, r1
 8001784:	65da      	str	r2, [r3, #92]	; 0x5c
 8001786:	4b83      	ldr	r3, [pc, #524]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 8001788:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800178a:	4b82      	ldr	r3, [pc, #520]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 800178c:	2101      	movs	r1, #1
 800178e:	430a      	orrs	r2, r1
 8001790:	65da      	str	r2, [r3, #92]	; 0x5c
 8001792:	e00b      	b.n	80017ac <HAL_RCC_OscConfig+0x41c>
 8001794:	4b7f      	ldr	r3, [pc, #508]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 8001796:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001798:	4b7e      	ldr	r3, [pc, #504]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 800179a:	2101      	movs	r1, #1
 800179c:	438a      	bics	r2, r1
 800179e:	65da      	str	r2, [r3, #92]	; 0x5c
 80017a0:	4b7c      	ldr	r3, [pc, #496]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 80017a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017a4:	4b7b      	ldr	r3, [pc, #492]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 80017a6:	2104      	movs	r1, #4
 80017a8:	438a      	bics	r2, r1
 80017aa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d014      	beq.n	80017de <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b4:	f7ff fa50 	bl	8000c58 <HAL_GetTick>
 80017b8:	0003      	movs	r3, r0
 80017ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017bc:	e009      	b.n	80017d2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017be:	f7ff fa4b 	bl	8000c58 <HAL_GetTick>
 80017c2:	0002      	movs	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	4a74      	ldr	r2, [pc, #464]	; (800199c <HAL_RCC_OscConfig+0x60c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e0db      	b.n	800198a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017d2:	4b70      	ldr	r3, [pc, #448]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 80017d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d6:	2202      	movs	r2, #2
 80017d8:	4013      	ands	r3, r2
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0x42e>
 80017dc:	e013      	b.n	8001806 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017de:	f7ff fa3b 	bl	8000c58 <HAL_GetTick>
 80017e2:	0003      	movs	r3, r0
 80017e4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017e6:	e009      	b.n	80017fc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e8:	f7ff fa36 	bl	8000c58 <HAL_GetTick>
 80017ec:	0002      	movs	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	4a6a      	ldr	r2, [pc, #424]	; (800199c <HAL_RCC_OscConfig+0x60c>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e0c6      	b.n	800198a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017fc:	4b65      	ldr	r3, [pc, #404]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 80017fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001800:	2202      	movs	r2, #2
 8001802:	4013      	ands	r3, r2
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001806:	231f      	movs	r3, #31
 8001808:	18fb      	adds	r3, r7, r3
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d105      	bne.n	800181c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001810:	4b60      	ldr	r3, [pc, #384]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 8001812:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001814:	4b5f      	ldr	r3, [pc, #380]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 8001816:	4962      	ldr	r1, [pc, #392]	; (80019a0 <HAL_RCC_OscConfig+0x610>)
 8001818:	400a      	ands	r2, r1
 800181a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d100      	bne.n	8001826 <HAL_RCC_OscConfig+0x496>
 8001824:	e0b0      	b.n	8001988 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001826:	4b5b      	ldr	r3, [pc, #364]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2238      	movs	r2, #56	; 0x38
 800182c:	4013      	ands	r3, r2
 800182e:	2b10      	cmp	r3, #16
 8001830:	d100      	bne.n	8001834 <HAL_RCC_OscConfig+0x4a4>
 8001832:	e078      	b.n	8001926 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	2b02      	cmp	r3, #2
 800183a:	d153      	bne.n	80018e4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183c:	4b55      	ldr	r3, [pc, #340]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b54      	ldr	r3, [pc, #336]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 8001842:	4958      	ldr	r1, [pc, #352]	; (80019a4 <HAL_RCC_OscConfig+0x614>)
 8001844:	400a      	ands	r2, r1
 8001846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001848:	f7ff fa06 	bl	8000c58 <HAL_GetTick>
 800184c:	0003      	movs	r3, r0
 800184e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001852:	f7ff fa01 	bl	8000c58 <HAL_GetTick>
 8001856:	0002      	movs	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e092      	b.n	800198a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001864:	4b4b      	ldr	r3, [pc, #300]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	049b      	lsls	r3, r3, #18
 800186c:	4013      	ands	r3, r2
 800186e:	d1f0      	bne.n	8001852 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001870:	4b48      	ldr	r3, [pc, #288]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	4a4c      	ldr	r2, [pc, #304]	; (80019a8 <HAL_RCC_OscConfig+0x618>)
 8001876:	4013      	ands	r3, r2
 8001878:	0019      	movs	r1, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a1a      	ldr	r2, [r3, #32]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001888:	021b      	lsls	r3, r3, #8
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001890:	431a      	orrs	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	431a      	orrs	r2, r3
 8001898:	4b3e      	ldr	r3, [pc, #248]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 800189a:	430a      	orrs	r2, r1
 800189c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800189e:	4b3d      	ldr	r3, [pc, #244]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	4b3c      	ldr	r3, [pc, #240]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 80018a4:	2180      	movs	r1, #128	; 0x80
 80018a6:	0449      	lsls	r1, r1, #17
 80018a8:	430a      	orrs	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80018ac:	4b39      	ldr	r3, [pc, #228]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	4b38      	ldr	r3, [pc, #224]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 80018b2:	2180      	movs	r1, #128	; 0x80
 80018b4:	0549      	lsls	r1, r1, #21
 80018b6:	430a      	orrs	r2, r1
 80018b8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ba:	f7ff f9cd 	bl	8000c58 <HAL_GetTick>
 80018be:	0003      	movs	r3, r0
 80018c0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c4:	f7ff f9c8 	bl	8000c58 <HAL_GetTick>
 80018c8:	0002      	movs	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e059      	b.n	800198a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d6:	4b2f      	ldr	r3, [pc, #188]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	2380      	movs	r3, #128	; 0x80
 80018dc:	049b      	lsls	r3, r3, #18
 80018de:	4013      	ands	r3, r2
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x534>
 80018e2:	e051      	b.n	8001988 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e4:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b2a      	ldr	r3, [pc, #168]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 80018ea:	492e      	ldr	r1, [pc, #184]	; (80019a4 <HAL_RCC_OscConfig+0x614>)
 80018ec:	400a      	ands	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f0:	f7ff f9b2 	bl	8000c58 <HAL_GetTick>
 80018f4:	0003      	movs	r3, r0
 80018f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fa:	f7ff f9ad 	bl	8000c58 <HAL_GetTick>
 80018fe:	0002      	movs	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e03e      	b.n	800198a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800190c:	4b21      	ldr	r3, [pc, #132]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	049b      	lsls	r3, r3, #18
 8001914:	4013      	ands	r3, r2
 8001916:	d1f0      	bne.n	80018fa <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001918:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 800191e:	4923      	ldr	r1, [pc, #140]	; (80019ac <HAL_RCC_OscConfig+0x61c>)
 8001920:	400a      	ands	r2, r1
 8001922:	60da      	str	r2, [r3, #12]
 8001924:	e030      	b.n	8001988 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d101      	bne.n	8001932 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e02b      	b.n	800198a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001932:	4b18      	ldr	r3, [pc, #96]	; (8001994 <HAL_RCC_OscConfig+0x604>)
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	2203      	movs	r2, #3
 800193c:	401a      	ands	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	429a      	cmp	r2, r3
 8001944:	d11e      	bne.n	8001984 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	2270      	movs	r2, #112	; 0x70
 800194a:	401a      	ands	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001950:	429a      	cmp	r2, r3
 8001952:	d117      	bne.n	8001984 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	23fe      	movs	r3, #254	; 0xfe
 8001958:	01db      	lsls	r3, r3, #7
 800195a:	401a      	ands	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001960:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001962:	429a      	cmp	r2, r3
 8001964:	d10e      	bne.n	8001984 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	23f8      	movs	r3, #248	; 0xf8
 800196a:	039b      	lsls	r3, r3, #14
 800196c:	401a      	ands	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001972:	429a      	cmp	r2, r3
 8001974:	d106      	bne.n	8001984 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	0f5b      	lsrs	r3, r3, #29
 800197a:	075a      	lsls	r2, r3, #29
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	0018      	movs	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	b008      	add	sp, #32
 8001990:	bd80      	pop	{r7, pc}
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	40021000 	.word	0x40021000
 8001998:	40007000 	.word	0x40007000
 800199c:	00001388 	.word	0x00001388
 80019a0:	efffffff 	.word	0xefffffff
 80019a4:	feffffff 	.word	0xfeffffff
 80019a8:	1fc1808c 	.word	0x1fc1808c
 80019ac:	effefffc 	.word	0xeffefffc

080019b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0e9      	b.n	8001b98 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019c4:	4b76      	ldr	r3, [pc, #472]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2207      	movs	r2, #7
 80019ca:	4013      	ands	r3, r2
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d91e      	bls.n	8001a10 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b73      	ldr	r3, [pc, #460]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2207      	movs	r2, #7
 80019d8:	4393      	bics	r3, r2
 80019da:	0019      	movs	r1, r3
 80019dc:	4b70      	ldr	r3, [pc, #448]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f0>)
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019e4:	f7ff f938 	bl	8000c58 <HAL_GetTick>
 80019e8:	0003      	movs	r3, r0
 80019ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019ec:	e009      	b.n	8001a02 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ee:	f7ff f933 	bl	8000c58 <HAL_GetTick>
 80019f2:	0002      	movs	r2, r0
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	4a6a      	ldr	r2, [pc, #424]	; (8001ba4 <HAL_RCC_ClockConfig+0x1f4>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e0ca      	b.n	8001b98 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a02:	4b67      	ldr	r3, [pc, #412]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2207      	movs	r2, #7
 8001a08:	4013      	ands	r3, r2
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d1ee      	bne.n	80019ee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2202      	movs	r2, #2
 8001a16:	4013      	ands	r3, r2
 8001a18:	d015      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2204      	movs	r2, #4
 8001a20:	4013      	ands	r3, r2
 8001a22:	d006      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a24:	4b60      	ldr	r3, [pc, #384]	; (8001ba8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	4b5f      	ldr	r3, [pc, #380]	; (8001ba8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a2a:	21e0      	movs	r1, #224	; 0xe0
 8001a2c:	01c9      	lsls	r1, r1, #7
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a32:	4b5d      	ldr	r3, [pc, #372]	; (8001ba8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	4a5d      	ldr	r2, [pc, #372]	; (8001bac <HAL_RCC_ClockConfig+0x1fc>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	0019      	movs	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	4b59      	ldr	r3, [pc, #356]	; (8001ba8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a42:	430a      	orrs	r2, r1
 8001a44:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d057      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d107      	bne.n	8001a68 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a58:	4b53      	ldr	r3, [pc, #332]	; (8001ba8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	029b      	lsls	r3, r3, #10
 8001a60:	4013      	ands	r3, r2
 8001a62:	d12b      	bne.n	8001abc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e097      	b.n	8001b98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d107      	bne.n	8001a80 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a70:	4b4d      	ldr	r3, [pc, #308]	; (8001ba8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	049b      	lsls	r3, r3, #18
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d11f      	bne.n	8001abc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e08b      	b.n	8001b98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d107      	bne.n	8001a98 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a88:	4b47      	ldr	r3, [pc, #284]	; (8001ba8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	4013      	ands	r3, r2
 8001a92:	d113      	bne.n	8001abc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e07f      	b.n	8001b98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d106      	bne.n	8001aae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aa0:	4b41      	ldr	r3, [pc, #260]	; (8001ba8 <HAL_RCC_ClockConfig+0x1f8>)
 8001aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d108      	bne.n	8001abc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e074      	b.n	8001b98 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aae:	4b3e      	ldr	r3, [pc, #248]	; (8001ba8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d101      	bne.n	8001abc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e06d      	b.n	8001b98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001abc:	4b3a      	ldr	r3, [pc, #232]	; (8001ba8 <HAL_RCC_ClockConfig+0x1f8>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	2207      	movs	r2, #7
 8001ac2:	4393      	bics	r3, r2
 8001ac4:	0019      	movs	r1, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	4b37      	ldr	r3, [pc, #220]	; (8001ba8 <HAL_RCC_ClockConfig+0x1f8>)
 8001acc:	430a      	orrs	r2, r1
 8001ace:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ad0:	f7ff f8c2 	bl	8000c58 <HAL_GetTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad8:	e009      	b.n	8001aee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ada:	f7ff f8bd 	bl	8000c58 <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	4a2f      	ldr	r2, [pc, #188]	; (8001ba4 <HAL_RCC_ClockConfig+0x1f4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e054      	b.n	8001b98 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aee:	4b2e      	ldr	r3, [pc, #184]	; (8001ba8 <HAL_RCC_ClockConfig+0x1f8>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	2238      	movs	r2, #56	; 0x38
 8001af4:	401a      	ands	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d1ec      	bne.n	8001ada <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b00:	4b27      	ldr	r3, [pc, #156]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2207      	movs	r2, #7
 8001b06:	4013      	ands	r3, r2
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d21e      	bcs.n	8001b4c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0e:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2207      	movs	r2, #7
 8001b14:	4393      	bics	r3, r2
 8001b16:	0019      	movs	r1, r3
 8001b18:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b20:	f7ff f89a 	bl	8000c58 <HAL_GetTick>
 8001b24:	0003      	movs	r3, r0
 8001b26:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b28:	e009      	b.n	8001b3e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b2a:	f7ff f895 	bl	8000c58 <HAL_GetTick>
 8001b2e:	0002      	movs	r2, r0
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	4a1b      	ldr	r2, [pc, #108]	; (8001ba4 <HAL_RCC_ClockConfig+0x1f4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e02c      	b.n	8001b98 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b3e:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2207      	movs	r2, #7
 8001b44:	4013      	ands	r3, r2
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d1ee      	bne.n	8001b2a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2204      	movs	r2, #4
 8001b52:	4013      	ands	r3, r2
 8001b54:	d009      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b56:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	4a15      	ldr	r2, [pc, #84]	; (8001bb0 <HAL_RCC_ClockConfig+0x200>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	0019      	movs	r1, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68da      	ldr	r2, [r3, #12]
 8001b64:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b66:	430a      	orrs	r2, r1
 8001b68:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b6a:	f000 f829 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 8001b6e:	0001      	movs	r1, r0
 8001b70:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	220f      	movs	r2, #15
 8001b78:	401a      	ands	r2, r3
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <HAL_RCC_ClockConfig+0x204>)
 8001b7c:	0092      	lsls	r2, r2, #2
 8001b7e:	58d3      	ldr	r3, [r2, r3]
 8001b80:	221f      	movs	r2, #31
 8001b82:	4013      	ands	r3, r2
 8001b84:	000a      	movs	r2, r1
 8001b86:	40da      	lsrs	r2, r3
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <HAL_RCC_ClockConfig+0x208>)
 8001b8a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_RCC_ClockConfig+0x20c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	0018      	movs	r0, r3
 8001b92:	f7ff f805 	bl	8000ba0 <HAL_InitTick>
 8001b96:	0003      	movs	r3, r0
}
 8001b98:	0018      	movs	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b004      	add	sp, #16
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40022000 	.word	0x40022000
 8001ba4:	00001388 	.word	0x00001388
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	fffff0ff 	.word	0xfffff0ff
 8001bb0:	ffff8fff 	.word	0xffff8fff
 8001bb4:	08005250 	.word	0x08005250
 8001bb8:	2000001c 	.word	0x2000001c
 8001bbc:	20000020 	.word	0x20000020

08001bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bc6:	4b3c      	ldr	r3, [pc, #240]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2238      	movs	r2, #56	; 0x38
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d10f      	bne.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001bd0:	4b39      	ldr	r3, [pc, #228]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	0adb      	lsrs	r3, r3, #11
 8001bd6:	2207      	movs	r2, #7
 8001bd8:	4013      	ands	r3, r2
 8001bda:	2201      	movs	r2, #1
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	0013      	movs	r3, r2
 8001be0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001be2:	6839      	ldr	r1, [r7, #0]
 8001be4:	4835      	ldr	r0, [pc, #212]	; (8001cbc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001be6:	f7fe fa9d 	bl	8000124 <__udivsi3>
 8001bea:	0003      	movs	r3, r0
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	e05d      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bf0:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2238      	movs	r2, #56	; 0x38
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d102      	bne.n	8001c02 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bfc:	4b30      	ldr	r3, [pc, #192]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	e054      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c02:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2238      	movs	r2, #56	; 0x38
 8001c08:	4013      	ands	r3, r2
 8001c0a:	2b10      	cmp	r3, #16
 8001c0c:	d138      	bne.n	8001c80 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c0e:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	2203      	movs	r2, #3
 8001c14:	4013      	ands	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c18:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	2207      	movs	r2, #7
 8001c20:	4013      	ands	r3, r2
 8001c22:	3301      	adds	r3, #1
 8001c24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2b03      	cmp	r3, #3
 8001c2a:	d10d      	bne.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	4824      	ldr	r0, [pc, #144]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c30:	f7fe fa78 	bl	8000124 <__udivsi3>
 8001c34:	0003      	movs	r3, r0
 8001c36:	0019      	movs	r1, r3
 8001c38:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	227f      	movs	r2, #127	; 0x7f
 8001c40:	4013      	ands	r3, r2
 8001c42:	434b      	muls	r3, r1
 8001c44:	617b      	str	r3, [r7, #20]
        break;
 8001c46:	e00d      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	481c      	ldr	r0, [pc, #112]	; (8001cbc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c4c:	f7fe fa6a 	bl	8000124 <__udivsi3>
 8001c50:	0003      	movs	r3, r0
 8001c52:	0019      	movs	r1, r3
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	0a1b      	lsrs	r3, r3, #8
 8001c5a:	227f      	movs	r2, #127	; 0x7f
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	434b      	muls	r3, r1
 8001c60:	617b      	str	r3, [r7, #20]
        break;
 8001c62:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001c64:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	0f5b      	lsrs	r3, r3, #29
 8001c6a:	2207      	movs	r2, #7
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	3301      	adds	r3, #1
 8001c70:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	6978      	ldr	r0, [r7, #20]
 8001c76:	f7fe fa55 	bl	8000124 <__udivsi3>
 8001c7a:	0003      	movs	r3, r0
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	e015      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c80:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2238      	movs	r2, #56	; 0x38
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b20      	cmp	r3, #32
 8001c8a:	d103      	bne.n	8001c94 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001c8c:	2380      	movs	r3, #128	; 0x80
 8001c8e:	021b      	lsls	r3, r3, #8
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	e00b      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	2238      	movs	r2, #56	; 0x38
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2b18      	cmp	r3, #24
 8001c9e:	d103      	bne.n	8001ca8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001ca0:	23fa      	movs	r3, #250	; 0xfa
 8001ca2:	01db      	lsls	r3, r3, #7
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	e001      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001cac:	693b      	ldr	r3, [r7, #16]
}
 8001cae:	0018      	movs	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b006      	add	sp, #24
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	00f42400 	.word	0x00f42400
 8001cc0:	00b71b00 	.word	0x00b71b00

08001cc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc8:	4b02      	ldr	r3, [pc, #8]	; (8001cd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	0018      	movs	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	2000001c 	.word	0x2000001c

08001cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd8:	b5b0      	push	{r4, r5, r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001cdc:	f7ff fff2 	bl	8001cc4 <HAL_RCC_GetHCLKFreq>
 8001ce0:	0004      	movs	r4, r0
 8001ce2:	f7ff fb49 	bl	8001378 <LL_RCC_GetAPB1Prescaler>
 8001ce6:	0003      	movs	r3, r0
 8001ce8:	0b1a      	lsrs	r2, r3, #12
 8001cea:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cec:	0092      	lsls	r2, r2, #2
 8001cee:	58d3      	ldr	r3, [r2, r3]
 8001cf0:	221f      	movs	r2, #31
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	40dc      	lsrs	r4, r3
 8001cf6:	0023      	movs	r3, r4
}
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	08005290 	.word	0x08005290

08001d04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001d0c:	2313      	movs	r3, #19
 8001d0e:	18fb      	adds	r3, r7, r3
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d14:	2312      	movs	r3, #18
 8001d16:	18fb      	adds	r3, r7, r3
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	2380      	movs	r3, #128	; 0x80
 8001d22:	029b      	lsls	r3, r3, #10
 8001d24:	4013      	ands	r3, r2
 8001d26:	d100      	bne.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001d28:	e0a3      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d2a:	2011      	movs	r0, #17
 8001d2c:	183b      	adds	r3, r7, r0
 8001d2e:	2200      	movs	r2, #0
 8001d30:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d32:	4b86      	ldr	r3, [pc, #536]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	055b      	lsls	r3, r3, #21
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d110      	bne.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d3e:	4b83      	ldr	r3, [pc, #524]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d42:	4b82      	ldr	r3, [pc, #520]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d44:	2180      	movs	r1, #128	; 0x80
 8001d46:	0549      	lsls	r1, r1, #21
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d4c:	4b7f      	ldr	r3, [pc, #508]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	055b      	lsls	r3, r3, #21
 8001d54:	4013      	ands	r3, r2
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d5a:	183b      	adds	r3, r7, r0
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d60:	4b7b      	ldr	r3, [pc, #492]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b7a      	ldr	r3, [pc, #488]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d66:	2180      	movs	r1, #128	; 0x80
 8001d68:	0049      	lsls	r1, r1, #1
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d6e:	f7fe ff73 	bl	8000c58 <HAL_GetTick>
 8001d72:	0003      	movs	r3, r0
 8001d74:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d76:	e00b      	b.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d78:	f7fe ff6e 	bl	8000c58 <HAL_GetTick>
 8001d7c:	0002      	movs	r2, r0
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d904      	bls.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001d86:	2313      	movs	r3, #19
 8001d88:	18fb      	adds	r3, r7, r3
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	701a      	strb	r2, [r3, #0]
        break;
 8001d8e:	e005      	b.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d90:	4b6f      	ldr	r3, [pc, #444]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d0ed      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001d9c:	2313      	movs	r3, #19
 8001d9e:	18fb      	adds	r3, r7, r3
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d154      	bne.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001da6:	4b69      	ldr	r3, [pc, #420]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001da8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001daa:	23c0      	movs	r3, #192	; 0xc0
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4013      	ands	r3, r2
 8001db0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d019      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d014      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001dc2:	4b62      	ldr	r3, [pc, #392]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc6:	4a63      	ldr	r2, [pc, #396]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001dcc:	4b5f      	ldr	r3, [pc, #380]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001dce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dd0:	4b5e      	ldr	r3, [pc, #376]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001dd2:	2180      	movs	r1, #128	; 0x80
 8001dd4:	0249      	lsls	r1, r1, #9
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001dda:	4b5c      	ldr	r3, [pc, #368]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ddc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dde:	4b5b      	ldr	r3, [pc, #364]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001de0:	495d      	ldr	r1, [pc, #372]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001de2:	400a      	ands	r2, r1
 8001de4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001de6:	4b59      	ldr	r3, [pc, #356]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	2201      	movs	r2, #1
 8001df0:	4013      	ands	r3, r2
 8001df2:	d016      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7fe ff30 	bl	8000c58 <HAL_GetTick>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dfc:	e00c      	b.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfe:	f7fe ff2b 	bl	8000c58 <HAL_GetTick>
 8001e02:	0002      	movs	r2, r0
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	4a54      	ldr	r2, [pc, #336]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d904      	bls.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001e0e:	2313      	movs	r3, #19
 8001e10:	18fb      	adds	r3, r7, r3
 8001e12:	2203      	movs	r2, #3
 8001e14:	701a      	strb	r2, [r3, #0]
            break;
 8001e16:	e004      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e18:	4b4c      	ldr	r3, [pc, #304]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d0ed      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001e22:	2313      	movs	r3, #19
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10a      	bne.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e2c:	4b47      	ldr	r3, [pc, #284]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e30:	4a48      	ldr	r2, [pc, #288]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001e32:	4013      	ands	r3, r2
 8001e34:	0019      	movs	r1, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699a      	ldr	r2, [r3, #24]
 8001e3a:	4b44      	ldr	r3, [pc, #272]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e40:	e00c      	b.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e42:	2312      	movs	r3, #18
 8001e44:	18fb      	adds	r3, r7, r3
 8001e46:	2213      	movs	r2, #19
 8001e48:	18ba      	adds	r2, r7, r2
 8001e4a:	7812      	ldrb	r2, [r2, #0]
 8001e4c:	701a      	strb	r2, [r3, #0]
 8001e4e:	e005      	b.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e50:	2312      	movs	r3, #18
 8001e52:	18fb      	adds	r3, r7, r3
 8001e54:	2213      	movs	r2, #19
 8001e56:	18ba      	adds	r2, r7, r2
 8001e58:	7812      	ldrb	r2, [r2, #0]
 8001e5a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e5c:	2311      	movs	r3, #17
 8001e5e:	18fb      	adds	r3, r7, r3
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d105      	bne.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e66:	4b39      	ldr	r3, [pc, #228]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e6a:	4b38      	ldr	r3, [pc, #224]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e6c:	493c      	ldr	r1, [pc, #240]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001e6e:	400a      	ands	r2, r1
 8001e70:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2201      	movs	r2, #1
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d009      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e7c:	4b33      	ldr	r3, [pc, #204]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e80:	2203      	movs	r2, #3
 8001e82:	4393      	bics	r3, r2
 8001e84:	0019      	movs	r1, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	4b30      	ldr	r3, [pc, #192]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2202      	movs	r2, #2
 8001e96:	4013      	ands	r3, r2
 8001e98:	d009      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e9a:	4b2c      	ldr	r3, [pc, #176]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	4393      	bics	r3, r2
 8001ea2:	0019      	movs	r1, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d009      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001eb8:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebc:	4a29      	ldr	r2, [pc, #164]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	01db      	lsls	r3, r3, #7
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d015      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ed8:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	0899      	lsrs	r1, r3, #2
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695a      	ldr	r2, [r3, #20]
 8001ee4:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695a      	ldr	r2, [r3, #20]
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	05db      	lsls	r3, r3, #23
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d106      	bne.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001efc:	2180      	movs	r1, #128	; 0x80
 8001efe:	0249      	lsls	r1, r1, #9
 8001f00:	430a      	orrs	r2, r1
 8001f02:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	2380      	movs	r3, #128	; 0x80
 8001f0a:	011b      	lsls	r3, r3, #4
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d016      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001f10:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f14:	4a14      	ldr	r2, [pc, #80]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	0019      	movs	r1, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691a      	ldr	r2, [r3, #16]
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f20:	430a      	orrs	r2, r1
 8001f22:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	01db      	lsls	r3, r3, #7
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d106      	bne.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f36:	2180      	movs	r1, #128	; 0x80
 8001f38:	0249      	lsls	r1, r1, #9
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001f3e:	2312      	movs	r3, #18
 8001f40:	18fb      	adds	r3, r7, r3
 8001f42:	781b      	ldrb	r3, [r3, #0]
}
 8001f44:	0018      	movs	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b006      	add	sp, #24
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40007000 	.word	0x40007000
 8001f54:	fffffcff 	.word	0xfffffcff
 8001f58:	fffeffff 	.word	0xfffeffff
 8001f5c:	00001388 	.word	0x00001388
 8001f60:	efffffff 	.word	0xefffffff
 8001f64:	ffffcfff 	.word	0xffffcfff
 8001f68:	ffff3fff 	.word	0xffff3fff

08001f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e04a      	b.n	8002014 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	223d      	movs	r2, #61	; 0x3d
 8001f82:	5c9b      	ldrb	r3, [r3, r2]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d107      	bne.n	8001f9a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	223c      	movs	r2, #60	; 0x3c
 8001f8e:	2100      	movs	r1, #0
 8001f90:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	0018      	movs	r0, r3
 8001f96:	f7fe fcdd 	bl	8000954 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	223d      	movs	r2, #61	; 0x3d
 8001f9e:	2102      	movs	r1, #2
 8001fa0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	0019      	movs	r1, r3
 8001fac:	0010      	movs	r0, r2
 8001fae:	f000 f9e5 	bl	800237c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2248      	movs	r2, #72	; 0x48
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	223e      	movs	r2, #62	; 0x3e
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	5499      	strb	r1, [r3, r2]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	223f      	movs	r2, #63	; 0x3f
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	5499      	strb	r1, [r3, r2]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2240      	movs	r2, #64	; 0x40
 8001fce:	2101      	movs	r1, #1
 8001fd0:	5499      	strb	r1, [r3, r2]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2241      	movs	r2, #65	; 0x41
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	5499      	strb	r1, [r3, r2]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2242      	movs	r2, #66	; 0x42
 8001fde:	2101      	movs	r1, #1
 8001fe0:	5499      	strb	r1, [r3, r2]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2243      	movs	r2, #67	; 0x43
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2244      	movs	r2, #68	; 0x44
 8001fee:	2101      	movs	r1, #1
 8001ff0:	5499      	strb	r1, [r3, r2]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2245      	movs	r2, #69	; 0x45
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	5499      	strb	r1, [r3, r2]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2246      	movs	r2, #70	; 0x46
 8001ffe:	2101      	movs	r1, #1
 8002000:	5499      	strb	r1, [r3, r2]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2247      	movs	r2, #71	; 0x47
 8002006:	2101      	movs	r1, #1
 8002008:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	223d      	movs	r2, #61	; 0x3d
 800200e:	2101      	movs	r1, #1
 8002010:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	0018      	movs	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	b002      	add	sp, #8
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	223d      	movs	r2, #61	; 0x3d
 8002028:	5c9b      	ldrb	r3, [r3, r2]
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b01      	cmp	r3, #1
 800202e:	d001      	beq.n	8002034 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e03c      	b.n	80020ae <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	223d      	movs	r2, #61	; 0x3d
 8002038:	2102      	movs	r1, #2
 800203a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2101      	movs	r1, #1
 8002048:	430a      	orrs	r2, r1
 800204a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a19      	ldr	r2, [pc, #100]	; (80020b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d009      	beq.n	800206a <HAL_TIM_Base_Start_IT+0x4e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a18      	ldr	r2, [pc, #96]	; (80020bc <HAL_TIM_Base_Start_IT+0xa0>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d004      	beq.n	800206a <HAL_TIM_Base_Start_IT+0x4e>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a16      	ldr	r2, [pc, #88]	; (80020c0 <HAL_TIM_Base_Start_IT+0xa4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d116      	bne.n	8002098 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	4a14      	ldr	r2, [pc, #80]	; (80020c4 <HAL_TIM_Base_Start_IT+0xa8>)
 8002072:	4013      	ands	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2b06      	cmp	r3, #6
 800207a:	d016      	beq.n	80020aa <HAL_TIM_Base_Start_IT+0x8e>
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	025b      	lsls	r3, r3, #9
 8002082:	429a      	cmp	r2, r3
 8002084:	d011      	beq.n	80020aa <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2101      	movs	r1, #1
 8002092:	430a      	orrs	r2, r1
 8002094:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002096:	e008      	b.n	80020aa <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2101      	movs	r1, #1
 80020a4:	430a      	orrs	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	e000      	b.n	80020ac <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020aa:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	0018      	movs	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b004      	add	sp, #16
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	40012c00 	.word	0x40012c00
 80020bc:	40000400 	.word	0x40000400
 80020c0:	40014000 	.word	0x40014000
 80020c4:	00010007 	.word	0x00010007

080020c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	2202      	movs	r2, #2
 80020d8:	4013      	ands	r3, r2
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d124      	bne.n	8002128 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	2202      	movs	r2, #2
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d11d      	bne.n	8002128 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2203      	movs	r2, #3
 80020f2:	4252      	negs	r2, r2
 80020f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	2203      	movs	r2, #3
 8002104:	4013      	ands	r3, r2
 8002106:	d004      	beq.n	8002112 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	0018      	movs	r0, r3
 800210c:	f000 f91e 	bl	800234c <HAL_TIM_IC_CaptureCallback>
 8002110:	e007      	b.n	8002122 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	0018      	movs	r0, r3
 8002116:	f000 f911 	bl	800233c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	0018      	movs	r0, r3
 800211e:	f000 f91d 	bl	800235c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	2204      	movs	r2, #4
 8002130:	4013      	ands	r3, r2
 8002132:	2b04      	cmp	r3, #4
 8002134:	d125      	bne.n	8002182 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	2204      	movs	r2, #4
 800213e:	4013      	ands	r3, r2
 8002140:	2b04      	cmp	r3, #4
 8002142:	d11e      	bne.n	8002182 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2205      	movs	r2, #5
 800214a:	4252      	negs	r2, r2
 800214c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2202      	movs	r2, #2
 8002152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699a      	ldr	r2, [r3, #24]
 800215a:	23c0      	movs	r3, #192	; 0xc0
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4013      	ands	r3, r2
 8002160:	d004      	beq.n	800216c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	0018      	movs	r0, r3
 8002166:	f000 f8f1 	bl	800234c <HAL_TIM_IC_CaptureCallback>
 800216a:	e007      	b.n	800217c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	0018      	movs	r0, r3
 8002170:	f000 f8e4 	bl	800233c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	0018      	movs	r0, r3
 8002178:	f000 f8f0 	bl	800235c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	2208      	movs	r2, #8
 800218a:	4013      	ands	r3, r2
 800218c:	2b08      	cmp	r3, #8
 800218e:	d124      	bne.n	80021da <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	2208      	movs	r2, #8
 8002198:	4013      	ands	r3, r2
 800219a:	2b08      	cmp	r3, #8
 800219c:	d11d      	bne.n	80021da <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2209      	movs	r2, #9
 80021a4:	4252      	negs	r2, r2
 80021a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2204      	movs	r2, #4
 80021ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	2203      	movs	r2, #3
 80021b6:	4013      	ands	r3, r2
 80021b8:	d004      	beq.n	80021c4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	0018      	movs	r0, r3
 80021be:	f000 f8c5 	bl	800234c <HAL_TIM_IC_CaptureCallback>
 80021c2:	e007      	b.n	80021d4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	0018      	movs	r0, r3
 80021c8:	f000 f8b8 	bl	800233c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	0018      	movs	r0, r3
 80021d0:	f000 f8c4 	bl	800235c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	2210      	movs	r2, #16
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b10      	cmp	r3, #16
 80021e6:	d125      	bne.n	8002234 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	2210      	movs	r2, #16
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b10      	cmp	r3, #16
 80021f4:	d11e      	bne.n	8002234 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2211      	movs	r2, #17
 80021fc:	4252      	negs	r2, r2
 80021fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2208      	movs	r2, #8
 8002204:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	69da      	ldr	r2, [r3, #28]
 800220c:	23c0      	movs	r3, #192	; 0xc0
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4013      	ands	r3, r2
 8002212:	d004      	beq.n	800221e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	0018      	movs	r0, r3
 8002218:	f000 f898 	bl	800234c <HAL_TIM_IC_CaptureCallback>
 800221c:	e007      	b.n	800222e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	0018      	movs	r0, r3
 8002222:	f000 f88b 	bl	800233c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	0018      	movs	r0, r3
 800222a:	f000 f897 	bl	800235c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	2201      	movs	r2, #1
 800223c:	4013      	ands	r3, r2
 800223e:	2b01      	cmp	r3, #1
 8002240:	d10f      	bne.n	8002262 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	2201      	movs	r2, #1
 800224a:	4013      	ands	r3, r2
 800224c:	2b01      	cmp	r3, #1
 800224e:	d108      	bne.n	8002262 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2202      	movs	r2, #2
 8002256:	4252      	negs	r2, r2
 8002258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	0018      	movs	r0, r3
 800225e:	f000 f865 	bl	800232c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	2280      	movs	r2, #128	; 0x80
 800226a:	4013      	ands	r3, r2
 800226c:	2b80      	cmp	r3, #128	; 0x80
 800226e:	d10f      	bne.n	8002290 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	2280      	movs	r2, #128	; 0x80
 8002278:	4013      	ands	r3, r2
 800227a:	2b80      	cmp	r3, #128	; 0x80
 800227c:	d108      	bne.n	8002290 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2281      	movs	r2, #129	; 0x81
 8002284:	4252      	negs	r2, r2
 8002286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	0018      	movs	r0, r3
 800228c:	f000 f95c 	bl	8002548 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	2380      	movs	r3, #128	; 0x80
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	401a      	ands	r2, r3
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d10e      	bne.n	80022c2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2280      	movs	r2, #128	; 0x80
 80022ac:	4013      	ands	r3, r2
 80022ae:	2b80      	cmp	r3, #128	; 0x80
 80022b0:	d107      	bne.n	80022c2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a1c      	ldr	r2, [pc, #112]	; (8002328 <HAL_TIM_IRQHandler+0x260>)
 80022b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	0018      	movs	r0, r3
 80022be:	f000 f94b 	bl	8002558 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	2240      	movs	r2, #64	; 0x40
 80022ca:	4013      	ands	r3, r2
 80022cc:	2b40      	cmp	r3, #64	; 0x40
 80022ce:	d10f      	bne.n	80022f0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2240      	movs	r2, #64	; 0x40
 80022d8:	4013      	ands	r3, r2
 80022da:	2b40      	cmp	r3, #64	; 0x40
 80022dc:	d108      	bne.n	80022f0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2241      	movs	r2, #65	; 0x41
 80022e4:	4252      	negs	r2, r2
 80022e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	0018      	movs	r0, r3
 80022ec:	f000 f83e 	bl	800236c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	2220      	movs	r2, #32
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b20      	cmp	r3, #32
 80022fc:	d10f      	bne.n	800231e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	2220      	movs	r2, #32
 8002306:	4013      	ands	r3, r2
 8002308:	2b20      	cmp	r3, #32
 800230a:	d108      	bne.n	800231e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2221      	movs	r2, #33	; 0x21
 8002312:	4252      	negs	r2, r2
 8002314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	0018      	movs	r0, r3
 800231a:	f000 f90d 	bl	8002538 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	46bd      	mov	sp, r7
 8002322:	b002      	add	sp, #8
 8002324:	bd80      	pop	{r7, pc}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	fffffeff 	.word	0xfffffeff

0800232c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002334:	46c0      	nop			; (mov r8, r8)
 8002336:	46bd      	mov	sp, r7
 8002338:	b002      	add	sp, #8
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002344:	46c0      	nop			; (mov r8, r8)
 8002346:	46bd      	mov	sp, r7
 8002348:	b002      	add	sp, #8
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002354:	46c0      	nop			; (mov r8, r8)
 8002356:	46bd      	mov	sp, r7
 8002358:	b002      	add	sp, #8
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002364:	46c0      	nop			; (mov r8, r8)
 8002366:	46bd      	mov	sp, r7
 8002368:	b002      	add	sp, #8
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002374:	46c0      	nop			; (mov r8, r8)
 8002376:	46bd      	mov	sp, r7
 8002378:	b002      	add	sp, #8
 800237a:	bd80      	pop	{r7, pc}

0800237c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a2f      	ldr	r2, [pc, #188]	; (800244c <TIM_Base_SetConfig+0xd0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d003      	beq.n	800239c <TIM_Base_SetConfig+0x20>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a2e      	ldr	r2, [pc, #184]	; (8002450 <TIM_Base_SetConfig+0xd4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d108      	bne.n	80023ae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2270      	movs	r2, #112	; 0x70
 80023a0:	4393      	bics	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a26      	ldr	r2, [pc, #152]	; (800244c <TIM_Base_SetConfig+0xd0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d013      	beq.n	80023de <TIM_Base_SetConfig+0x62>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a25      	ldr	r2, [pc, #148]	; (8002450 <TIM_Base_SetConfig+0xd4>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d00f      	beq.n	80023de <TIM_Base_SetConfig+0x62>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a24      	ldr	r2, [pc, #144]	; (8002454 <TIM_Base_SetConfig+0xd8>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00b      	beq.n	80023de <TIM_Base_SetConfig+0x62>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a23      	ldr	r2, [pc, #140]	; (8002458 <TIM_Base_SetConfig+0xdc>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d007      	beq.n	80023de <TIM_Base_SetConfig+0x62>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a22      	ldr	r2, [pc, #136]	; (800245c <TIM_Base_SetConfig+0xe0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d003      	beq.n	80023de <TIM_Base_SetConfig+0x62>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a21      	ldr	r2, [pc, #132]	; (8002460 <TIM_Base_SetConfig+0xe4>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d108      	bne.n	80023f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4a20      	ldr	r2, [pc, #128]	; (8002464 <TIM_Base_SetConfig+0xe8>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2280      	movs	r2, #128	; 0x80
 80023f4:	4393      	bics	r3, r2
 80023f6:	001a      	movs	r2, r3
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a0c      	ldr	r2, [pc, #48]	; (800244c <TIM_Base_SetConfig+0xd0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d00b      	beq.n	8002436 <TIM_Base_SetConfig+0xba>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a0d      	ldr	r2, [pc, #52]	; (8002458 <TIM_Base_SetConfig+0xdc>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d007      	beq.n	8002436 <TIM_Base_SetConfig+0xba>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a0c      	ldr	r2, [pc, #48]	; (800245c <TIM_Base_SetConfig+0xe0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d003      	beq.n	8002436 <TIM_Base_SetConfig+0xba>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a0b      	ldr	r2, [pc, #44]	; (8002460 <TIM_Base_SetConfig+0xe4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d103      	bne.n	800243e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	691a      	ldr	r2, [r3, #16]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	615a      	str	r2, [r3, #20]
}
 8002444:	46c0      	nop			; (mov r8, r8)
 8002446:	46bd      	mov	sp, r7
 8002448:	b004      	add	sp, #16
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40012c00 	.word	0x40012c00
 8002450:	40000400 	.word	0x40000400
 8002454:	40002000 	.word	0x40002000
 8002458:	40014000 	.word	0x40014000
 800245c:	40014400 	.word	0x40014400
 8002460:	40014800 	.word	0x40014800
 8002464:	fffffcff 	.word	0xfffffcff

08002468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	223c      	movs	r2, #60	; 0x3c
 8002476:	5c9b      	ldrb	r3, [r3, r2]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d101      	bne.n	8002480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800247c:	2302      	movs	r3, #2
 800247e:	e04f      	b.n	8002520 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	223c      	movs	r2, #60	; 0x3c
 8002484:	2101      	movs	r1, #1
 8002486:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	223d      	movs	r2, #61	; 0x3d
 800248c:	2102      	movs	r1, #2
 800248e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a20      	ldr	r2, [pc, #128]	; (8002528 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d108      	bne.n	80024bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4a1f      	ldr	r2, [pc, #124]	; (800252c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2270      	movs	r2, #112	; 0x70
 80024c0:	4393      	bics	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a13      	ldr	r2, [pc, #76]	; (8002528 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d009      	beq.n	80024f4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a12      	ldr	r2, [pc, #72]	; (8002530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d004      	beq.n	80024f4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a11      	ldr	r2, [pc, #68]	; (8002534 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d10c      	bne.n	800250e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2280      	movs	r2, #128	; 0x80
 80024f8:	4393      	bics	r3, r2
 80024fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	4313      	orrs	r3, r2
 8002504:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	223d      	movs	r2, #61	; 0x3d
 8002512:	2101      	movs	r1, #1
 8002514:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	223c      	movs	r2, #60	; 0x3c
 800251a:	2100      	movs	r1, #0
 800251c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	0018      	movs	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	b004      	add	sp, #16
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40012c00 	.word	0x40012c00
 800252c:	ff0fffff 	.word	0xff0fffff
 8002530:	40000400 	.word	0x40000400
 8002534:	40014000 	.word	0x40014000

08002538 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002540:	46c0      	nop			; (mov r8, r8)
 8002542:	46bd      	mov	sp, r7
 8002544:	b002      	add	sp, #8
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002550:	46c0      	nop			; (mov r8, r8)
 8002552:	46bd      	mov	sp, r7
 8002554:	b002      	add	sp, #8
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002560:	46c0      	nop			; (mov r8, r8)
 8002562:	46bd      	mov	sp, r7
 8002564:	b002      	add	sp, #8
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e046      	b.n	8002608 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2288      	movs	r2, #136	; 0x88
 800257e:	589b      	ldr	r3, [r3, r2]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d107      	bne.n	8002594 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2284      	movs	r2, #132	; 0x84
 8002588:	2100      	movs	r1, #0
 800258a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	0018      	movs	r0, r3
 8002590:	f7fe fa54 	bl	8000a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2288      	movs	r2, #136	; 0x88
 8002598:	2124      	movs	r1, #36	; 0x24
 800259a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2101      	movs	r1, #1
 80025a8:	438a      	bics	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	0018      	movs	r0, r3
 80025b0:	f000 fc84 	bl	8002ebc <UART_SetConfig>
 80025b4:	0003      	movs	r3, r0
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e024      	b.n	8002608 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	0018      	movs	r0, r3
 80025ca:	f000 fe1b 	bl	8003204 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	490d      	ldr	r1, [pc, #52]	; (8002610 <HAL_UART_Init+0xa8>)
 80025da:	400a      	ands	r2, r1
 80025dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	212a      	movs	r1, #42	; 0x2a
 80025ea:	438a      	bics	r2, r1
 80025ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2101      	movs	r1, #1
 80025fa:	430a      	orrs	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	0018      	movs	r0, r3
 8002602:	f000 feb3 	bl	800336c <UART_CheckIdleState>
 8002606:	0003      	movs	r3, r0
}
 8002608:	0018      	movs	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	b002      	add	sp, #8
 800260e:	bd80      	pop	{r7, pc}
 8002610:	ffffb7ff 	.word	0xffffb7ff

08002614 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08c      	sub	sp, #48	; 0x30
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	1dbb      	adds	r3, r7, #6
 8002620:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2288      	movs	r2, #136	; 0x88
 8002626:	589b      	ldr	r3, [r3, r2]
 8002628:	2b20      	cmp	r3, #32
 800262a:	d000      	beq.n	800262e <HAL_UART_Transmit_IT+0x1a>
 800262c:	e08d      	b.n	800274a <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_UART_Transmit_IT+0x28>
 8002634:	1dbb      	adds	r3, r7, #6
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e085      	b.n	800274c <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	2380      	movs	r3, #128	; 0x80
 8002646:	015b      	lsls	r3, r3, #5
 8002648:	429a      	cmp	r2, r3
 800264a:	d109      	bne.n	8002660 <HAL_UART_Transmit_IT+0x4c>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d105      	bne.n	8002660 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2201      	movs	r2, #1
 8002658:	4013      	ands	r3, r2
 800265a:	d001      	beq.n	8002660 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e075      	b.n	800274c <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	1dba      	adds	r2, r7, #6
 800266a:	2154      	movs	r1, #84	; 0x54
 800266c:	8812      	ldrh	r2, [r2, #0]
 800266e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	1dba      	adds	r2, r7, #6
 8002674:	2156      	movs	r1, #86	; 0x56
 8002676:	8812      	ldrh	r2, [r2, #0]
 8002678:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2290      	movs	r2, #144	; 0x90
 8002684:	2100      	movs	r1, #0
 8002686:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2288      	movs	r2, #136	; 0x88
 800268c:	2121      	movs	r1, #33	; 0x21
 800268e:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	059b      	lsls	r3, r3, #22
 8002698:	429a      	cmp	r2, r3
 800269a:	d12a      	bne.n	80026f2 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	015b      	lsls	r3, r3, #5
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d107      	bne.n	80026b8 <HAL_UART_Transmit_IT+0xa4>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d103      	bne.n	80026b8 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4a28      	ldr	r2, [pc, #160]	; (8002754 <HAL_UART_Transmit_IT+0x140>)
 80026b4:	679a      	str	r2, [r3, #120]	; 0x78
 80026b6:	e002      	b.n	80026be <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4a27      	ldr	r2, [pc, #156]	; (8002758 <HAL_UART_Transmit_IT+0x144>)
 80026bc:	679a      	str	r2, [r3, #120]	; 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026be:	f3ef 8310 	mrs	r3, PRIMASK
 80026c2:	61fb      	str	r3, [r7, #28]
  return(result);
 80026c4:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80026c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80026c8:	2301      	movs	r3, #1
 80026ca:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	f383 8810 	msr	PRIMASK, r3
}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2180      	movs	r1, #128	; 0x80
 80026e0:	0409      	lsls	r1, r1, #16
 80026e2:	430a      	orrs	r2, r1
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	f383 8810 	msr	PRIMASK, r3
}
 80026f0:	e029      	b.n	8002746 <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	2380      	movs	r3, #128	; 0x80
 80026f8:	015b      	lsls	r3, r3, #5
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d107      	bne.n	800270e <HAL_UART_Transmit_IT+0xfa>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d103      	bne.n	800270e <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4a14      	ldr	r2, [pc, #80]	; (800275c <HAL_UART_Transmit_IT+0x148>)
 800270a:	679a      	str	r2, [r3, #120]	; 0x78
 800270c:	e002      	b.n	8002714 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4a13      	ldr	r2, [pc, #76]	; (8002760 <HAL_UART_Transmit_IT+0x14c>)
 8002712:	679a      	str	r2, [r3, #120]	; 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002714:	f3ef 8310 	mrs	r3, PRIMASK
 8002718:	613b      	str	r3, [r7, #16]
  return(result);
 800271a:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800271c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800271e:	2301      	movs	r3, #1
 8002720:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f383 8810 	msr	PRIMASK, r3
}
 8002728:	46c0      	nop			; (mov r8, r8)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2180      	movs	r1, #128	; 0x80
 8002736:	430a      	orrs	r2, r1
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	f383 8810 	msr	PRIMASK, r3
}
 8002744:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 8002746:	2300      	movs	r3, #0
 8002748:	e000      	b.n	800274c <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 800274a:	2302      	movs	r3, #2
  }
}
 800274c:	0018      	movs	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	b00c      	add	sp, #48	; 0x30
 8002752:	bd80      	pop	{r7, pc}
 8002754:	08003b39 	.word	0x08003b39
 8002758:	08003a4d 	.word	0x08003a4d
 800275c:	0800398f 	.word	0x0800398f
 8002760:	080038db 	.word	0x080038db

08002764 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	1dbb      	adds	r3, r7, #6
 8002770:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	228c      	movs	r2, #140	; 0x8c
 8002776:	589b      	ldr	r3, [r3, r2]
 8002778:	2b20      	cmp	r3, #32
 800277a:	d145      	bne.n	8002808 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_UART_Receive_IT+0x26>
 8002782:	1dbb      	adds	r3, r7, #6
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e03d      	b.n	800280a <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	2380      	movs	r3, #128	; 0x80
 8002794:	015b      	lsls	r3, r3, #5
 8002796:	429a      	cmp	r2, r3
 8002798:	d109      	bne.n	80027ae <HAL_UART_Receive_IT+0x4a>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d105      	bne.n	80027ae <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2201      	movs	r2, #1
 80027a6:	4013      	ands	r3, r2
 80027a8:	d001      	beq.n	80027ae <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e02d      	b.n	800280a <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	041b      	lsls	r3, r3, #16
 80027be:	4013      	ands	r3, r2
 80027c0:	d019      	beq.n	80027f6 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027c2:	f3ef 8310 	mrs	r3, PRIMASK
 80027c6:	613b      	str	r3, [r7, #16]
  return(result);
 80027c8:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80027ca:	61fb      	str	r3, [r7, #28]
 80027cc:	2301      	movs	r3, #1
 80027ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f383 8810 	msr	PRIMASK, r3
}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2180      	movs	r1, #128	; 0x80
 80027e4:	04c9      	lsls	r1, r1, #19
 80027e6:	430a      	orrs	r2, r1
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	f383 8810 	msr	PRIMASK, r3
}
 80027f4:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80027f6:	1dbb      	adds	r3, r7, #6
 80027f8:	881a      	ldrh	r2, [r3, #0]
 80027fa:	68b9      	ldr	r1, [r7, #8]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	0018      	movs	r0, r3
 8002800:	f000 feca 	bl	8003598 <UART_Start_Receive_IT>
 8002804:	0003      	movs	r3, r0
 8002806:	e000      	b.n	800280a <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002808:	2302      	movs	r3, #2
  }
}
 800280a:	0018      	movs	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	b008      	add	sp, #32
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002814:	b5b0      	push	{r4, r5, r7, lr}
 8002816:	b0aa      	sub	sp, #168	; 0xa8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	22a4      	movs	r2, #164	; 0xa4
 8002824:	18b9      	adds	r1, r7, r2
 8002826:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	20a0      	movs	r0, #160	; 0xa0
 8002830:	1839      	adds	r1, r7, r0
 8002832:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	249c      	movs	r4, #156	; 0x9c
 800283c:	1939      	adds	r1, r7, r4
 800283e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002840:	0011      	movs	r1, r2
 8002842:	18bb      	adds	r3, r7, r2
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4aa2      	ldr	r2, [pc, #648]	; (8002ad0 <HAL_UART_IRQHandler+0x2bc>)
 8002848:	4013      	ands	r3, r2
 800284a:	2298      	movs	r2, #152	; 0x98
 800284c:	18bd      	adds	r5, r7, r2
 800284e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002850:	18bb      	adds	r3, r7, r2
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d11a      	bne.n	800288e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002858:	187b      	adds	r3, r7, r1
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2220      	movs	r2, #32
 800285e:	4013      	ands	r3, r2
 8002860:	d015      	beq.n	800288e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002862:	183b      	adds	r3, r7, r0
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2220      	movs	r2, #32
 8002868:	4013      	ands	r3, r2
 800286a:	d105      	bne.n	8002878 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800286c:	193b      	adds	r3, r7, r4
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	055b      	lsls	r3, r3, #21
 8002874:	4013      	ands	r3, r2
 8002876:	d00a      	beq.n	800288e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800287c:	2b00      	cmp	r3, #0
 800287e:	d100      	bne.n	8002882 <HAL_UART_IRQHandler+0x6e>
 8002880:	e2dc      	b.n	8002e3c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	0010      	movs	r0, r2
 800288a:	4798      	blx	r3
      }
      return;
 800288c:	e2d6      	b.n	8002e3c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800288e:	2398      	movs	r3, #152	; 0x98
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d100      	bne.n	800289a <HAL_UART_IRQHandler+0x86>
 8002898:	e122      	b.n	8002ae0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800289a:	239c      	movs	r3, #156	; 0x9c
 800289c:	18fb      	adds	r3, r7, r3
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a8c      	ldr	r2, [pc, #560]	; (8002ad4 <HAL_UART_IRQHandler+0x2c0>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	d106      	bne.n	80028b4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80028a6:	23a0      	movs	r3, #160	; 0xa0
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a8a      	ldr	r2, [pc, #552]	; (8002ad8 <HAL_UART_IRQHandler+0x2c4>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	d100      	bne.n	80028b4 <HAL_UART_IRQHandler+0xa0>
 80028b2:	e115      	b.n	8002ae0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80028b4:	23a4      	movs	r3, #164	; 0xa4
 80028b6:	18fb      	adds	r3, r7, r3
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2201      	movs	r2, #1
 80028bc:	4013      	ands	r3, r2
 80028be:	d012      	beq.n	80028e6 <HAL_UART_IRQHandler+0xd2>
 80028c0:	23a0      	movs	r3, #160	; 0xa0
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	2380      	movs	r3, #128	; 0x80
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4013      	ands	r3, r2
 80028cc:	d00b      	beq.n	80028e6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2201      	movs	r2, #1
 80028d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2290      	movs	r2, #144	; 0x90
 80028da:	589b      	ldr	r3, [r3, r2]
 80028dc:	2201      	movs	r2, #1
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2190      	movs	r1, #144	; 0x90
 80028e4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028e6:	23a4      	movs	r3, #164	; 0xa4
 80028e8:	18fb      	adds	r3, r7, r3
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2202      	movs	r2, #2
 80028ee:	4013      	ands	r3, r2
 80028f0:	d011      	beq.n	8002916 <HAL_UART_IRQHandler+0x102>
 80028f2:	239c      	movs	r3, #156	; 0x9c
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2201      	movs	r2, #1
 80028fa:	4013      	ands	r3, r2
 80028fc:	d00b      	beq.n	8002916 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2202      	movs	r2, #2
 8002904:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2290      	movs	r2, #144	; 0x90
 800290a:	589b      	ldr	r3, [r3, r2]
 800290c:	2204      	movs	r2, #4
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2190      	movs	r1, #144	; 0x90
 8002914:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002916:	23a4      	movs	r3, #164	; 0xa4
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2204      	movs	r2, #4
 800291e:	4013      	ands	r3, r2
 8002920:	d011      	beq.n	8002946 <HAL_UART_IRQHandler+0x132>
 8002922:	239c      	movs	r3, #156	; 0x9c
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2201      	movs	r2, #1
 800292a:	4013      	ands	r3, r2
 800292c:	d00b      	beq.n	8002946 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2204      	movs	r2, #4
 8002934:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2290      	movs	r2, #144	; 0x90
 800293a:	589b      	ldr	r3, [r3, r2]
 800293c:	2202      	movs	r2, #2
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2190      	movs	r1, #144	; 0x90
 8002944:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002946:	23a4      	movs	r3, #164	; 0xa4
 8002948:	18fb      	adds	r3, r7, r3
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2208      	movs	r2, #8
 800294e:	4013      	ands	r3, r2
 8002950:	d017      	beq.n	8002982 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002952:	23a0      	movs	r3, #160	; 0xa0
 8002954:	18fb      	adds	r3, r7, r3
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2220      	movs	r2, #32
 800295a:	4013      	ands	r3, r2
 800295c:	d105      	bne.n	800296a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800295e:	239c      	movs	r3, #156	; 0x9c
 8002960:	18fb      	adds	r3, r7, r3
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a5b      	ldr	r2, [pc, #364]	; (8002ad4 <HAL_UART_IRQHandler+0x2c0>)
 8002966:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002968:	d00b      	beq.n	8002982 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2208      	movs	r2, #8
 8002970:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2290      	movs	r2, #144	; 0x90
 8002976:	589b      	ldr	r3, [r3, r2]
 8002978:	2208      	movs	r2, #8
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2190      	movs	r1, #144	; 0x90
 8002980:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002982:	23a4      	movs	r3, #164	; 0xa4
 8002984:	18fb      	adds	r3, r7, r3
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	2380      	movs	r3, #128	; 0x80
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	4013      	ands	r3, r2
 800298e:	d013      	beq.n	80029b8 <HAL_UART_IRQHandler+0x1a4>
 8002990:	23a0      	movs	r3, #160	; 0xa0
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	2380      	movs	r3, #128	; 0x80
 8002998:	04db      	lsls	r3, r3, #19
 800299a:	4013      	ands	r3, r2
 800299c:	d00c      	beq.n	80029b8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2280      	movs	r2, #128	; 0x80
 80029a4:	0112      	lsls	r2, r2, #4
 80029a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2290      	movs	r2, #144	; 0x90
 80029ac:	589b      	ldr	r3, [r3, r2]
 80029ae:	2220      	movs	r2, #32
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2190      	movs	r1, #144	; 0x90
 80029b6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2290      	movs	r2, #144	; 0x90
 80029bc:	589b      	ldr	r3, [r3, r2]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d100      	bne.n	80029c4 <HAL_UART_IRQHandler+0x1b0>
 80029c2:	e23d      	b.n	8002e40 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80029c4:	23a4      	movs	r3, #164	; 0xa4
 80029c6:	18fb      	adds	r3, r7, r3
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2220      	movs	r2, #32
 80029cc:	4013      	ands	r3, r2
 80029ce:	d015      	beq.n	80029fc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80029d0:	23a0      	movs	r3, #160	; 0xa0
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2220      	movs	r2, #32
 80029d8:	4013      	ands	r3, r2
 80029da:	d106      	bne.n	80029ea <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80029dc:	239c      	movs	r3, #156	; 0x9c
 80029de:	18fb      	adds	r3, r7, r3
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	2380      	movs	r3, #128	; 0x80
 80029e4:	055b      	lsls	r3, r3, #21
 80029e6:	4013      	ands	r3, r2
 80029e8:	d008      	beq.n	80029fc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d004      	beq.n	80029fc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	0010      	movs	r0, r2
 80029fa:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2290      	movs	r2, #144	; 0x90
 8002a00:	589b      	ldr	r3, [r3, r2]
 8002a02:	2194      	movs	r1, #148	; 0x94
 8002a04:	187a      	adds	r2, r7, r1
 8002a06:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2240      	movs	r2, #64	; 0x40
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b40      	cmp	r3, #64	; 0x40
 8002a14:	d004      	beq.n	8002a20 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a16:	187b      	adds	r3, r7, r1
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2228      	movs	r2, #40	; 0x28
 8002a1c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a1e:	d04c      	beq.n	8002aba <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	0018      	movs	r0, r3
 8002a24:	f000 fedc 	bl	80037e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2240      	movs	r2, #64	; 0x40
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b40      	cmp	r3, #64	; 0x40
 8002a34:	d13c      	bne.n	8002ab0 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a36:	f3ef 8310 	mrs	r3, PRIMASK
 8002a3a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002a3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a3e:	2090      	movs	r0, #144	; 0x90
 8002a40:	183a      	adds	r2, r7, r0
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	2301      	movs	r3, #1
 8002a46:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a4a:	f383 8810 	msr	PRIMASK, r3
}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2140      	movs	r1, #64	; 0x40
 8002a5c:	438a      	bics	r2, r1
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	183b      	adds	r3, r7, r0
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a68:	f383 8810 	msr	PRIMASK, r3
}
 8002a6c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2280      	movs	r2, #128	; 0x80
 8002a72:	589b      	ldr	r3, [r3, r2]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d016      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2280      	movs	r2, #128	; 0x80
 8002a7c:	589b      	ldr	r3, [r3, r2]
 8002a7e:	4a17      	ldr	r2, [pc, #92]	; (8002adc <HAL_UART_IRQHandler+0x2c8>)
 8002a80:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2280      	movs	r2, #128	; 0x80
 8002a86:	589b      	ldr	r3, [r3, r2]
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f7fe fa2f 	bl	8000eec <HAL_DMA_Abort_IT>
 8002a8e:	1e03      	subs	r3, r0, #0
 8002a90:	d01c      	beq.n	8002acc <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2280      	movs	r2, #128	; 0x80
 8002a96:	589b      	ldr	r3, [r3, r2]
 8002a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	2180      	movs	r1, #128	; 0x80
 8002a9e:	5852      	ldr	r2, [r2, r1]
 8002aa0:	0010      	movs	r0, r2
 8002aa2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aa4:	e012      	b.n	8002acc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f000 f9e1 	bl	8002e70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aae:	e00d      	b.n	8002acc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f000 f9dc 	bl	8002e70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab8:	e008      	b.n	8002acc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	0018      	movs	r0, r3
 8002abe:	f000 f9d7 	bl	8002e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2290      	movs	r2, #144	; 0x90
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002aca:	e1b9      	b.n	8002e40 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002acc:	46c0      	nop			; (mov r8, r8)
    return;
 8002ace:	e1b7      	b.n	8002e40 <HAL_UART_IRQHandler+0x62c>
 8002ad0:	0000080f 	.word	0x0000080f
 8002ad4:	10000001 	.word	0x10000001
 8002ad8:	04000120 	.word	0x04000120
 8002adc:	080038ad 	.word	0x080038ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d000      	beq.n	8002aea <HAL_UART_IRQHandler+0x2d6>
 8002ae8:	e13e      	b.n	8002d68 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002aea:	23a4      	movs	r3, #164	; 0xa4
 8002aec:	18fb      	adds	r3, r7, r3
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2210      	movs	r2, #16
 8002af2:	4013      	ands	r3, r2
 8002af4:	d100      	bne.n	8002af8 <HAL_UART_IRQHandler+0x2e4>
 8002af6:	e137      	b.n	8002d68 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002af8:	23a0      	movs	r3, #160	; 0xa0
 8002afa:	18fb      	adds	r3, r7, r3
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2210      	movs	r2, #16
 8002b00:	4013      	ands	r3, r2
 8002b02:	d100      	bne.n	8002b06 <HAL_UART_IRQHandler+0x2f2>
 8002b04:	e130      	b.n	8002d68 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2210      	movs	r2, #16
 8002b0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2240      	movs	r2, #64	; 0x40
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b40      	cmp	r3, #64	; 0x40
 8002b1a:	d000      	beq.n	8002b1e <HAL_UART_IRQHandler+0x30a>
 8002b1c:	e0a4      	b.n	8002c68 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2280      	movs	r2, #128	; 0x80
 8002b22:	589b      	ldr	r3, [r3, r2]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	217e      	movs	r1, #126	; 0x7e
 8002b2a:	187b      	adds	r3, r7, r1
 8002b2c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002b2e:	187b      	adds	r3, r7, r1
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d100      	bne.n	8002b38 <HAL_UART_IRQHandler+0x324>
 8002b36:	e185      	b.n	8002e44 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	225c      	movs	r2, #92	; 0x5c
 8002b3c:	5a9b      	ldrh	r3, [r3, r2]
 8002b3e:	187a      	adds	r2, r7, r1
 8002b40:	8812      	ldrh	r2, [r2, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d300      	bcc.n	8002b48 <HAL_UART_IRQHandler+0x334>
 8002b46:	e17d      	b.n	8002e44 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	187a      	adds	r2, r7, r1
 8002b4c:	215e      	movs	r1, #94	; 0x5e
 8002b4e:	8812      	ldrh	r2, [r2, #0]
 8002b50:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2280      	movs	r2, #128	; 0x80
 8002b56:	589b      	ldr	r3, [r3, r2]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d170      	bne.n	8002c44 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b62:	f3ef 8310 	mrs	r3, PRIMASK
 8002b66:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b72:	f383 8810 	msr	PRIMASK, r3
}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	49b4      	ldr	r1, [pc, #720]	; (8002e54 <HAL_UART_IRQHandler+0x640>)
 8002b84:	400a      	ands	r2, r1
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b8a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8e:	f383 8810 	msr	PRIMASK, r3
}
 8002b92:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b94:	f3ef 8310 	mrs	r3, PRIMASK
 8002b98:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b9c:	677b      	str	r3, [r7, #116]	; 0x74
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ba4:	f383 8810 	msr	PRIMASK, r3
}
 8002ba8:	46c0      	nop			; (mov r8, r8)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	438a      	bics	r2, r1
 8002bb8:	609a      	str	r2, [r3, #8]
 8002bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bbc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bc0:	f383 8810 	msr	PRIMASK, r3
}
 8002bc4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bc6:	f3ef 8310 	mrs	r3, PRIMASK
 8002bca:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bce:	673b      	str	r3, [r7, #112]	; 0x70
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bd6:	f383 8810 	msr	PRIMASK, r3
}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2140      	movs	r1, #64	; 0x40
 8002be8:	438a      	bics	r2, r1
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bee:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf2:	f383 8810 	msr	PRIMASK, r3
}
 8002bf6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	228c      	movs	r2, #140	; 0x8c
 8002bfc:	2120      	movs	r1, #32
 8002bfe:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c06:	f3ef 8310 	mrs	r3, PRIMASK
 8002c0a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c10:	2301      	movs	r3, #1
 8002c12:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c16:	f383 8810 	msr	PRIMASK, r3
}
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2110      	movs	r1, #16
 8002c28:	438a      	bics	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c32:	f383 8810 	msr	PRIMASK, r3
}
 8002c36:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2280      	movs	r2, #128	; 0x80
 8002c3c:	589b      	ldr	r3, [r3, r2]
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f7fe f8f2 	bl	8000e28 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	225c      	movs	r2, #92	; 0x5c
 8002c4e:	5a9a      	ldrh	r2, [r3, r2]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	215e      	movs	r1, #94	; 0x5e
 8002c54:	5a5b      	ldrh	r3, [r3, r1]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	0011      	movs	r1, r2
 8002c60:	0018      	movs	r0, r3
 8002c62:	f000 f90d 	bl	8002e80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c66:	e0ed      	b.n	8002e44 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	225c      	movs	r2, #92	; 0x5c
 8002c6c:	5a99      	ldrh	r1, [r3, r2]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	225e      	movs	r2, #94	; 0x5e
 8002c72:	5a9b      	ldrh	r3, [r3, r2]
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	208e      	movs	r0, #142	; 0x8e
 8002c78:	183b      	adds	r3, r7, r0
 8002c7a:	1a8a      	subs	r2, r1, r2
 8002c7c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	225e      	movs	r2, #94	; 0x5e
 8002c82:	5a9b      	ldrh	r3, [r3, r2]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d100      	bne.n	8002c8c <HAL_UART_IRQHandler+0x478>
 8002c8a:	e0dd      	b.n	8002e48 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002c8c:	183b      	adds	r3, r7, r0
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d100      	bne.n	8002c96 <HAL_UART_IRQHandler+0x482>
 8002c94:	e0d8      	b.n	8002e48 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c96:	f3ef 8310 	mrs	r3, PRIMASK
 8002c9a:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c9e:	2488      	movs	r4, #136	; 0x88
 8002ca0:	193a      	adds	r2, r7, r4
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f383 8810 	msr	PRIMASK, r3
}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4967      	ldr	r1, [pc, #412]	; (8002e58 <HAL_UART_IRQHandler+0x644>)
 8002cbc:	400a      	ands	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	193b      	adds	r3, r7, r4
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f383 8810 	msr	PRIMASK, r3
}
 8002ccc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cce:	f3ef 8310 	mrs	r3, PRIMASK
 8002cd2:	61bb      	str	r3, [r7, #24]
  return(result);
 8002cd4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002cd6:	2484      	movs	r4, #132	; 0x84
 8002cd8:	193a      	adds	r2, r7, r4
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	2301      	movs	r3, #1
 8002cde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f383 8810 	msr	PRIMASK, r3
}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	495a      	ldr	r1, [pc, #360]	; (8002e5c <HAL_UART_IRQHandler+0x648>)
 8002cf4:	400a      	ands	r2, r1
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	193b      	adds	r3, r7, r4
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	f383 8810 	msr	PRIMASK, r3
}
 8002d04:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	228c      	movs	r2, #140	; 0x8c
 8002d0a:	2120      	movs	r1, #32
 8002d0c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d22:	2480      	movs	r4, #128	; 0x80
 8002d24:	193a      	adds	r2, r7, r4
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	2301      	movs	r3, #1
 8002d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2e:	f383 8810 	msr	PRIMASK, r3
}
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2110      	movs	r1, #16
 8002d40:	438a      	bics	r2, r1
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	193b      	adds	r3, r7, r4
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4c:	f383 8810 	msr	PRIMASK, r3
}
 8002d50:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2202      	movs	r2, #2
 8002d56:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d58:	183b      	adds	r3, r7, r0
 8002d5a:	881a      	ldrh	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	0011      	movs	r1, r2
 8002d60:	0018      	movs	r0, r3
 8002d62:	f000 f88d 	bl	8002e80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d66:	e06f      	b.n	8002e48 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d68:	23a4      	movs	r3, #164	; 0xa4
 8002d6a:	18fb      	adds	r3, r7, r3
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	035b      	lsls	r3, r3, #13
 8002d72:	4013      	ands	r3, r2
 8002d74:	d010      	beq.n	8002d98 <HAL_UART_IRQHandler+0x584>
 8002d76:	239c      	movs	r3, #156	; 0x9c
 8002d78:	18fb      	adds	r3, r7, r3
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	2380      	movs	r3, #128	; 0x80
 8002d7e:	03db      	lsls	r3, r3, #15
 8002d80:	4013      	ands	r3, r2
 8002d82:	d009      	beq.n	8002d98 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2280      	movs	r2, #128	; 0x80
 8002d8a:	0352      	lsls	r2, r2, #13
 8002d8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	0018      	movs	r0, r3
 8002d92:	f001 fbd7 	bl	8004544 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d96:	e05a      	b.n	8002e4e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002d98:	23a4      	movs	r3, #164	; 0xa4
 8002d9a:	18fb      	adds	r3, r7, r3
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2280      	movs	r2, #128	; 0x80
 8002da0:	4013      	ands	r3, r2
 8002da2:	d016      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002da4:	23a0      	movs	r3, #160	; 0xa0
 8002da6:	18fb      	adds	r3, r7, r3
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2280      	movs	r2, #128	; 0x80
 8002dac:	4013      	ands	r3, r2
 8002dae:	d106      	bne.n	8002dbe <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002db0:	239c      	movs	r3, #156	; 0x9c
 8002db2:	18fb      	adds	r3, r7, r3
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	041b      	lsls	r3, r3, #16
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d009      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d042      	beq.n	8002e4c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	0010      	movs	r0, r2
 8002dce:	4798      	blx	r3
    }
    return;
 8002dd0:	e03c      	b.n	8002e4c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002dd2:	23a4      	movs	r3, #164	; 0xa4
 8002dd4:	18fb      	adds	r3, r7, r3
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2240      	movs	r2, #64	; 0x40
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d00a      	beq.n	8002df4 <HAL_UART_IRQHandler+0x5e0>
 8002dde:	23a0      	movs	r3, #160	; 0xa0
 8002de0:	18fb      	adds	r3, r7, r3
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2240      	movs	r2, #64	; 0x40
 8002de6:	4013      	ands	r3, r2
 8002de8:	d004      	beq.n	8002df4 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	0018      	movs	r0, r3
 8002dee:	f000 ff1d 	bl	8003c2c <UART_EndTransmit_IT>
    return;
 8002df2:	e02c      	b.n	8002e4e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002df4:	23a4      	movs	r3, #164	; 0xa4
 8002df6:	18fb      	adds	r3, r7, r3
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	2380      	movs	r3, #128	; 0x80
 8002dfc:	041b      	lsls	r3, r3, #16
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d00b      	beq.n	8002e1a <HAL_UART_IRQHandler+0x606>
 8002e02:	23a0      	movs	r3, #160	; 0xa0
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	2380      	movs	r3, #128	; 0x80
 8002e0a:	05db      	lsls	r3, r3, #23
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d004      	beq.n	8002e1a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	0018      	movs	r0, r3
 8002e14:	f001 fba6 	bl	8004564 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e18:	e019      	b.n	8002e4e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002e1a:	23a4      	movs	r3, #164	; 0xa4
 8002e1c:	18fb      	adds	r3, r7, r3
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	045b      	lsls	r3, r3, #17
 8002e24:	4013      	ands	r3, r2
 8002e26:	d012      	beq.n	8002e4e <HAL_UART_IRQHandler+0x63a>
 8002e28:	23a0      	movs	r3, #160	; 0xa0
 8002e2a:	18fb      	adds	r3, r7, r3
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	da0d      	bge.n	8002e4e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	0018      	movs	r0, r3
 8002e36:	f001 fb8d 	bl	8004554 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e3a:	e008      	b.n	8002e4e <HAL_UART_IRQHandler+0x63a>
      return;
 8002e3c:	46c0      	nop			; (mov r8, r8)
 8002e3e:	e006      	b.n	8002e4e <HAL_UART_IRQHandler+0x63a>
    return;
 8002e40:	46c0      	nop			; (mov r8, r8)
 8002e42:	e004      	b.n	8002e4e <HAL_UART_IRQHandler+0x63a>
      return;
 8002e44:	46c0      	nop			; (mov r8, r8)
 8002e46:	e002      	b.n	8002e4e <HAL_UART_IRQHandler+0x63a>
      return;
 8002e48:	46c0      	nop			; (mov r8, r8)
 8002e4a:	e000      	b.n	8002e4e <HAL_UART_IRQHandler+0x63a>
    return;
 8002e4c:	46c0      	nop			; (mov r8, r8)
  }
}
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b02a      	add	sp, #168	; 0xa8
 8002e52:	bdb0      	pop	{r4, r5, r7, pc}
 8002e54:	fffffeff 	.word	0xfffffeff
 8002e58:	fffffedf 	.word	0xfffffedf
 8002e5c:	effffffe 	.word	0xeffffffe

08002e60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002e68:	46c0      	nop			; (mov r8, r8)
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b002      	add	sp, #8
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e78:	46c0      	nop			; (mov r8, r8)
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	b002      	add	sp, #8
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	000a      	movs	r2, r1
 8002e8a:	1cbb      	adds	r3, r7, #2
 8002e8c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b002      	add	sp, #8
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2288      	movs	r2, #136	; 0x88
 8002ea2:	589b      	ldr	r3, [r3, r2]
 8002ea4:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	228c      	movs	r2, #140	; 0x8c
 8002eaa:	589b      	ldr	r3, [r3, r2]
 8002eac:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	4313      	orrs	r3, r2
}
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	b004      	add	sp, #16
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ec4:	231a      	movs	r3, #26
 8002ec6:	18fb      	adds	r3, r7, r3
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4abc      	ldr	r2, [pc, #752]	; (80031dc <UART_SetConfig+0x320>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	0019      	movs	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	69fa      	ldr	r2, [r7, #28]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	4ab7      	ldr	r2, [pc, #732]	; (80031e0 <UART_SetConfig+0x324>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	0019      	movs	r1, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	69fa      	ldr	r2, [r7, #28]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	4aae      	ldr	r2, [pc, #696]	; (80031e4 <UART_SetConfig+0x328>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	69fa      	ldr	r2, [r7, #28]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3e:	220f      	movs	r2, #15
 8002f40:	4393      	bics	r3, r2
 8002f42:	0019      	movs	r1, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4aa4      	ldr	r2, [pc, #656]	; (80031e8 <UART_SetConfig+0x32c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d127      	bne.n	8002faa <UART_SetConfig+0xee>
 8002f5a:	4ba4      	ldr	r3, [pc, #656]	; (80031ec <UART_SetConfig+0x330>)
 8002f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5e:	2203      	movs	r2, #3
 8002f60:	4013      	ands	r3, r2
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d017      	beq.n	8002f96 <UART_SetConfig+0xda>
 8002f66:	d81b      	bhi.n	8002fa0 <UART_SetConfig+0xe4>
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d00a      	beq.n	8002f82 <UART_SetConfig+0xc6>
 8002f6c:	d818      	bhi.n	8002fa0 <UART_SetConfig+0xe4>
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <UART_SetConfig+0xbc>
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d00a      	beq.n	8002f8c <UART_SetConfig+0xd0>
 8002f76:	e013      	b.n	8002fa0 <UART_SetConfig+0xe4>
 8002f78:	231b      	movs	r3, #27
 8002f7a:	18fb      	adds	r3, r7, r3
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	701a      	strb	r2, [r3, #0]
 8002f80:	e058      	b.n	8003034 <UART_SetConfig+0x178>
 8002f82:	231b      	movs	r3, #27
 8002f84:	18fb      	adds	r3, r7, r3
 8002f86:	2202      	movs	r2, #2
 8002f88:	701a      	strb	r2, [r3, #0]
 8002f8a:	e053      	b.n	8003034 <UART_SetConfig+0x178>
 8002f8c:	231b      	movs	r3, #27
 8002f8e:	18fb      	adds	r3, r7, r3
 8002f90:	2204      	movs	r2, #4
 8002f92:	701a      	strb	r2, [r3, #0]
 8002f94:	e04e      	b.n	8003034 <UART_SetConfig+0x178>
 8002f96:	231b      	movs	r3, #27
 8002f98:	18fb      	adds	r3, r7, r3
 8002f9a:	2208      	movs	r2, #8
 8002f9c:	701a      	strb	r2, [r3, #0]
 8002f9e:	e049      	b.n	8003034 <UART_SetConfig+0x178>
 8002fa0:	231b      	movs	r3, #27
 8002fa2:	18fb      	adds	r3, r7, r3
 8002fa4:	2210      	movs	r2, #16
 8002fa6:	701a      	strb	r2, [r3, #0]
 8002fa8:	e044      	b.n	8003034 <UART_SetConfig+0x178>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a90      	ldr	r2, [pc, #576]	; (80031f0 <UART_SetConfig+0x334>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d127      	bne.n	8003004 <UART_SetConfig+0x148>
 8002fb4:	4b8d      	ldr	r3, [pc, #564]	; (80031ec <UART_SetConfig+0x330>)
 8002fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb8:	220c      	movs	r2, #12
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b0c      	cmp	r3, #12
 8002fbe:	d017      	beq.n	8002ff0 <UART_SetConfig+0x134>
 8002fc0:	d81b      	bhi.n	8002ffa <UART_SetConfig+0x13e>
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d00a      	beq.n	8002fdc <UART_SetConfig+0x120>
 8002fc6:	d818      	bhi.n	8002ffa <UART_SetConfig+0x13e>
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d002      	beq.n	8002fd2 <UART_SetConfig+0x116>
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d00a      	beq.n	8002fe6 <UART_SetConfig+0x12a>
 8002fd0:	e013      	b.n	8002ffa <UART_SetConfig+0x13e>
 8002fd2:	231b      	movs	r3, #27
 8002fd4:	18fb      	adds	r3, r7, r3
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	701a      	strb	r2, [r3, #0]
 8002fda:	e02b      	b.n	8003034 <UART_SetConfig+0x178>
 8002fdc:	231b      	movs	r3, #27
 8002fde:	18fb      	adds	r3, r7, r3
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	701a      	strb	r2, [r3, #0]
 8002fe4:	e026      	b.n	8003034 <UART_SetConfig+0x178>
 8002fe6:	231b      	movs	r3, #27
 8002fe8:	18fb      	adds	r3, r7, r3
 8002fea:	2204      	movs	r2, #4
 8002fec:	701a      	strb	r2, [r3, #0]
 8002fee:	e021      	b.n	8003034 <UART_SetConfig+0x178>
 8002ff0:	231b      	movs	r3, #27
 8002ff2:	18fb      	adds	r3, r7, r3
 8002ff4:	2208      	movs	r2, #8
 8002ff6:	701a      	strb	r2, [r3, #0]
 8002ff8:	e01c      	b.n	8003034 <UART_SetConfig+0x178>
 8002ffa:	231b      	movs	r3, #27
 8002ffc:	18fb      	adds	r3, r7, r3
 8002ffe:	2210      	movs	r2, #16
 8003000:	701a      	strb	r2, [r3, #0]
 8003002:	e017      	b.n	8003034 <UART_SetConfig+0x178>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a7a      	ldr	r2, [pc, #488]	; (80031f4 <UART_SetConfig+0x338>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d104      	bne.n	8003018 <UART_SetConfig+0x15c>
 800300e:	231b      	movs	r3, #27
 8003010:	18fb      	adds	r3, r7, r3
 8003012:	2200      	movs	r2, #0
 8003014:	701a      	strb	r2, [r3, #0]
 8003016:	e00d      	b.n	8003034 <UART_SetConfig+0x178>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a76      	ldr	r2, [pc, #472]	; (80031f8 <UART_SetConfig+0x33c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d104      	bne.n	800302c <UART_SetConfig+0x170>
 8003022:	231b      	movs	r3, #27
 8003024:	18fb      	adds	r3, r7, r3
 8003026:	2200      	movs	r2, #0
 8003028:	701a      	strb	r2, [r3, #0]
 800302a:	e003      	b.n	8003034 <UART_SetConfig+0x178>
 800302c:	231b      	movs	r3, #27
 800302e:	18fb      	adds	r3, r7, r3
 8003030:	2210      	movs	r2, #16
 8003032:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	2380      	movs	r3, #128	; 0x80
 800303a:	021b      	lsls	r3, r3, #8
 800303c:	429a      	cmp	r2, r3
 800303e:	d000      	beq.n	8003042 <UART_SetConfig+0x186>
 8003040:	e065      	b.n	800310e <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8003042:	231b      	movs	r3, #27
 8003044:	18fb      	adds	r3, r7, r3
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b08      	cmp	r3, #8
 800304a:	d015      	beq.n	8003078 <UART_SetConfig+0x1bc>
 800304c:	dc18      	bgt.n	8003080 <UART_SetConfig+0x1c4>
 800304e:	2b04      	cmp	r3, #4
 8003050:	d00d      	beq.n	800306e <UART_SetConfig+0x1b2>
 8003052:	dc15      	bgt.n	8003080 <UART_SetConfig+0x1c4>
 8003054:	2b00      	cmp	r3, #0
 8003056:	d002      	beq.n	800305e <UART_SetConfig+0x1a2>
 8003058:	2b02      	cmp	r3, #2
 800305a:	d005      	beq.n	8003068 <UART_SetConfig+0x1ac>
 800305c:	e010      	b.n	8003080 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800305e:	f7fe fe3b 	bl	8001cd8 <HAL_RCC_GetPCLK1Freq>
 8003062:	0003      	movs	r3, r0
 8003064:	617b      	str	r3, [r7, #20]
        break;
 8003066:	e012      	b.n	800308e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003068:	4b64      	ldr	r3, [pc, #400]	; (80031fc <UART_SetConfig+0x340>)
 800306a:	617b      	str	r3, [r7, #20]
        break;
 800306c:	e00f      	b.n	800308e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800306e:	f7fe fda7 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 8003072:	0003      	movs	r3, r0
 8003074:	617b      	str	r3, [r7, #20]
        break;
 8003076:	e00a      	b.n	800308e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003078:	2380      	movs	r3, #128	; 0x80
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	617b      	str	r3, [r7, #20]
        break;
 800307e:	e006      	b.n	800308e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003084:	231a      	movs	r3, #26
 8003086:	18fb      	adds	r3, r7, r3
 8003088:	2201      	movs	r2, #1
 800308a:	701a      	strb	r2, [r3, #0]
        break;
 800308c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d100      	bne.n	8003096 <UART_SetConfig+0x1da>
 8003094:	e08d      	b.n	80031b2 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800309a:	4b59      	ldr	r3, [pc, #356]	; (8003200 <UART_SetConfig+0x344>)
 800309c:	0052      	lsls	r2, r2, #1
 800309e:	5ad3      	ldrh	r3, [r2, r3]
 80030a0:	0019      	movs	r1, r3
 80030a2:	6978      	ldr	r0, [r7, #20]
 80030a4:	f7fd f83e 	bl	8000124 <__udivsi3>
 80030a8:	0003      	movs	r3, r0
 80030aa:	005a      	lsls	r2, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	085b      	lsrs	r3, r3, #1
 80030b2:	18d2      	adds	r2, r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	0019      	movs	r1, r3
 80030ba:	0010      	movs	r0, r2
 80030bc:	f7fd f832 	bl	8000124 <__udivsi3>
 80030c0:	0003      	movs	r3, r0
 80030c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	2b0f      	cmp	r3, #15
 80030c8:	d91c      	bls.n	8003104 <UART_SetConfig+0x248>
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	2380      	movs	r3, #128	; 0x80
 80030ce:	025b      	lsls	r3, r3, #9
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d217      	bcs.n	8003104 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	200e      	movs	r0, #14
 80030da:	183b      	adds	r3, r7, r0
 80030dc:	210f      	movs	r1, #15
 80030de:	438a      	bics	r2, r1
 80030e0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	085b      	lsrs	r3, r3, #1
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	2207      	movs	r2, #7
 80030ea:	4013      	ands	r3, r2
 80030ec:	b299      	uxth	r1, r3
 80030ee:	183b      	adds	r3, r7, r0
 80030f0:	183a      	adds	r2, r7, r0
 80030f2:	8812      	ldrh	r2, [r2, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	183a      	adds	r2, r7, r0
 80030fe:	8812      	ldrh	r2, [r2, #0]
 8003100:	60da      	str	r2, [r3, #12]
 8003102:	e056      	b.n	80031b2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003104:	231a      	movs	r3, #26
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	2201      	movs	r2, #1
 800310a:	701a      	strb	r2, [r3, #0]
 800310c:	e051      	b.n	80031b2 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800310e:	231b      	movs	r3, #27
 8003110:	18fb      	adds	r3, r7, r3
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b08      	cmp	r3, #8
 8003116:	d015      	beq.n	8003144 <UART_SetConfig+0x288>
 8003118:	dc18      	bgt.n	800314c <UART_SetConfig+0x290>
 800311a:	2b04      	cmp	r3, #4
 800311c:	d00d      	beq.n	800313a <UART_SetConfig+0x27e>
 800311e:	dc15      	bgt.n	800314c <UART_SetConfig+0x290>
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <UART_SetConfig+0x26e>
 8003124:	2b02      	cmp	r3, #2
 8003126:	d005      	beq.n	8003134 <UART_SetConfig+0x278>
 8003128:	e010      	b.n	800314c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800312a:	f7fe fdd5 	bl	8001cd8 <HAL_RCC_GetPCLK1Freq>
 800312e:	0003      	movs	r3, r0
 8003130:	617b      	str	r3, [r7, #20]
        break;
 8003132:	e012      	b.n	800315a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003134:	4b31      	ldr	r3, [pc, #196]	; (80031fc <UART_SetConfig+0x340>)
 8003136:	617b      	str	r3, [r7, #20]
        break;
 8003138:	e00f      	b.n	800315a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800313a:	f7fe fd41 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 800313e:	0003      	movs	r3, r0
 8003140:	617b      	str	r3, [r7, #20]
        break;
 8003142:	e00a      	b.n	800315a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003144:	2380      	movs	r3, #128	; 0x80
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	617b      	str	r3, [r7, #20]
        break;
 800314a:	e006      	b.n	800315a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003150:	231a      	movs	r3, #26
 8003152:	18fb      	adds	r3, r7, r3
 8003154:	2201      	movs	r2, #1
 8003156:	701a      	strb	r2, [r3, #0]
        break;
 8003158:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d028      	beq.n	80031b2 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003164:	4b26      	ldr	r3, [pc, #152]	; (8003200 <UART_SetConfig+0x344>)
 8003166:	0052      	lsls	r2, r2, #1
 8003168:	5ad3      	ldrh	r3, [r2, r3]
 800316a:	0019      	movs	r1, r3
 800316c:	6978      	ldr	r0, [r7, #20]
 800316e:	f7fc ffd9 	bl	8000124 <__udivsi3>
 8003172:	0003      	movs	r3, r0
 8003174:	001a      	movs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	085b      	lsrs	r3, r3, #1
 800317c:	18d2      	adds	r2, r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	0019      	movs	r1, r3
 8003184:	0010      	movs	r0, r2
 8003186:	f7fc ffcd 	bl	8000124 <__udivsi3>
 800318a:	0003      	movs	r3, r0
 800318c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	2b0f      	cmp	r3, #15
 8003192:	d90a      	bls.n	80031aa <UART_SetConfig+0x2ee>
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	2380      	movs	r3, #128	; 0x80
 8003198:	025b      	lsls	r3, r3, #9
 800319a:	429a      	cmp	r2, r3
 800319c:	d205      	bcs.n	80031aa <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	60da      	str	r2, [r3, #12]
 80031a8:	e003      	b.n	80031b2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80031aa:	231a      	movs	r3, #26
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	2201      	movs	r2, #1
 80031b0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	226a      	movs	r2, #106	; 0x6a
 80031b6:	2101      	movs	r1, #1
 80031b8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2268      	movs	r2, #104	; 0x68
 80031be:	2101      	movs	r1, #1
 80031c0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80031ce:	231a      	movs	r3, #26
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	781b      	ldrb	r3, [r3, #0]
}
 80031d4:	0018      	movs	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b008      	add	sp, #32
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	cfff69f3 	.word	0xcfff69f3
 80031e0:	ffffcfff 	.word	0xffffcfff
 80031e4:	11fff4ff 	.word	0x11fff4ff
 80031e8:	40013800 	.word	0x40013800
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40004400 	.word	0x40004400
 80031f4:	40004800 	.word	0x40004800
 80031f8:	40004c00 	.word	0x40004c00
 80031fc:	00f42400 	.word	0x00f42400
 8003200:	080052b0 	.word	0x080052b0

08003204 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003210:	2201      	movs	r2, #1
 8003212:	4013      	ands	r3, r2
 8003214:	d00b      	beq.n	800322e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	4a4a      	ldr	r2, [pc, #296]	; (8003348 <UART_AdvFeatureConfig+0x144>)
 800321e:	4013      	ands	r3, r2
 8003220:	0019      	movs	r1, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	2202      	movs	r2, #2
 8003234:	4013      	ands	r3, r2
 8003236:	d00b      	beq.n	8003250 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	4a43      	ldr	r2, [pc, #268]	; (800334c <UART_AdvFeatureConfig+0x148>)
 8003240:	4013      	ands	r3, r2
 8003242:	0019      	movs	r1, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	2204      	movs	r2, #4
 8003256:	4013      	ands	r3, r2
 8003258:	d00b      	beq.n	8003272 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	4a3b      	ldr	r2, [pc, #236]	; (8003350 <UART_AdvFeatureConfig+0x14c>)
 8003262:	4013      	ands	r3, r2
 8003264:	0019      	movs	r1, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003276:	2208      	movs	r2, #8
 8003278:	4013      	ands	r3, r2
 800327a:	d00b      	beq.n	8003294 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	4a34      	ldr	r2, [pc, #208]	; (8003354 <UART_AdvFeatureConfig+0x150>)
 8003284:	4013      	ands	r3, r2
 8003286:	0019      	movs	r1, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	2210      	movs	r2, #16
 800329a:	4013      	ands	r3, r2
 800329c:	d00b      	beq.n	80032b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	4a2c      	ldr	r2, [pc, #176]	; (8003358 <UART_AdvFeatureConfig+0x154>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	0019      	movs	r1, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	2220      	movs	r2, #32
 80032bc:	4013      	ands	r3, r2
 80032be:	d00b      	beq.n	80032d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	4a25      	ldr	r2, [pc, #148]	; (800335c <UART_AdvFeatureConfig+0x158>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	0019      	movs	r1, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032dc:	2240      	movs	r2, #64	; 0x40
 80032de:	4013      	ands	r3, r2
 80032e0:	d01d      	beq.n	800331e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	4a1d      	ldr	r2, [pc, #116]	; (8003360 <UART_AdvFeatureConfig+0x15c>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	0019      	movs	r1, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032fe:	2380      	movs	r3, #128	; 0x80
 8003300:	035b      	lsls	r3, r3, #13
 8003302:	429a      	cmp	r2, r3
 8003304:	d10b      	bne.n	800331e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	4a15      	ldr	r2, [pc, #84]	; (8003364 <UART_AdvFeatureConfig+0x160>)
 800330e:	4013      	ands	r3, r2
 8003310:	0019      	movs	r1, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003322:	2280      	movs	r2, #128	; 0x80
 8003324:	4013      	ands	r3, r2
 8003326:	d00b      	beq.n	8003340 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	4a0e      	ldr	r2, [pc, #56]	; (8003368 <UART_AdvFeatureConfig+0x164>)
 8003330:	4013      	ands	r3, r2
 8003332:	0019      	movs	r1, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	605a      	str	r2, [r3, #4]
  }
}
 8003340:	46c0      	nop			; (mov r8, r8)
 8003342:	46bd      	mov	sp, r7
 8003344:	b002      	add	sp, #8
 8003346:	bd80      	pop	{r7, pc}
 8003348:	fffdffff 	.word	0xfffdffff
 800334c:	fffeffff 	.word	0xfffeffff
 8003350:	fffbffff 	.word	0xfffbffff
 8003354:	ffff7fff 	.word	0xffff7fff
 8003358:	ffffefff 	.word	0xffffefff
 800335c:	ffffdfff 	.word	0xffffdfff
 8003360:	ffefffff 	.word	0xffefffff
 8003364:	ff9fffff 	.word	0xff9fffff
 8003368:	fff7ffff 	.word	0xfff7ffff

0800336c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af02      	add	r7, sp, #8
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2290      	movs	r2, #144	; 0x90
 8003378:	2100      	movs	r1, #0
 800337a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800337c:	f7fd fc6c 	bl	8000c58 <HAL_GetTick>
 8003380:	0003      	movs	r3, r0
 8003382:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2208      	movs	r2, #8
 800338c:	4013      	ands	r3, r2
 800338e:	2b08      	cmp	r3, #8
 8003390:	d10c      	bne.n	80033ac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2280      	movs	r2, #128	; 0x80
 8003396:	0391      	lsls	r1, r2, #14
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	4a1a      	ldr	r2, [pc, #104]	; (8003404 <UART_CheckIdleState+0x98>)
 800339c:	9200      	str	r2, [sp, #0]
 800339e:	2200      	movs	r2, #0
 80033a0:	f000 f832 	bl	8003408 <UART_WaitOnFlagUntilTimeout>
 80033a4:	1e03      	subs	r3, r0, #0
 80033a6:	d001      	beq.n	80033ac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e026      	b.n	80033fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2204      	movs	r2, #4
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d10c      	bne.n	80033d4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2280      	movs	r2, #128	; 0x80
 80033be:	03d1      	lsls	r1, r2, #15
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	4a10      	ldr	r2, [pc, #64]	; (8003404 <UART_CheckIdleState+0x98>)
 80033c4:	9200      	str	r2, [sp, #0]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f000 f81e 	bl	8003408 <UART_WaitOnFlagUntilTimeout>
 80033cc:	1e03      	subs	r3, r0, #0
 80033ce:	d001      	beq.n	80033d4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e012      	b.n	80033fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2288      	movs	r2, #136	; 0x88
 80033d8:	2120      	movs	r1, #32
 80033da:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	228c      	movs	r2, #140	; 0x8c
 80033e0:	2120      	movs	r1, #32
 80033e2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2284      	movs	r2, #132	; 0x84
 80033f4:	2100      	movs	r1, #0
 80033f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	0018      	movs	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	b004      	add	sp, #16
 8003400:	bd80      	pop	{r7, pc}
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	01ffffff 	.word	0x01ffffff

08003408 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b094      	sub	sp, #80	; 0x50
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	1dfb      	adds	r3, r7, #7
 8003416:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003418:	e0a7      	b.n	800356a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800341a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800341c:	3301      	adds	r3, #1
 800341e:	d100      	bne.n	8003422 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003420:	e0a3      	b.n	800356a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003422:	f7fd fc19 	bl	8000c58 <HAL_GetTick>
 8003426:	0002      	movs	r2, r0
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800342e:	429a      	cmp	r2, r3
 8003430:	d302      	bcc.n	8003438 <UART_WaitOnFlagUntilTimeout+0x30>
 8003432:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003434:	2b00      	cmp	r3, #0
 8003436:	d13f      	bne.n	80034b8 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003438:	f3ef 8310 	mrs	r3, PRIMASK
 800343c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800343e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003440:	647b      	str	r3, [r7, #68]	; 0x44
 8003442:	2301      	movs	r3, #1
 8003444:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003448:	f383 8810 	msr	PRIMASK, r3
}
 800344c:	46c0      	nop			; (mov r8, r8)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	494e      	ldr	r1, [pc, #312]	; (8003594 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800345a:	400a      	ands	r2, r1
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003460:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003464:	f383 8810 	msr	PRIMASK, r3
}
 8003468:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800346a:	f3ef 8310 	mrs	r3, PRIMASK
 800346e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003472:	643b      	str	r3, [r7, #64]	; 0x40
 8003474:	2301      	movs	r3, #1
 8003476:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347a:	f383 8810 	msr	PRIMASK, r3
}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2101      	movs	r1, #1
 800348c:	438a      	bics	r2, r1
 800348e:	609a      	str	r2, [r3, #8]
 8003490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003492:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003496:	f383 8810 	msr	PRIMASK, r3
}
 800349a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2288      	movs	r2, #136	; 0x88
 80034a0:	2120      	movs	r1, #32
 80034a2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	228c      	movs	r2, #140	; 0x8c
 80034a8:	2120      	movs	r1, #32
 80034aa:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2284      	movs	r2, #132	; 0x84
 80034b0:	2100      	movs	r1, #0
 80034b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e069      	b.n	800358c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2204      	movs	r2, #4
 80034c0:	4013      	ands	r3, r2
 80034c2:	d052      	beq.n	800356a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	69da      	ldr	r2, [r3, #28]
 80034ca:	2380      	movs	r3, #128	; 0x80
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	401a      	ands	r2, r3
 80034d0:	2380      	movs	r3, #128	; 0x80
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d148      	bne.n	800356a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2280      	movs	r2, #128	; 0x80
 80034de:	0112      	lsls	r2, r2, #4
 80034e0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e2:	f3ef 8310 	mrs	r3, PRIMASK
 80034e6:	613b      	str	r3, [r7, #16]
  return(result);
 80034e8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80034ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034ec:	2301      	movs	r3, #1
 80034ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f383 8810 	msr	PRIMASK, r3
}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4924      	ldr	r1, [pc, #144]	; (8003594 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003504:	400a      	ands	r2, r1
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800350a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	f383 8810 	msr	PRIMASK, r3
}
 8003512:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003514:	f3ef 8310 	mrs	r3, PRIMASK
 8003518:	61fb      	str	r3, [r7, #28]
  return(result);
 800351a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800351c:	64bb      	str	r3, [r7, #72]	; 0x48
 800351e:	2301      	movs	r3, #1
 8003520:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	f383 8810 	msr	PRIMASK, r3
}
 8003528:	46c0      	nop			; (mov r8, r8)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2101      	movs	r1, #1
 8003536:	438a      	bics	r2, r1
 8003538:	609a      	str	r2, [r3, #8]
 800353a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	f383 8810 	msr	PRIMASK, r3
}
 8003544:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2288      	movs	r2, #136	; 0x88
 800354a:	2120      	movs	r1, #32
 800354c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	228c      	movs	r2, #140	; 0x8c
 8003552:	2120      	movs	r1, #32
 8003554:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2290      	movs	r2, #144	; 0x90
 800355a:	2120      	movs	r1, #32
 800355c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2284      	movs	r2, #132	; 0x84
 8003562:	2100      	movs	r1, #0
 8003564:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e010      	b.n	800358c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	4013      	ands	r3, r2
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	425a      	negs	r2, r3
 800357a:	4153      	adcs	r3, r2
 800357c:	b2db      	uxtb	r3, r3
 800357e:	001a      	movs	r2, r3
 8003580:	1dfb      	adds	r3, r7, #7
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	429a      	cmp	r2, r3
 8003586:	d100      	bne.n	800358a <UART_WaitOnFlagUntilTimeout+0x182>
 8003588:	e747      	b.n	800341a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	0018      	movs	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	b014      	add	sp, #80	; 0x50
 8003592:	bd80      	pop	{r7, pc}
 8003594:	fffffe5f 	.word	0xfffffe5f

08003598 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b098      	sub	sp, #96	; 0x60
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	1dbb      	adds	r3, r7, #6
 80035a4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	1dba      	adds	r2, r7, #6
 80035b0:	215c      	movs	r1, #92	; 0x5c
 80035b2:	8812      	ldrh	r2, [r2, #0]
 80035b4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	1dba      	adds	r2, r7, #6
 80035ba:	215e      	movs	r1, #94	; 0x5e
 80035bc:	8812      	ldrh	r2, [r2, #0]
 80035be:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	2380      	movs	r3, #128	; 0x80
 80035cc:	015b      	lsls	r3, r3, #5
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d10d      	bne.n	80035ee <UART_Start_Receive_IT+0x56>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d104      	bne.n	80035e4 <UART_Start_Receive_IT+0x4c>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2260      	movs	r2, #96	; 0x60
 80035de:	497b      	ldr	r1, [pc, #492]	; (80037cc <UART_Start_Receive_IT+0x234>)
 80035e0:	5299      	strh	r1, [r3, r2]
 80035e2:	e02e      	b.n	8003642 <UART_Start_Receive_IT+0xaa>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2260      	movs	r2, #96	; 0x60
 80035e8:	21ff      	movs	r1, #255	; 0xff
 80035ea:	5299      	strh	r1, [r3, r2]
 80035ec:	e029      	b.n	8003642 <UART_Start_Receive_IT+0xaa>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10d      	bne.n	8003612 <UART_Start_Receive_IT+0x7a>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d104      	bne.n	8003608 <UART_Start_Receive_IT+0x70>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2260      	movs	r2, #96	; 0x60
 8003602:	21ff      	movs	r1, #255	; 0xff
 8003604:	5299      	strh	r1, [r3, r2]
 8003606:	e01c      	b.n	8003642 <UART_Start_Receive_IT+0xaa>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2260      	movs	r2, #96	; 0x60
 800360c:	217f      	movs	r1, #127	; 0x7f
 800360e:	5299      	strh	r1, [r3, r2]
 8003610:	e017      	b.n	8003642 <UART_Start_Receive_IT+0xaa>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	2380      	movs	r3, #128	; 0x80
 8003618:	055b      	lsls	r3, r3, #21
 800361a:	429a      	cmp	r2, r3
 800361c:	d10d      	bne.n	800363a <UART_Start_Receive_IT+0xa2>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d104      	bne.n	8003630 <UART_Start_Receive_IT+0x98>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2260      	movs	r2, #96	; 0x60
 800362a:	217f      	movs	r1, #127	; 0x7f
 800362c:	5299      	strh	r1, [r3, r2]
 800362e:	e008      	b.n	8003642 <UART_Start_Receive_IT+0xaa>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2260      	movs	r2, #96	; 0x60
 8003634:	213f      	movs	r1, #63	; 0x3f
 8003636:	5299      	strh	r1, [r3, r2]
 8003638:	e003      	b.n	8003642 <UART_Start_Receive_IT+0xaa>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2260      	movs	r2, #96	; 0x60
 800363e:	2100      	movs	r1, #0
 8003640:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2290      	movs	r2, #144	; 0x90
 8003646:	2100      	movs	r1, #0
 8003648:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	228c      	movs	r2, #140	; 0x8c
 800364e:	2122      	movs	r1, #34	; 0x22
 8003650:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003652:	f3ef 8310 	mrs	r3, PRIMASK
 8003656:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8003658:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800365c:	2301      	movs	r3, #1
 800365e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003662:	f383 8810 	msr	PRIMASK, r3
}
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2101      	movs	r1, #1
 8003674:	430a      	orrs	r2, r1
 8003676:	609a      	str	r2, [r3, #8]
 8003678:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800367a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800367e:	f383 8810 	msr	PRIMASK, r3
}
 8003682:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003688:	2380      	movs	r3, #128	; 0x80
 800368a:	059b      	lsls	r3, r3, #22
 800368c:	429a      	cmp	r2, r3
 800368e:	d150      	bne.n	8003732 <UART_Start_Receive_IT+0x19a>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2268      	movs	r2, #104	; 0x68
 8003694:	5a9b      	ldrh	r3, [r3, r2]
 8003696:	1dba      	adds	r2, r7, #6
 8003698:	8812      	ldrh	r2, [r2, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d349      	bcc.n	8003732 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	2380      	movs	r3, #128	; 0x80
 80036a4:	015b      	lsls	r3, r3, #5
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d107      	bne.n	80036ba <UART_Start_Receive_IT+0x122>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d103      	bne.n	80036ba <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4a46      	ldr	r2, [pc, #280]	; (80037d0 <UART_Start_Receive_IT+0x238>)
 80036b6:	675a      	str	r2, [r3, #116]	; 0x74
 80036b8:	e002      	b.n	80036c0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4a45      	ldr	r2, [pc, #276]	; (80037d4 <UART_Start_Receive_IT+0x23c>)
 80036be:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d019      	beq.n	80036fc <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036c8:	f3ef 8310 	mrs	r3, PRIMASK
 80036cc:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80036ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80036d2:	2301      	movs	r3, #1
 80036d4:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d8:	f383 8810 	msr	PRIMASK, r3
}
 80036dc:	46c0      	nop			; (mov r8, r8)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2180      	movs	r1, #128	; 0x80
 80036ea:	0049      	lsls	r1, r1, #1
 80036ec:	430a      	orrs	r2, r1
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f6:	f383 8810 	msr	PRIMASK, r3
}
 80036fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003700:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003702:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003704:	657b      	str	r3, [r7, #84]	; 0x54
 8003706:	2301      	movs	r3, #1
 8003708:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370c:	f383 8810 	msr	PRIMASK, r3
}
 8003710:	46c0      	nop			; (mov r8, r8)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2180      	movs	r1, #128	; 0x80
 800371e:	0549      	lsls	r1, r1, #21
 8003720:	430a      	orrs	r2, r1
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003726:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372a:	f383 8810 	msr	PRIMASK, r3
}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	e047      	b.n	80037c2 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	2380      	movs	r3, #128	; 0x80
 8003738:	015b      	lsls	r3, r3, #5
 800373a:	429a      	cmp	r2, r3
 800373c:	d107      	bne.n	800374e <UART_Start_Receive_IT+0x1b6>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d103      	bne.n	800374e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4a23      	ldr	r2, [pc, #140]	; (80037d8 <UART_Start_Receive_IT+0x240>)
 800374a:	675a      	str	r2, [r3, #116]	; 0x74
 800374c:	e002      	b.n	8003754 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4a22      	ldr	r2, [pc, #136]	; (80037dc <UART_Start_Receive_IT+0x244>)
 8003752:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d019      	beq.n	8003790 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800375c:	f3ef 8310 	mrs	r3, PRIMASK
 8003760:	61fb      	str	r3, [r7, #28]
  return(result);
 8003762:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003764:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003766:	2301      	movs	r3, #1
 8003768:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	f383 8810 	msr	PRIMASK, r3
}
 8003770:	46c0      	nop			; (mov r8, r8)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2190      	movs	r1, #144	; 0x90
 800377e:	0049      	lsls	r1, r1, #1
 8003780:	430a      	orrs	r2, r1
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	f383 8810 	msr	PRIMASK, r3
}
 800378e:	e018      	b.n	80037c2 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003790:	f3ef 8310 	mrs	r3, PRIMASK
 8003794:	613b      	str	r3, [r7, #16]
  return(result);
 8003796:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003798:	653b      	str	r3, [r7, #80]	; 0x50
 800379a:	2301      	movs	r3, #1
 800379c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f383 8810 	msr	PRIMASK, r3
}
 80037a4:	46c0      	nop			; (mov r8, r8)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2120      	movs	r1, #32
 80037b2:	430a      	orrs	r2, r1
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	f383 8810 	msr	PRIMASK, r3
}
 80037c0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	0018      	movs	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b018      	add	sp, #96	; 0x60
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	000001ff 	.word	0x000001ff
 80037d0:	08004259 	.word	0x08004259
 80037d4:	08003f6d 	.word	0x08003f6d
 80037d8:	08003df9 	.word	0x08003df9
 80037dc:	08003c85 	.word	0x08003c85

080037e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08e      	sub	sp, #56	; 0x38
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e8:	f3ef 8310 	mrs	r3, PRIMASK
 80037ec:	617b      	str	r3, [r7, #20]
  return(result);
 80037ee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80037f0:	637b      	str	r3, [r7, #52]	; 0x34
 80037f2:	2301      	movs	r3, #1
 80037f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	f383 8810 	msr	PRIMASK, r3
}
 80037fc:	46c0      	nop			; (mov r8, r8)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4926      	ldr	r1, [pc, #152]	; (80038a4 <UART_EndRxTransfer+0xc4>)
 800380a:	400a      	ands	r2, r1
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003810:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	f383 8810 	msr	PRIMASK, r3
}
 8003818:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800381a:	f3ef 8310 	mrs	r3, PRIMASK
 800381e:	623b      	str	r3, [r7, #32]
  return(result);
 8003820:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003822:	633b      	str	r3, [r7, #48]	; 0x30
 8003824:	2301      	movs	r3, #1
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	f383 8810 	msr	PRIMASK, r3
}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	491b      	ldr	r1, [pc, #108]	; (80038a8 <UART_EndRxTransfer+0xc8>)
 800383c:	400a      	ands	r2, r1
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003846:	f383 8810 	msr	PRIMASK, r3
}
 800384a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003850:	2b01      	cmp	r3, #1
 8003852:	d118      	bne.n	8003886 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003854:	f3ef 8310 	mrs	r3, PRIMASK
 8003858:	60bb      	str	r3, [r7, #8]
  return(result);
 800385a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800385c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800385e:	2301      	movs	r3, #1
 8003860:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f383 8810 	msr	PRIMASK, r3
}
 8003868:	46c0      	nop			; (mov r8, r8)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2110      	movs	r1, #16
 8003876:	438a      	bics	r2, r1
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f383 8810 	msr	PRIMASK, r3
}
 8003884:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	228c      	movs	r2, #140	; 0x8c
 800388a:	2120      	movs	r1, #32
 800388c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	675a      	str	r2, [r3, #116]	; 0x74
}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	46bd      	mov	sp, r7
 800389e:	b00e      	add	sp, #56	; 0x38
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	fffffedf 	.word	0xfffffedf
 80038a8:	effffffe 	.word	0xeffffffe

080038ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	225e      	movs	r2, #94	; 0x5e
 80038be:	2100      	movs	r1, #0
 80038c0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2256      	movs	r2, #86	; 0x56
 80038c6:	2100      	movs	r1, #0
 80038c8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	0018      	movs	r0, r3
 80038ce:	f7ff facf 	bl	8002e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b004      	add	sp, #16
 80038d8:	bd80      	pop	{r7, pc}

080038da <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b08a      	sub	sp, #40	; 0x28
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2288      	movs	r2, #136	; 0x88
 80038e6:	589b      	ldr	r3, [r3, r2]
 80038e8:	2b21      	cmp	r3, #33	; 0x21
 80038ea:	d14c      	bne.n	8003986 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2256      	movs	r2, #86	; 0x56
 80038f0:	5a9b      	ldrh	r3, [r3, r2]
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d132      	bne.n	800395e <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038f8:	f3ef 8310 	mrs	r3, PRIMASK
 80038fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80038fe:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
 8003902:	2301      	movs	r3, #1
 8003904:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f383 8810 	msr	PRIMASK, r3
}
 800390c:	46c0      	nop			; (mov r8, r8)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2180      	movs	r1, #128	; 0x80
 800391a:	438a      	bics	r2, r1
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	f383 8810 	msr	PRIMASK, r3
}
 8003928:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800392a:	f3ef 8310 	mrs	r3, PRIMASK
 800392e:	617b      	str	r3, [r7, #20]
  return(result);
 8003930:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003932:	623b      	str	r3, [r7, #32]
 8003934:	2301      	movs	r3, #1
 8003936:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	f383 8810 	msr	PRIMASK, r3
}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2140      	movs	r1, #64	; 0x40
 800394c:	430a      	orrs	r2, r1
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f383 8810 	msr	PRIMASK, r3
}
 800395a:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800395c:	e013      	b.n	8003986 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003962:	781a      	ldrb	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2256      	movs	r2, #86	; 0x56
 8003978:	5a9b      	ldrh	r3, [r3, r2]
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b299      	uxth	r1, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2256      	movs	r2, #86	; 0x56
 8003984:	5299      	strh	r1, [r3, r2]
}
 8003986:	46c0      	nop			; (mov r8, r8)
 8003988:	46bd      	mov	sp, r7
 800398a:	b00a      	add	sp, #40	; 0x28
 800398c:	bd80      	pop	{r7, pc}

0800398e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b08c      	sub	sp, #48	; 0x30
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2288      	movs	r2, #136	; 0x88
 800399a:	589b      	ldr	r3, [r3, r2]
 800399c:	2b21      	cmp	r3, #33	; 0x21
 800399e:	d151      	bne.n	8003a44 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2256      	movs	r2, #86	; 0x56
 80039a4:	5a9b      	ldrh	r3, [r3, r2]
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d132      	bne.n	8003a12 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ac:	f3ef 8310 	mrs	r3, PRIMASK
 80039b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80039b2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80039b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80039b6:	2301      	movs	r3, #1
 80039b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f383 8810 	msr	PRIMASK, r3
}
 80039c0:	46c0      	nop			; (mov r8, r8)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2180      	movs	r1, #128	; 0x80
 80039ce:	438a      	bics	r2, r1
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f383 8810 	msr	PRIMASK, r3
}
 80039dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039de:	f3ef 8310 	mrs	r3, PRIMASK
 80039e2:	61bb      	str	r3, [r7, #24]
  return(result);
 80039e4:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24
 80039e8:	2301      	movs	r3, #1
 80039ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f383 8810 	msr	PRIMASK, r3
}
 80039f2:	46c0      	nop			; (mov r8, r8)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2140      	movs	r1, #64	; 0x40
 8003a00:	430a      	orrs	r2, r1
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	f383 8810 	msr	PRIMASK, r3
}
 8003a0e:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003a10:	e018      	b.n	8003a44 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a16:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	001a      	movs	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	05d2      	lsls	r2, r2, #23
 8003a24:	0dd2      	lsrs	r2, r2, #23
 8003a26:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2c:	1c9a      	adds	r2, r3, #2
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2256      	movs	r2, #86	; 0x56
 8003a36:	5a9b      	ldrh	r3, [r3, r2]
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b299      	uxth	r1, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2256      	movs	r2, #86	; 0x56
 8003a42:	5299      	strh	r1, [r3, r2]
}
 8003a44:	46c0      	nop			; (mov r8, r8)
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b00c      	add	sp, #48	; 0x30
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08c      	sub	sp, #48	; 0x30
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2288      	movs	r2, #136	; 0x88
 8003a58:	589b      	ldr	r3, [r3, r2]
 8003a5a:	2b21      	cmp	r3, #33	; 0x21
 8003a5c:	d165      	bne.n	8003b2a <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003a5e:	232e      	movs	r3, #46	; 0x2e
 8003a60:	18fb      	adds	r3, r7, r3
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	216a      	movs	r1, #106	; 0x6a
 8003a66:	5a52      	ldrh	r2, [r2, r1]
 8003a68:	801a      	strh	r2, [r3, #0]
 8003a6a:	e059      	b.n	8003b20 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2256      	movs	r2, #86	; 0x56
 8003a70:	5a9b      	ldrh	r3, [r3, r2]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d133      	bne.n	8003ae0 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a78:	f3ef 8310 	mrs	r3, PRIMASK
 8003a7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a82:	2301      	movs	r3, #1
 8003a84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f383 8810 	msr	PRIMASK, r3
}
 8003a8c:	46c0      	nop			; (mov r8, r8)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4926      	ldr	r1, [pc, #152]	; (8003b34 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 8003a9a:	400a      	ands	r2, r1
 8003a9c:	609a      	str	r2, [r3, #8]
 8003a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f383 8810 	msr	PRIMASK, r3
}
 8003aa8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aaa:	f3ef 8310 	mrs	r3, PRIMASK
 8003aae:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ab0:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f383 8810 	msr	PRIMASK, r3
}
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2140      	movs	r1, #64	; 0x40
 8003acc:	430a      	orrs	r2, r1
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	f383 8810 	msr	PRIMASK, r3
}
 8003ada:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8003adc:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003ade:	e024      	b.n	8003b2a <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	2280      	movs	r2, #128	; 0x80
 8003ae8:	4013      	ands	r3, r2
 8003aea:	d013      	beq.n	8003b14 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af0:	781a      	ldrb	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2256      	movs	r2, #86	; 0x56
 8003b06:	5a9b      	ldrh	r3, [r3, r2]
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b299      	uxth	r1, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2256      	movs	r2, #86	; 0x56
 8003b12:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003b14:	212e      	movs	r1, #46	; 0x2e
 8003b16:	187b      	adds	r3, r7, r1
 8003b18:	881a      	ldrh	r2, [r3, #0]
 8003b1a:	187b      	adds	r3, r7, r1
 8003b1c:	3a01      	subs	r2, #1
 8003b1e:	801a      	strh	r2, [r3, #0]
 8003b20:	232e      	movs	r3, #46	; 0x2e
 8003b22:	18fb      	adds	r3, r7, r3
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1a0      	bne.n	8003a6c <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	b00c      	add	sp, #48	; 0x30
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	ff7fffff 	.word	0xff7fffff

08003b38 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08c      	sub	sp, #48	; 0x30
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2288      	movs	r2, #136	; 0x88
 8003b44:	589b      	ldr	r3, [r3, r2]
 8003b46:	2b21      	cmp	r3, #33	; 0x21
 8003b48:	d16a      	bne.n	8003c20 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003b4a:	232e      	movs	r3, #46	; 0x2e
 8003b4c:	18fb      	adds	r3, r7, r3
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	216a      	movs	r1, #106	; 0x6a
 8003b52:	5a52      	ldrh	r2, [r2, r1]
 8003b54:	801a      	strh	r2, [r3, #0]
 8003b56:	e05e      	b.n	8003c16 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2256      	movs	r2, #86	; 0x56
 8003b5c:	5a9b      	ldrh	r3, [r3, r2]
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d133      	bne.n	8003bcc <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b64:	f3ef 8310 	mrs	r3, PRIMASK
 8003b68:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b6a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6e:	2301      	movs	r3, #1
 8003b70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f383 8810 	msr	PRIMASK, r3
}
 8003b78:	46c0      	nop			; (mov r8, r8)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4928      	ldr	r1, [pc, #160]	; (8003c28 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8003b86:	400a      	ands	r2, r1
 8003b88:	609a      	str	r2, [r3, #8]
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	f383 8810 	msr	PRIMASK, r3
}
 8003b94:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b96:	f3ef 8310 	mrs	r3, PRIMASK
 8003b9a:	617b      	str	r3, [r7, #20]
  return(result);
 8003b9c:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b9e:	623b      	str	r3, [r7, #32]
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	f383 8810 	msr	PRIMASK, r3
}
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2140      	movs	r1, #64	; 0x40
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f383 8810 	msr	PRIMASK, r3
}
 8003bc6:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8003bc8:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003bca:	e029      	b.n	8003c20 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	2280      	movs	r2, #128	; 0x80
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d018      	beq.n	8003c0a <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bdc:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	001a      	movs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	05d2      	lsls	r2, r2, #23
 8003bea:	0dd2      	lsrs	r2, r2, #23
 8003bec:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf2:	1c9a      	adds	r2, r3, #2
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2256      	movs	r2, #86	; 0x56
 8003bfc:	5a9b      	ldrh	r3, [r3, r2]
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b299      	uxth	r1, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2256      	movs	r2, #86	; 0x56
 8003c08:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003c0a:	212e      	movs	r1, #46	; 0x2e
 8003c0c:	187b      	adds	r3, r7, r1
 8003c0e:	881a      	ldrh	r2, [r3, #0]
 8003c10:	187b      	adds	r3, r7, r1
 8003c12:	3a01      	subs	r2, #1
 8003c14:	801a      	strh	r2, [r3, #0]
 8003c16:	232e      	movs	r3, #46	; 0x2e
 8003c18:	18fb      	adds	r3, r7, r3
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d19b      	bne.n	8003b58 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8003c20:	46c0      	nop			; (mov r8, r8)
 8003c22:	46bd      	mov	sp, r7
 8003c24:	b00c      	add	sp, #48	; 0x30
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	ff7fffff 	.word	0xff7fffff

08003c2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c34:	f3ef 8310 	mrs	r3, PRIMASK
 8003c38:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c3a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	2301      	movs	r3, #1
 8003c40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f383 8810 	msr	PRIMASK, r3
}
 8003c48:	46c0      	nop			; (mov r8, r8)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2140      	movs	r1, #64	; 0x40
 8003c56:	438a      	bics	r2, r1
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	f383 8810 	msr	PRIMASK, r3
}
 8003c64:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2288      	movs	r2, #136	; 0x88
 8003c6a:	2120      	movs	r1, #32
 8003c6c:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	0018      	movs	r0, r3
 8003c78:	f7ff f8f2 	bl	8002e60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c7c:	46c0      	nop			; (mov r8, r8)
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b006      	add	sp, #24
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b090      	sub	sp, #64	; 0x40
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003c8c:	203e      	movs	r0, #62	; 0x3e
 8003c8e:	183b      	adds	r3, r7, r0
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	2160      	movs	r1, #96	; 0x60
 8003c94:	5a52      	ldrh	r2, [r2, r1]
 8003c96:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	228c      	movs	r2, #140	; 0x8c
 8003c9c:	589b      	ldr	r3, [r3, r2]
 8003c9e:	2b22      	cmp	r3, #34	; 0x22
 8003ca0:	d000      	beq.n	8003ca4 <UART_RxISR_8BIT+0x20>
 8003ca2:	e09a      	b.n	8003dda <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003caa:	213c      	movs	r1, #60	; 0x3c
 8003cac:	187b      	adds	r3, r7, r1
 8003cae:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003cb0:	187b      	adds	r3, r7, r1
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	183b      	adds	r3, r7, r0
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	b2d9      	uxtb	r1, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc0:	400a      	ands	r2, r1
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	225e      	movs	r2, #94	; 0x5e
 8003cd4:	5a9b      	ldrh	r3, [r3, r2]
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b299      	uxth	r1, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	225e      	movs	r2, #94	; 0x5e
 8003ce0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	225e      	movs	r2, #94	; 0x5e
 8003ce6:	5a9b      	ldrh	r3, [r3, r2]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d000      	beq.n	8003cf0 <UART_RxISR_8BIT+0x6c>
 8003cee:	e07c      	b.n	8003dea <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8003cf4:	61bb      	str	r3, [r7, #24]
  return(result);
 8003cf6:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003cf8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	f383 8810 	msr	PRIMASK, r3
}
 8003d04:	46c0      	nop			; (mov r8, r8)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4938      	ldr	r1, [pc, #224]	; (8003df4 <UART_RxISR_8BIT+0x170>)
 8003d12:	400a      	ands	r2, r1
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d18:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	f383 8810 	msr	PRIMASK, r3
}
 8003d20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d22:	f3ef 8310 	mrs	r3, PRIMASK
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d32:	f383 8810 	msr	PRIMASK, r3
}
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2101      	movs	r1, #1
 8003d44:	438a      	bics	r2, r1
 8003d46:	609a      	str	r2, [r3, #8]
 8003d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4e:	f383 8810 	msr	PRIMASK, r3
}
 8003d52:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	228c      	movs	r2, #140	; 0x8c
 8003d58:	2120      	movs	r1, #32
 8003d5a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d12f      	bne.n	8003dd0 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d76:	f3ef 8310 	mrs	r3, PRIMASK
 8003d7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d7c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d7e:	633b      	str	r3, [r7, #48]	; 0x30
 8003d80:	2301      	movs	r3, #1
 8003d82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f383 8810 	msr	PRIMASK, r3
}
 8003d8a:	46c0      	nop			; (mov r8, r8)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2110      	movs	r1, #16
 8003d98:	438a      	bics	r2, r1
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f383 8810 	msr	PRIMASK, r3
}
 8003da6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	2210      	movs	r2, #16
 8003db0:	4013      	ands	r3, r2
 8003db2:	2b10      	cmp	r3, #16
 8003db4:	d103      	bne.n	8003dbe <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2210      	movs	r2, #16
 8003dbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	225c      	movs	r2, #92	; 0x5c
 8003dc2:	5a9a      	ldrh	r2, [r3, r2]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	0011      	movs	r1, r2
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f7ff f859 	bl	8002e80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003dce:	e00c      	b.n	8003dea <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f7fc fb2a 	bl	800042c <HAL_UART_RxCpltCallback>
}
 8003dd8:	e007      	b.n	8003dea <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	699a      	ldr	r2, [r3, #24]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2108      	movs	r1, #8
 8003de6:	430a      	orrs	r2, r1
 8003de8:	619a      	str	r2, [r3, #24]
}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	46bd      	mov	sp, r7
 8003dee:	b010      	add	sp, #64	; 0x40
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	fffffedf 	.word	0xfffffedf

08003df8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b090      	sub	sp, #64	; 0x40
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003e00:	203e      	movs	r0, #62	; 0x3e
 8003e02:	183b      	adds	r3, r7, r0
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	2160      	movs	r1, #96	; 0x60
 8003e08:	5a52      	ldrh	r2, [r2, r1]
 8003e0a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	228c      	movs	r2, #140	; 0x8c
 8003e10:	589b      	ldr	r3, [r3, r2]
 8003e12:	2b22      	cmp	r3, #34	; 0x22
 8003e14:	d000      	beq.n	8003e18 <UART_RxISR_16BIT+0x20>
 8003e16:	e09a      	b.n	8003f4e <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e1e:	213c      	movs	r1, #60	; 0x3c
 8003e20:	187b      	adds	r3, r7, r1
 8003e22:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e28:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003e2a:	187b      	adds	r3, r7, r1
 8003e2c:	183a      	adds	r2, r7, r0
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	8812      	ldrh	r2, [r2, #0]
 8003e32:	4013      	ands	r3, r2
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e38:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3e:	1c9a      	adds	r2, r3, #2
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	225e      	movs	r2, #94	; 0x5e
 8003e48:	5a9b      	ldrh	r3, [r3, r2]
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b299      	uxth	r1, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	225e      	movs	r2, #94	; 0x5e
 8003e54:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	225e      	movs	r2, #94	; 0x5e
 8003e5a:	5a9b      	ldrh	r3, [r3, r2]
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d000      	beq.n	8003e64 <UART_RxISR_16BIT+0x6c>
 8003e62:	e07c      	b.n	8003f5e <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e64:	f3ef 8310 	mrs	r3, PRIMASK
 8003e68:	617b      	str	r3, [r7, #20]
  return(result);
 8003e6a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e6e:	2301      	movs	r3, #1
 8003e70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	f383 8810 	msr	PRIMASK, r3
}
 8003e78:	46c0      	nop			; (mov r8, r8)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4938      	ldr	r1, [pc, #224]	; (8003f68 <UART_RxISR_16BIT+0x170>)
 8003e86:	400a      	ands	r2, r1
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	f383 8810 	msr	PRIMASK, r3
}
 8003e94:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e96:	f3ef 8310 	mrs	r3, PRIMASK
 8003e9a:	623b      	str	r3, [r7, #32]
  return(result);
 8003e9c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e9e:	633b      	str	r3, [r7, #48]	; 0x30
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	f383 8810 	msr	PRIMASK, r3
}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	438a      	bics	r2, r1
 8003eba:	609a      	str	r2, [r3, #8]
 8003ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec2:	f383 8810 	msr	PRIMASK, r3
}
 8003ec6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	228c      	movs	r2, #140	; 0x8c
 8003ecc:	2120      	movs	r1, #32
 8003ece:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d12f      	bne.n	8003f44 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eea:	f3ef 8310 	mrs	r3, PRIMASK
 8003eee:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ef0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f383 8810 	msr	PRIMASK, r3
}
 8003efe:	46c0      	nop			; (mov r8, r8)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2110      	movs	r1, #16
 8003f0c:	438a      	bics	r2, r1
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f383 8810 	msr	PRIMASK, r3
}
 8003f1a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	2210      	movs	r2, #16
 8003f24:	4013      	ands	r3, r2
 8003f26:	2b10      	cmp	r3, #16
 8003f28:	d103      	bne.n	8003f32 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2210      	movs	r2, #16
 8003f30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	225c      	movs	r2, #92	; 0x5c
 8003f36:	5a9a      	ldrh	r2, [r3, r2]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	0011      	movs	r1, r2
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f7fe ff9f 	bl	8002e80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f42:	e00c      	b.n	8003f5e <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	0018      	movs	r0, r3
 8003f48:	f7fc fa70 	bl	800042c <HAL_UART_RxCpltCallback>
}
 8003f4c:	e007      	b.n	8003f5e <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	699a      	ldr	r2, [r3, #24]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2108      	movs	r1, #8
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	619a      	str	r2, [r3, #24]
}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	46bd      	mov	sp, r7
 8003f62:	b010      	add	sp, #64	; 0x40
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	46c0      	nop			; (mov r8, r8)
 8003f68:	fffffedf 	.word	0xfffffedf

08003f6c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b09c      	sub	sp, #112	; 0x70
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003f74:	236a      	movs	r3, #106	; 0x6a
 8003f76:	18fb      	adds	r3, r7, r3
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	2160      	movs	r1, #96	; 0x60
 8003f7c:	5a52      	ldrh	r2, [r2, r1]
 8003f7e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	228c      	movs	r2, #140	; 0x8c
 8003f9c:	589b      	ldr	r3, [r3, r2]
 8003f9e:	2b22      	cmp	r3, #34	; 0x22
 8003fa0:	d000      	beq.n	8003fa4 <UART_RxISR_8BIT_FIFOEN+0x38>
 8003fa2:	e144      	b.n	800422e <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003fa4:	235e      	movs	r3, #94	; 0x5e
 8003fa6:	18fb      	adds	r3, r7, r3
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	2168      	movs	r1, #104	; 0x68
 8003fac:	5a52      	ldrh	r2, [r2, r1]
 8003fae:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003fb0:	e0eb      	b.n	800418a <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fb8:	215c      	movs	r1, #92	; 0x5c
 8003fba:	187b      	adds	r3, r7, r1
 8003fbc:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003fbe:	187b      	adds	r3, r7, r1
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	236a      	movs	r3, #106	; 0x6a
 8003fc6:	18fb      	adds	r3, r7, r3
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	b2d9      	uxtb	r1, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd0:	400a      	ands	r2, r1
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	225e      	movs	r2, #94	; 0x5e
 8003fe4:	5a9b      	ldrh	r3, [r3, r2]
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b299      	uxth	r1, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	225e      	movs	r2, #94	; 0x5e
 8003ff0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ffc:	2207      	movs	r2, #7
 8003ffe:	4013      	ands	r3, r2
 8004000:	d049      	beq.n	8004096 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004004:	2201      	movs	r2, #1
 8004006:	4013      	ands	r3, r2
 8004008:	d010      	beq.n	800402c <UART_RxISR_8BIT_FIFOEN+0xc0>
 800400a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800400c:	2380      	movs	r3, #128	; 0x80
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	4013      	ands	r3, r2
 8004012:	d00b      	beq.n	800402c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2201      	movs	r2, #1
 800401a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2290      	movs	r2, #144	; 0x90
 8004020:	589b      	ldr	r3, [r3, r2]
 8004022:	2201      	movs	r2, #1
 8004024:	431a      	orrs	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2190      	movs	r1, #144	; 0x90
 800402a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800402c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402e:	2202      	movs	r2, #2
 8004030:	4013      	ands	r3, r2
 8004032:	d00f      	beq.n	8004054 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004034:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004036:	2201      	movs	r2, #1
 8004038:	4013      	ands	r3, r2
 800403a:	d00b      	beq.n	8004054 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2202      	movs	r2, #2
 8004042:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2290      	movs	r2, #144	; 0x90
 8004048:	589b      	ldr	r3, [r3, r2]
 800404a:	2204      	movs	r2, #4
 800404c:	431a      	orrs	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2190      	movs	r1, #144	; 0x90
 8004052:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004056:	2204      	movs	r2, #4
 8004058:	4013      	ands	r3, r2
 800405a:	d00f      	beq.n	800407c <UART_RxISR_8BIT_FIFOEN+0x110>
 800405c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800405e:	2201      	movs	r2, #1
 8004060:	4013      	ands	r3, r2
 8004062:	d00b      	beq.n	800407c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2204      	movs	r2, #4
 800406a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2290      	movs	r2, #144	; 0x90
 8004070:	589b      	ldr	r3, [r3, r2]
 8004072:	2202      	movs	r2, #2
 8004074:	431a      	orrs	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2190      	movs	r1, #144	; 0x90
 800407a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2290      	movs	r2, #144	; 0x90
 8004080:	589b      	ldr	r3, [r3, r2]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d007      	beq.n	8004096 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	0018      	movs	r0, r3
 800408a:	f7fe fef1 	bl	8002e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2290      	movs	r2, #144	; 0x90
 8004092:	2100      	movs	r1, #0
 8004094:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	225e      	movs	r2, #94	; 0x5e
 800409a:	5a9b      	ldrh	r3, [r3, r2]
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d173      	bne.n	800418a <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040a2:	f3ef 8310 	mrs	r3, PRIMASK
 80040a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80040a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80040ac:	2301      	movs	r3, #1
 80040ae:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b2:	f383 8810 	msr	PRIMASK, r3
}
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4961      	ldr	r1, [pc, #388]	; (8004248 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 80040c4:	400a      	ands	r2, r1
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040ca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ce:	f383 8810 	msr	PRIMASK, r3
}
 80040d2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040d4:	f3ef 8310 	mrs	r3, PRIMASK
 80040d8:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80040da:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040dc:	657b      	str	r3, [r7, #84]	; 0x54
 80040de:	2301      	movs	r3, #1
 80040e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040e4:	f383 8810 	msr	PRIMASK, r3
}
 80040e8:	46c0      	nop			; (mov r8, r8)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4955      	ldr	r1, [pc, #340]	; (800424c <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 80040f6:	400a      	ands	r2, r1
 80040f8:	609a      	str	r2, [r3, #8]
 80040fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040fc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004100:	f383 8810 	msr	PRIMASK, r3
}
 8004104:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	228c      	movs	r2, #140	; 0x8c
 800410a:	2120      	movs	r1, #32
 800410c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800411e:	2b01      	cmp	r3, #1
 8004120:	d12f      	bne.n	8004182 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004128:	f3ef 8310 	mrs	r3, PRIMASK
 800412c:	623b      	str	r3, [r7, #32]
  return(result);
 800412e:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004130:	653b      	str	r3, [r7, #80]	; 0x50
 8004132:	2301      	movs	r3, #1
 8004134:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	f383 8810 	msr	PRIMASK, r3
}
 800413c:	46c0      	nop			; (mov r8, r8)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2110      	movs	r1, #16
 800414a:	438a      	bics	r2, r1
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004150:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004154:	f383 8810 	msr	PRIMASK, r3
}
 8004158:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	2210      	movs	r2, #16
 8004162:	4013      	ands	r3, r2
 8004164:	2b10      	cmp	r3, #16
 8004166:	d103      	bne.n	8004170 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2210      	movs	r2, #16
 800416e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	225c      	movs	r2, #92	; 0x5c
 8004174:	5a9a      	ldrh	r2, [r3, r2]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	0011      	movs	r1, r2
 800417a:	0018      	movs	r0, r3
 800417c:	f7fe fe80 	bl	8002e80 <HAL_UARTEx_RxEventCallback>
 8004180:	e003      	b.n	800418a <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	0018      	movs	r0, r3
 8004186:	f7fc f951 	bl	800042c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800418a:	235e      	movs	r3, #94	; 0x5e
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d004      	beq.n	800419e <UART_RxISR_8BIT_FIFOEN+0x232>
 8004194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004196:	2220      	movs	r2, #32
 8004198:	4013      	ands	r3, r2
 800419a:	d000      	beq.n	800419e <UART_RxISR_8BIT_FIFOEN+0x232>
 800419c:	e709      	b.n	8003fb2 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800419e:	204e      	movs	r0, #78	; 0x4e
 80041a0:	183b      	adds	r3, r7, r0
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	215e      	movs	r1, #94	; 0x5e
 80041a6:	5a52      	ldrh	r2, [r2, r1]
 80041a8:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80041aa:	0001      	movs	r1, r0
 80041ac:	187b      	adds	r3, r7, r1
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d044      	beq.n	800423e <UART_RxISR_8BIT_FIFOEN+0x2d2>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2268      	movs	r2, #104	; 0x68
 80041b8:	5a9b      	ldrh	r3, [r3, r2]
 80041ba:	187a      	adds	r2, r7, r1
 80041bc:	8812      	ldrh	r2, [r2, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d23d      	bcs.n	800423e <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c2:	f3ef 8310 	mrs	r3, PRIMASK
 80041c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80041c8:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80041ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80041cc:	2301      	movs	r3, #1
 80041ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f383 8810 	msr	PRIMASK, r3
}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	491b      	ldr	r1, [pc, #108]	; (8004250 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 80041e4:	400a      	ands	r2, r1
 80041e6:	609a      	str	r2, [r3, #8]
 80041e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f383 8810 	msr	PRIMASK, r3
}
 80041f2:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a17      	ldr	r2, [pc, #92]	; (8004254 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 80041f8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041fa:	f3ef 8310 	mrs	r3, PRIMASK
 80041fe:	617b      	str	r3, [r7, #20]
  return(result);
 8004200:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004202:	647b      	str	r3, [r7, #68]	; 0x44
 8004204:	2301      	movs	r3, #1
 8004206:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	f383 8810 	msr	PRIMASK, r3
}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2120      	movs	r1, #32
 800421c:	430a      	orrs	r2, r1
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004222:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f383 8810 	msr	PRIMASK, r3
}
 800422a:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800422c:	e007      	b.n	800423e <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	699a      	ldr	r2, [r3, #24]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2108      	movs	r1, #8
 800423a:	430a      	orrs	r2, r1
 800423c:	619a      	str	r2, [r3, #24]
}
 800423e:	46c0      	nop			; (mov r8, r8)
 8004240:	46bd      	mov	sp, r7
 8004242:	b01c      	add	sp, #112	; 0x70
 8004244:	bd80      	pop	{r7, pc}
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	fffffeff 	.word	0xfffffeff
 800424c:	effffffe 	.word	0xeffffffe
 8004250:	efffffff 	.word	0xefffffff
 8004254:	08003c85 	.word	0x08003c85

08004258 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b09e      	sub	sp, #120	; 0x78
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004260:	2372      	movs	r3, #114	; 0x72
 8004262:	18fb      	adds	r3, r7, r3
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	2160      	movs	r1, #96	; 0x60
 8004268:	5a52      	ldrh	r2, [r2, r1]
 800426a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	228c      	movs	r2, #140	; 0x8c
 8004288:	589b      	ldr	r3, [r3, r2]
 800428a:	2b22      	cmp	r3, #34	; 0x22
 800428c:	d000      	beq.n	8004290 <UART_RxISR_16BIT_FIFOEN+0x38>
 800428e:	e144      	b.n	800451a <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004290:	2366      	movs	r3, #102	; 0x66
 8004292:	18fb      	adds	r3, r7, r3
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	2168      	movs	r1, #104	; 0x68
 8004298:	5a52      	ldrh	r2, [r2, r1]
 800429a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800429c:	e0eb      	b.n	8004476 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042a4:	2164      	movs	r1, #100	; 0x64
 80042a6:	187b      	adds	r3, r7, r1
 80042a8:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ae:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 80042b0:	187b      	adds	r3, r7, r1
 80042b2:	2272      	movs	r2, #114	; 0x72
 80042b4:	18ba      	adds	r2, r7, r2
 80042b6:	881b      	ldrh	r3, [r3, #0]
 80042b8:	8812      	ldrh	r2, [r2, #0]
 80042ba:	4013      	ands	r3, r2
 80042bc:	b29a      	uxth	r2, r3
 80042be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c6:	1c9a      	adds	r2, r3, #2
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	225e      	movs	r2, #94	; 0x5e
 80042d0:	5a9b      	ldrh	r3, [r3, r2]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b299      	uxth	r1, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	225e      	movs	r2, #94	; 0x5e
 80042dc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80042e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042e8:	2207      	movs	r2, #7
 80042ea:	4013      	ands	r3, r2
 80042ec:	d049      	beq.n	8004382 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80042ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042f0:	2201      	movs	r2, #1
 80042f2:	4013      	ands	r3, r2
 80042f4:	d010      	beq.n	8004318 <UART_RxISR_16BIT_FIFOEN+0xc0>
 80042f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042f8:	2380      	movs	r3, #128	; 0x80
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	4013      	ands	r3, r2
 80042fe:	d00b      	beq.n	8004318 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2201      	movs	r2, #1
 8004306:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2290      	movs	r2, #144	; 0x90
 800430c:	589b      	ldr	r3, [r3, r2]
 800430e:	2201      	movs	r2, #1
 8004310:	431a      	orrs	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2190      	movs	r1, #144	; 0x90
 8004316:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004318:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800431a:	2202      	movs	r2, #2
 800431c:	4013      	ands	r3, r2
 800431e:	d00f      	beq.n	8004340 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8004320:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004322:	2201      	movs	r2, #1
 8004324:	4013      	ands	r3, r2
 8004326:	d00b      	beq.n	8004340 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2202      	movs	r2, #2
 800432e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2290      	movs	r2, #144	; 0x90
 8004334:	589b      	ldr	r3, [r3, r2]
 8004336:	2204      	movs	r2, #4
 8004338:	431a      	orrs	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2190      	movs	r1, #144	; 0x90
 800433e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004340:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004342:	2204      	movs	r2, #4
 8004344:	4013      	ands	r3, r2
 8004346:	d00f      	beq.n	8004368 <UART_RxISR_16BIT_FIFOEN+0x110>
 8004348:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800434a:	2201      	movs	r2, #1
 800434c:	4013      	ands	r3, r2
 800434e:	d00b      	beq.n	8004368 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2204      	movs	r2, #4
 8004356:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2290      	movs	r2, #144	; 0x90
 800435c:	589b      	ldr	r3, [r3, r2]
 800435e:	2202      	movs	r2, #2
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2190      	movs	r1, #144	; 0x90
 8004366:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2290      	movs	r2, #144	; 0x90
 800436c:	589b      	ldr	r3, [r3, r2]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d007      	beq.n	8004382 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	0018      	movs	r0, r3
 8004376:	f7fe fd7b 	bl	8002e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2290      	movs	r2, #144	; 0x90
 800437e:	2100      	movs	r1, #0
 8004380:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	225e      	movs	r2, #94	; 0x5e
 8004386:	5a9b      	ldrh	r3, [r3, r2]
 8004388:	b29b      	uxth	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d173      	bne.n	8004476 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800438e:	f3ef 8310 	mrs	r3, PRIMASK
 8004392:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004396:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004398:	2301      	movs	r3, #1
 800439a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800439c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439e:	f383 8810 	msr	PRIMASK, r3
}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4961      	ldr	r1, [pc, #388]	; (8004534 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 80043b0:	400a      	ands	r2, r1
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043b6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ba:	f383 8810 	msr	PRIMASK, r3
}
 80043be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043c0:	f3ef 8310 	mrs	r3, PRIMASK
 80043c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80043c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80043c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80043ca:	2301      	movs	r3, #1
 80043cc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043d0:	f383 8810 	msr	PRIMASK, r3
}
 80043d4:	46c0      	nop			; (mov r8, r8)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4955      	ldr	r1, [pc, #340]	; (8004538 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80043e2:	400a      	ands	r2, r1
 80043e4:	609a      	str	r2, [r3, #8]
 80043e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043e8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043ec:	f383 8810 	msr	PRIMASK, r3
}
 80043f0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	228c      	movs	r2, #140	; 0x8c
 80043f6:	2120      	movs	r1, #32
 80043f8:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800440a:	2b01      	cmp	r3, #1
 800440c:	d12f      	bne.n	800446e <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004414:	f3ef 8310 	mrs	r3, PRIMASK
 8004418:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800441c:	657b      	str	r3, [r7, #84]	; 0x54
 800441e:	2301      	movs	r3, #1
 8004420:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004424:	f383 8810 	msr	PRIMASK, r3
}
 8004428:	46c0      	nop			; (mov r8, r8)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2110      	movs	r1, #16
 8004436:	438a      	bics	r2, r1
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800443c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800443e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004440:	f383 8810 	msr	PRIMASK, r3
}
 8004444:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	2210      	movs	r2, #16
 800444e:	4013      	ands	r3, r2
 8004450:	2b10      	cmp	r3, #16
 8004452:	d103      	bne.n	800445c <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2210      	movs	r2, #16
 800445a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	225c      	movs	r2, #92	; 0x5c
 8004460:	5a9a      	ldrh	r2, [r3, r2]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	0011      	movs	r1, r2
 8004466:	0018      	movs	r0, r3
 8004468:	f7fe fd0a 	bl	8002e80 <HAL_UARTEx_RxEventCallback>
 800446c:	e003      	b.n	8004476 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	0018      	movs	r0, r3
 8004472:	f7fb ffdb 	bl	800042c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004476:	2366      	movs	r3, #102	; 0x66
 8004478:	18fb      	adds	r3, r7, r3
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d004      	beq.n	800448a <UART_RxISR_16BIT_FIFOEN+0x232>
 8004480:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004482:	2220      	movs	r2, #32
 8004484:	4013      	ands	r3, r2
 8004486:	d000      	beq.n	800448a <UART_RxISR_16BIT_FIFOEN+0x232>
 8004488:	e709      	b.n	800429e <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800448a:	2052      	movs	r0, #82	; 0x52
 800448c:	183b      	adds	r3, r7, r0
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	215e      	movs	r1, #94	; 0x5e
 8004492:	5a52      	ldrh	r2, [r2, r1]
 8004494:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004496:	0001      	movs	r1, r0
 8004498:	187b      	adds	r3, r7, r1
 800449a:	881b      	ldrh	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d044      	beq.n	800452a <UART_RxISR_16BIT_FIFOEN+0x2d2>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2268      	movs	r2, #104	; 0x68
 80044a4:	5a9b      	ldrh	r3, [r3, r2]
 80044a6:	187a      	adds	r2, r7, r1
 80044a8:	8812      	ldrh	r2, [r2, #0]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d23d      	bcs.n	800452a <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ae:	f3ef 8310 	mrs	r3, PRIMASK
 80044b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80044b4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80044b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044b8:	2301      	movs	r3, #1
 80044ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f383 8810 	msr	PRIMASK, r3
}
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	491b      	ldr	r1, [pc, #108]	; (800453c <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 80044d0:	400a      	ands	r2, r1
 80044d2:	609a      	str	r2, [r3, #8]
 80044d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f383 8810 	msr	PRIMASK, r3
}
 80044de:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a17      	ldr	r2, [pc, #92]	; (8004540 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 80044e4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044e6:	f3ef 8310 	mrs	r3, PRIMASK
 80044ea:	61bb      	str	r3, [r7, #24]
  return(result);
 80044ec:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80044ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80044f0:	2301      	movs	r3, #1
 80044f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	f383 8810 	msr	PRIMASK, r3
}
 80044fa:	46c0      	nop			; (mov r8, r8)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2120      	movs	r1, #32
 8004508:	430a      	orrs	r2, r1
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800450e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	f383 8810 	msr	PRIMASK, r3
}
 8004516:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004518:	e007      	b.n	800452a <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	699a      	ldr	r2, [r3, #24]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2108      	movs	r1, #8
 8004526:	430a      	orrs	r2, r1
 8004528:	619a      	str	r2, [r3, #24]
}
 800452a:	46c0      	nop			; (mov r8, r8)
 800452c:	46bd      	mov	sp, r7
 800452e:	b01e      	add	sp, #120	; 0x78
 8004530:	bd80      	pop	{r7, pc}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	fffffeff 	.word	0xfffffeff
 8004538:	effffffe 	.word	0xeffffffe
 800453c:	efffffff 	.word	0xefffffff
 8004540:	08003df9 	.word	0x08003df9

08004544 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800454c:	46c0      	nop			; (mov r8, r8)
 800454e:	46bd      	mov	sp, r7
 8004550:	b002      	add	sp, #8
 8004552:	bd80      	pop	{r7, pc}

08004554 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800455c:	46c0      	nop			; (mov r8, r8)
 800455e:	46bd      	mov	sp, r7
 8004560:	b002      	add	sp, #8
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800456c:	46c0      	nop			; (mov r8, r8)
 800456e:	46bd      	mov	sp, r7
 8004570:	b002      	add	sp, #8
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2284      	movs	r2, #132	; 0x84
 8004580:	5c9b      	ldrb	r3, [r3, r2]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d101      	bne.n	800458a <HAL_UARTEx_DisableFifoMode+0x16>
 8004586:	2302      	movs	r3, #2
 8004588:	e027      	b.n	80045da <HAL_UARTEx_DisableFifoMode+0x66>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2284      	movs	r2, #132	; 0x84
 800458e:	2101      	movs	r1, #1
 8004590:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2288      	movs	r2, #136	; 0x88
 8004596:	2124      	movs	r1, #36	; 0x24
 8004598:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2101      	movs	r1, #1
 80045ae:	438a      	bics	r2, r1
 80045b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	4a0b      	ldr	r2, [pc, #44]	; (80045e4 <HAL_UARTEx_DisableFifoMode+0x70>)
 80045b6:	4013      	ands	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2288      	movs	r2, #136	; 0x88
 80045cc:	2120      	movs	r1, #32
 80045ce:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2284      	movs	r2, #132	; 0x84
 80045d4:	2100      	movs	r1, #0
 80045d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	0018      	movs	r0, r3
 80045dc:	46bd      	mov	sp, r7
 80045de:	b004      	add	sp, #16
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	dfffffff 	.word	0xdfffffff

080045e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2284      	movs	r2, #132	; 0x84
 80045f6:	5c9b      	ldrb	r3, [r3, r2]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e02e      	b.n	800465e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2284      	movs	r2, #132	; 0x84
 8004604:	2101      	movs	r1, #1
 8004606:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2288      	movs	r2, #136	; 0x88
 800460c:	2124      	movs	r1, #36	; 0x24
 800460e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2101      	movs	r1, #1
 8004624:	438a      	bics	r2, r1
 8004626:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	08d9      	lsrs	r1, r3, #3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	0018      	movs	r0, r3
 8004640:	f000 f854 	bl	80046ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2288      	movs	r2, #136	; 0x88
 8004650:	2120      	movs	r1, #32
 8004652:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2284      	movs	r2, #132	; 0x84
 8004658:	2100      	movs	r1, #0
 800465a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	0018      	movs	r0, r3
 8004660:	46bd      	mov	sp, r7
 8004662:	b004      	add	sp, #16
 8004664:	bd80      	pop	{r7, pc}
	...

08004668 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2284      	movs	r2, #132	; 0x84
 8004676:	5c9b      	ldrb	r3, [r3, r2]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800467c:	2302      	movs	r3, #2
 800467e:	e02f      	b.n	80046e0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2284      	movs	r2, #132	; 0x84
 8004684:	2101      	movs	r1, #1
 8004686:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2288      	movs	r2, #136	; 0x88
 800468c:	2124      	movs	r1, #36	; 0x24
 800468e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2101      	movs	r1, #1
 80046a4:	438a      	bics	r2, r1
 80046a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	4a0e      	ldr	r2, [pc, #56]	; (80046e8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	0019      	movs	r1, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	0018      	movs	r0, r3
 80046c2:	f000 f813 	bl	80046ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2288      	movs	r2, #136	; 0x88
 80046d2:	2120      	movs	r1, #32
 80046d4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2284      	movs	r2, #132	; 0x84
 80046da:	2100      	movs	r1, #0
 80046dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	0018      	movs	r0, r3
 80046e2:	46bd      	mov	sp, r7
 80046e4:	b004      	add	sp, #16
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	f1ffffff 	.word	0xf1ffffff

080046ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80046ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d108      	bne.n	800470e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	226a      	movs	r2, #106	; 0x6a
 8004700:	2101      	movs	r1, #1
 8004702:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2268      	movs	r2, #104	; 0x68
 8004708:	2101      	movs	r1, #1
 800470a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800470c:	e043      	b.n	8004796 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800470e:	260f      	movs	r6, #15
 8004710:	19bb      	adds	r3, r7, r6
 8004712:	2208      	movs	r2, #8
 8004714:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004716:	200e      	movs	r0, #14
 8004718:	183b      	adds	r3, r7, r0
 800471a:	2208      	movs	r2, #8
 800471c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	0e5b      	lsrs	r3, r3, #25
 8004726:	b2da      	uxtb	r2, r3
 8004728:	240d      	movs	r4, #13
 800472a:	193b      	adds	r3, r7, r4
 800472c:	2107      	movs	r1, #7
 800472e:	400a      	ands	r2, r1
 8004730:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	0f5b      	lsrs	r3, r3, #29
 800473a:	b2da      	uxtb	r2, r3
 800473c:	250c      	movs	r5, #12
 800473e:	197b      	adds	r3, r7, r5
 8004740:	2107      	movs	r1, #7
 8004742:	400a      	ands	r2, r1
 8004744:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004746:	183b      	adds	r3, r7, r0
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	197a      	adds	r2, r7, r5
 800474c:	7812      	ldrb	r2, [r2, #0]
 800474e:	4914      	ldr	r1, [pc, #80]	; (80047a0 <UARTEx_SetNbDataToProcess+0xb4>)
 8004750:	5c8a      	ldrb	r2, [r1, r2]
 8004752:	435a      	muls	r2, r3
 8004754:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004756:	197b      	adds	r3, r7, r5
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	4a12      	ldr	r2, [pc, #72]	; (80047a4 <UARTEx_SetNbDataToProcess+0xb8>)
 800475c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800475e:	0019      	movs	r1, r3
 8004760:	f7fb fd6a 	bl	8000238 <__divsi3>
 8004764:	0003      	movs	r3, r0
 8004766:	b299      	uxth	r1, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	226a      	movs	r2, #106	; 0x6a
 800476c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800476e:	19bb      	adds	r3, r7, r6
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	193a      	adds	r2, r7, r4
 8004774:	7812      	ldrb	r2, [r2, #0]
 8004776:	490a      	ldr	r1, [pc, #40]	; (80047a0 <UARTEx_SetNbDataToProcess+0xb4>)
 8004778:	5c8a      	ldrb	r2, [r1, r2]
 800477a:	435a      	muls	r2, r3
 800477c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800477e:	193b      	adds	r3, r7, r4
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	4a08      	ldr	r2, [pc, #32]	; (80047a4 <UARTEx_SetNbDataToProcess+0xb8>)
 8004784:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004786:	0019      	movs	r1, r3
 8004788:	f7fb fd56 	bl	8000238 <__divsi3>
 800478c:	0003      	movs	r3, r0
 800478e:	b299      	uxth	r1, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2268      	movs	r2, #104	; 0x68
 8004794:	5299      	strh	r1, [r3, r2]
}
 8004796:	46c0      	nop			; (mov r8, r8)
 8004798:	46bd      	mov	sp, r7
 800479a:	b005      	add	sp, #20
 800479c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	080052c8 	.word	0x080052c8
 80047a4:	080052d0 	.word	0x080052d0

080047a8 <atoi>:
 80047a8:	b510      	push	{r4, lr}
 80047aa:	220a      	movs	r2, #10
 80047ac:	2100      	movs	r1, #0
 80047ae:	f000 f8e1 	bl	8004974 <strtol>
 80047b2:	bd10      	pop	{r4, pc}

080047b4 <__errno>:
 80047b4:	4b01      	ldr	r3, [pc, #4]	; (80047bc <__errno+0x8>)
 80047b6:	6818      	ldr	r0, [r3, #0]
 80047b8:	4770      	bx	lr
 80047ba:	46c0      	nop			; (mov r8, r8)
 80047bc:	20000028 	.word	0x20000028

080047c0 <__libc_init_array>:
 80047c0:	b570      	push	{r4, r5, r6, lr}
 80047c2:	2600      	movs	r6, #0
 80047c4:	4d0c      	ldr	r5, [pc, #48]	; (80047f8 <__libc_init_array+0x38>)
 80047c6:	4c0d      	ldr	r4, [pc, #52]	; (80047fc <__libc_init_array+0x3c>)
 80047c8:	1b64      	subs	r4, r4, r5
 80047ca:	10a4      	asrs	r4, r4, #2
 80047cc:	42a6      	cmp	r6, r4
 80047ce:	d109      	bne.n	80047e4 <__libc_init_array+0x24>
 80047d0:	2600      	movs	r6, #0
 80047d2:	f000 fd25 	bl	8005220 <_init>
 80047d6:	4d0a      	ldr	r5, [pc, #40]	; (8004800 <__libc_init_array+0x40>)
 80047d8:	4c0a      	ldr	r4, [pc, #40]	; (8004804 <__libc_init_array+0x44>)
 80047da:	1b64      	subs	r4, r4, r5
 80047dc:	10a4      	asrs	r4, r4, #2
 80047de:	42a6      	cmp	r6, r4
 80047e0:	d105      	bne.n	80047ee <__libc_init_array+0x2e>
 80047e2:	bd70      	pop	{r4, r5, r6, pc}
 80047e4:	00b3      	lsls	r3, r6, #2
 80047e6:	58eb      	ldr	r3, [r5, r3]
 80047e8:	4798      	blx	r3
 80047ea:	3601      	adds	r6, #1
 80047ec:	e7ee      	b.n	80047cc <__libc_init_array+0xc>
 80047ee:	00b3      	lsls	r3, r6, #2
 80047f0:	58eb      	ldr	r3, [r5, r3]
 80047f2:	4798      	blx	r3
 80047f4:	3601      	adds	r6, #1
 80047f6:	e7f2      	b.n	80047de <__libc_init_array+0x1e>
 80047f8:	0800540c 	.word	0x0800540c
 80047fc:	0800540c 	.word	0x0800540c
 8004800:	0800540c 	.word	0x0800540c
 8004804:	08005410 	.word	0x08005410

08004808 <memset>:
 8004808:	0003      	movs	r3, r0
 800480a:	1882      	adds	r2, r0, r2
 800480c:	4293      	cmp	r3, r2
 800480e:	d100      	bne.n	8004812 <memset+0xa>
 8004810:	4770      	bx	lr
 8004812:	7019      	strb	r1, [r3, #0]
 8004814:	3301      	adds	r3, #1
 8004816:	e7f9      	b.n	800480c <memset+0x4>

08004818 <siprintf>:
 8004818:	b40e      	push	{r1, r2, r3}
 800481a:	b500      	push	{lr}
 800481c:	490b      	ldr	r1, [pc, #44]	; (800484c <siprintf+0x34>)
 800481e:	b09c      	sub	sp, #112	; 0x70
 8004820:	ab1d      	add	r3, sp, #116	; 0x74
 8004822:	9002      	str	r0, [sp, #8]
 8004824:	9006      	str	r0, [sp, #24]
 8004826:	9107      	str	r1, [sp, #28]
 8004828:	9104      	str	r1, [sp, #16]
 800482a:	4809      	ldr	r0, [pc, #36]	; (8004850 <siprintf+0x38>)
 800482c:	4909      	ldr	r1, [pc, #36]	; (8004854 <siprintf+0x3c>)
 800482e:	cb04      	ldmia	r3!, {r2}
 8004830:	9105      	str	r1, [sp, #20]
 8004832:	6800      	ldr	r0, [r0, #0]
 8004834:	a902      	add	r1, sp, #8
 8004836:	9301      	str	r3, [sp, #4]
 8004838:	f000 f90a 	bl	8004a50 <_svfiprintf_r>
 800483c:	2300      	movs	r3, #0
 800483e:	9a02      	ldr	r2, [sp, #8]
 8004840:	7013      	strb	r3, [r2, #0]
 8004842:	b01c      	add	sp, #112	; 0x70
 8004844:	bc08      	pop	{r3}
 8004846:	b003      	add	sp, #12
 8004848:	4718      	bx	r3
 800484a:	46c0      	nop			; (mov r8, r8)
 800484c:	7fffffff 	.word	0x7fffffff
 8004850:	20000028 	.word	0x20000028
 8004854:	ffff0208 	.word	0xffff0208

08004858 <_strtol_l.constprop.0>:
 8004858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800485a:	b087      	sub	sp, #28
 800485c:	001e      	movs	r6, r3
 800485e:	9005      	str	r0, [sp, #20]
 8004860:	9101      	str	r1, [sp, #4]
 8004862:	9202      	str	r2, [sp, #8]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d045      	beq.n	80048f4 <_strtol_l.constprop.0+0x9c>
 8004868:	000b      	movs	r3, r1
 800486a:	2e24      	cmp	r6, #36	; 0x24
 800486c:	d842      	bhi.n	80048f4 <_strtol_l.constprop.0+0x9c>
 800486e:	4a3f      	ldr	r2, [pc, #252]	; (800496c <_strtol_l.constprop.0+0x114>)
 8004870:	2108      	movs	r1, #8
 8004872:	4694      	mov	ip, r2
 8004874:	001a      	movs	r2, r3
 8004876:	4660      	mov	r0, ip
 8004878:	7814      	ldrb	r4, [r2, #0]
 800487a:	3301      	adds	r3, #1
 800487c:	5d00      	ldrb	r0, [r0, r4]
 800487e:	001d      	movs	r5, r3
 8004880:	0007      	movs	r7, r0
 8004882:	400f      	ands	r7, r1
 8004884:	4208      	tst	r0, r1
 8004886:	d1f5      	bne.n	8004874 <_strtol_l.constprop.0+0x1c>
 8004888:	2c2d      	cmp	r4, #45	; 0x2d
 800488a:	d13a      	bne.n	8004902 <_strtol_l.constprop.0+0xaa>
 800488c:	2701      	movs	r7, #1
 800488e:	781c      	ldrb	r4, [r3, #0]
 8004890:	1c95      	adds	r5, r2, #2
 8004892:	2e00      	cmp	r6, #0
 8004894:	d065      	beq.n	8004962 <_strtol_l.constprop.0+0x10a>
 8004896:	2e10      	cmp	r6, #16
 8004898:	d109      	bne.n	80048ae <_strtol_l.constprop.0+0x56>
 800489a:	2c30      	cmp	r4, #48	; 0x30
 800489c:	d107      	bne.n	80048ae <_strtol_l.constprop.0+0x56>
 800489e:	2220      	movs	r2, #32
 80048a0:	782b      	ldrb	r3, [r5, #0]
 80048a2:	4393      	bics	r3, r2
 80048a4:	2b58      	cmp	r3, #88	; 0x58
 80048a6:	d157      	bne.n	8004958 <_strtol_l.constprop.0+0x100>
 80048a8:	2610      	movs	r6, #16
 80048aa:	786c      	ldrb	r4, [r5, #1]
 80048ac:	3502      	adds	r5, #2
 80048ae:	4b30      	ldr	r3, [pc, #192]	; (8004970 <_strtol_l.constprop.0+0x118>)
 80048b0:	0031      	movs	r1, r6
 80048b2:	18fb      	adds	r3, r7, r3
 80048b4:	0018      	movs	r0, r3
 80048b6:	9303      	str	r3, [sp, #12]
 80048b8:	f7fb fcba 	bl	8000230 <__aeabi_uidivmod>
 80048bc:	2300      	movs	r3, #0
 80048be:	2201      	movs	r2, #1
 80048c0:	4684      	mov	ip, r0
 80048c2:	0018      	movs	r0, r3
 80048c4:	9104      	str	r1, [sp, #16]
 80048c6:	4252      	negs	r2, r2
 80048c8:	0021      	movs	r1, r4
 80048ca:	3930      	subs	r1, #48	; 0x30
 80048cc:	2909      	cmp	r1, #9
 80048ce:	d81d      	bhi.n	800490c <_strtol_l.constprop.0+0xb4>
 80048d0:	000c      	movs	r4, r1
 80048d2:	42a6      	cmp	r6, r4
 80048d4:	dd28      	ble.n	8004928 <_strtol_l.constprop.0+0xd0>
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	db24      	blt.n	8004924 <_strtol_l.constprop.0+0xcc>
 80048da:	0013      	movs	r3, r2
 80048dc:	4584      	cmp	ip, r0
 80048de:	d306      	bcc.n	80048ee <_strtol_l.constprop.0+0x96>
 80048e0:	d102      	bne.n	80048e8 <_strtol_l.constprop.0+0x90>
 80048e2:	9904      	ldr	r1, [sp, #16]
 80048e4:	42a1      	cmp	r1, r4
 80048e6:	db02      	blt.n	80048ee <_strtol_l.constprop.0+0x96>
 80048e8:	2301      	movs	r3, #1
 80048ea:	4370      	muls	r0, r6
 80048ec:	1820      	adds	r0, r4, r0
 80048ee:	782c      	ldrb	r4, [r5, #0]
 80048f0:	3501      	adds	r5, #1
 80048f2:	e7e9      	b.n	80048c8 <_strtol_l.constprop.0+0x70>
 80048f4:	f7ff ff5e 	bl	80047b4 <__errno>
 80048f8:	2316      	movs	r3, #22
 80048fa:	6003      	str	r3, [r0, #0]
 80048fc:	2000      	movs	r0, #0
 80048fe:	b007      	add	sp, #28
 8004900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004902:	2c2b      	cmp	r4, #43	; 0x2b
 8004904:	d1c5      	bne.n	8004892 <_strtol_l.constprop.0+0x3a>
 8004906:	781c      	ldrb	r4, [r3, #0]
 8004908:	1c95      	adds	r5, r2, #2
 800490a:	e7c2      	b.n	8004892 <_strtol_l.constprop.0+0x3a>
 800490c:	0021      	movs	r1, r4
 800490e:	3941      	subs	r1, #65	; 0x41
 8004910:	2919      	cmp	r1, #25
 8004912:	d801      	bhi.n	8004918 <_strtol_l.constprop.0+0xc0>
 8004914:	3c37      	subs	r4, #55	; 0x37
 8004916:	e7dc      	b.n	80048d2 <_strtol_l.constprop.0+0x7a>
 8004918:	0021      	movs	r1, r4
 800491a:	3961      	subs	r1, #97	; 0x61
 800491c:	2919      	cmp	r1, #25
 800491e:	d803      	bhi.n	8004928 <_strtol_l.constprop.0+0xd0>
 8004920:	3c57      	subs	r4, #87	; 0x57
 8004922:	e7d6      	b.n	80048d2 <_strtol_l.constprop.0+0x7a>
 8004924:	0013      	movs	r3, r2
 8004926:	e7e2      	b.n	80048ee <_strtol_l.constprop.0+0x96>
 8004928:	2b00      	cmp	r3, #0
 800492a:	da09      	bge.n	8004940 <_strtol_l.constprop.0+0xe8>
 800492c:	2322      	movs	r3, #34	; 0x22
 800492e:	9a05      	ldr	r2, [sp, #20]
 8004930:	9803      	ldr	r0, [sp, #12]
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	9b02      	ldr	r3, [sp, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0e1      	beq.n	80048fe <_strtol_l.constprop.0+0xa6>
 800493a:	1e6b      	subs	r3, r5, #1
 800493c:	9301      	str	r3, [sp, #4]
 800493e:	e007      	b.n	8004950 <_strtol_l.constprop.0+0xf8>
 8004940:	2f00      	cmp	r7, #0
 8004942:	d000      	beq.n	8004946 <_strtol_l.constprop.0+0xee>
 8004944:	4240      	negs	r0, r0
 8004946:	9a02      	ldr	r2, [sp, #8]
 8004948:	2a00      	cmp	r2, #0
 800494a:	d0d8      	beq.n	80048fe <_strtol_l.constprop.0+0xa6>
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1f4      	bne.n	800493a <_strtol_l.constprop.0+0xe2>
 8004950:	9b02      	ldr	r3, [sp, #8]
 8004952:	9a01      	ldr	r2, [sp, #4]
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	e7d2      	b.n	80048fe <_strtol_l.constprop.0+0xa6>
 8004958:	2430      	movs	r4, #48	; 0x30
 800495a:	2e00      	cmp	r6, #0
 800495c:	d1a7      	bne.n	80048ae <_strtol_l.constprop.0+0x56>
 800495e:	3608      	adds	r6, #8
 8004960:	e7a5      	b.n	80048ae <_strtol_l.constprop.0+0x56>
 8004962:	2c30      	cmp	r4, #48	; 0x30
 8004964:	d09b      	beq.n	800489e <_strtol_l.constprop.0+0x46>
 8004966:	260a      	movs	r6, #10
 8004968:	e7a1      	b.n	80048ae <_strtol_l.constprop.0+0x56>
 800496a:	46c0      	nop			; (mov r8, r8)
 800496c:	080052d9 	.word	0x080052d9
 8004970:	7fffffff 	.word	0x7fffffff

08004974 <strtol>:
 8004974:	b510      	push	{r4, lr}
 8004976:	0013      	movs	r3, r2
 8004978:	000a      	movs	r2, r1
 800497a:	0001      	movs	r1, r0
 800497c:	4802      	ldr	r0, [pc, #8]	; (8004988 <strtol+0x14>)
 800497e:	6800      	ldr	r0, [r0, #0]
 8004980:	f7ff ff6a 	bl	8004858 <_strtol_l.constprop.0>
 8004984:	bd10      	pop	{r4, pc}
 8004986:	46c0      	nop			; (mov r8, r8)
 8004988:	20000028 	.word	0x20000028

0800498c <__ssputs_r>:
 800498c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800498e:	688e      	ldr	r6, [r1, #8]
 8004990:	b085      	sub	sp, #20
 8004992:	0007      	movs	r7, r0
 8004994:	000c      	movs	r4, r1
 8004996:	9203      	str	r2, [sp, #12]
 8004998:	9301      	str	r3, [sp, #4]
 800499a:	429e      	cmp	r6, r3
 800499c:	d83c      	bhi.n	8004a18 <__ssputs_r+0x8c>
 800499e:	2390      	movs	r3, #144	; 0x90
 80049a0:	898a      	ldrh	r2, [r1, #12]
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	421a      	tst	r2, r3
 80049a6:	d034      	beq.n	8004a12 <__ssputs_r+0x86>
 80049a8:	6909      	ldr	r1, [r1, #16]
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	6960      	ldr	r0, [r4, #20]
 80049ae:	1a5b      	subs	r3, r3, r1
 80049b0:	9302      	str	r3, [sp, #8]
 80049b2:	2303      	movs	r3, #3
 80049b4:	4343      	muls	r3, r0
 80049b6:	0fdd      	lsrs	r5, r3, #31
 80049b8:	18ed      	adds	r5, r5, r3
 80049ba:	9b01      	ldr	r3, [sp, #4]
 80049bc:	9802      	ldr	r0, [sp, #8]
 80049be:	3301      	adds	r3, #1
 80049c0:	181b      	adds	r3, r3, r0
 80049c2:	106d      	asrs	r5, r5, #1
 80049c4:	42ab      	cmp	r3, r5
 80049c6:	d900      	bls.n	80049ca <__ssputs_r+0x3e>
 80049c8:	001d      	movs	r5, r3
 80049ca:	0553      	lsls	r3, r2, #21
 80049cc:	d532      	bpl.n	8004a34 <__ssputs_r+0xa8>
 80049ce:	0029      	movs	r1, r5
 80049d0:	0038      	movs	r0, r7
 80049d2:	f000 fb53 	bl	800507c <_malloc_r>
 80049d6:	1e06      	subs	r6, r0, #0
 80049d8:	d109      	bne.n	80049ee <__ssputs_r+0x62>
 80049da:	230c      	movs	r3, #12
 80049dc:	603b      	str	r3, [r7, #0]
 80049de:	2340      	movs	r3, #64	; 0x40
 80049e0:	2001      	movs	r0, #1
 80049e2:	89a2      	ldrh	r2, [r4, #12]
 80049e4:	4240      	negs	r0, r0
 80049e6:	4313      	orrs	r3, r2
 80049e8:	81a3      	strh	r3, [r4, #12]
 80049ea:	b005      	add	sp, #20
 80049ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049ee:	9a02      	ldr	r2, [sp, #8]
 80049f0:	6921      	ldr	r1, [r4, #16]
 80049f2:	f000 faba 	bl	8004f6a <memcpy>
 80049f6:	89a3      	ldrh	r3, [r4, #12]
 80049f8:	4a14      	ldr	r2, [pc, #80]	; (8004a4c <__ssputs_r+0xc0>)
 80049fa:	401a      	ands	r2, r3
 80049fc:	2380      	movs	r3, #128	; 0x80
 80049fe:	4313      	orrs	r3, r2
 8004a00:	81a3      	strh	r3, [r4, #12]
 8004a02:	9b02      	ldr	r3, [sp, #8]
 8004a04:	6126      	str	r6, [r4, #16]
 8004a06:	18f6      	adds	r6, r6, r3
 8004a08:	6026      	str	r6, [r4, #0]
 8004a0a:	6165      	str	r5, [r4, #20]
 8004a0c:	9e01      	ldr	r6, [sp, #4]
 8004a0e:	1aed      	subs	r5, r5, r3
 8004a10:	60a5      	str	r5, [r4, #8]
 8004a12:	9b01      	ldr	r3, [sp, #4]
 8004a14:	429e      	cmp	r6, r3
 8004a16:	d900      	bls.n	8004a1a <__ssputs_r+0x8e>
 8004a18:	9e01      	ldr	r6, [sp, #4]
 8004a1a:	0032      	movs	r2, r6
 8004a1c:	9903      	ldr	r1, [sp, #12]
 8004a1e:	6820      	ldr	r0, [r4, #0]
 8004a20:	f000 faac 	bl	8004f7c <memmove>
 8004a24:	68a3      	ldr	r3, [r4, #8]
 8004a26:	2000      	movs	r0, #0
 8004a28:	1b9b      	subs	r3, r3, r6
 8004a2a:	60a3      	str	r3, [r4, #8]
 8004a2c:	6823      	ldr	r3, [r4, #0]
 8004a2e:	199e      	adds	r6, r3, r6
 8004a30:	6026      	str	r6, [r4, #0]
 8004a32:	e7da      	b.n	80049ea <__ssputs_r+0x5e>
 8004a34:	002a      	movs	r2, r5
 8004a36:	0038      	movs	r0, r7
 8004a38:	f000 fb96 	bl	8005168 <_realloc_r>
 8004a3c:	1e06      	subs	r6, r0, #0
 8004a3e:	d1e0      	bne.n	8004a02 <__ssputs_r+0x76>
 8004a40:	0038      	movs	r0, r7
 8004a42:	6921      	ldr	r1, [r4, #16]
 8004a44:	f000 faae 	bl	8004fa4 <_free_r>
 8004a48:	e7c7      	b.n	80049da <__ssputs_r+0x4e>
 8004a4a:	46c0      	nop			; (mov r8, r8)
 8004a4c:	fffffb7f 	.word	0xfffffb7f

08004a50 <_svfiprintf_r>:
 8004a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a52:	b0a1      	sub	sp, #132	; 0x84
 8004a54:	9003      	str	r0, [sp, #12]
 8004a56:	001d      	movs	r5, r3
 8004a58:	898b      	ldrh	r3, [r1, #12]
 8004a5a:	000f      	movs	r7, r1
 8004a5c:	0016      	movs	r6, r2
 8004a5e:	061b      	lsls	r3, r3, #24
 8004a60:	d511      	bpl.n	8004a86 <_svfiprintf_r+0x36>
 8004a62:	690b      	ldr	r3, [r1, #16]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10e      	bne.n	8004a86 <_svfiprintf_r+0x36>
 8004a68:	2140      	movs	r1, #64	; 0x40
 8004a6a:	f000 fb07 	bl	800507c <_malloc_r>
 8004a6e:	6038      	str	r0, [r7, #0]
 8004a70:	6138      	str	r0, [r7, #16]
 8004a72:	2800      	cmp	r0, #0
 8004a74:	d105      	bne.n	8004a82 <_svfiprintf_r+0x32>
 8004a76:	230c      	movs	r3, #12
 8004a78:	9a03      	ldr	r2, [sp, #12]
 8004a7a:	3801      	subs	r0, #1
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	b021      	add	sp, #132	; 0x84
 8004a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a82:	2340      	movs	r3, #64	; 0x40
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	2300      	movs	r3, #0
 8004a88:	ac08      	add	r4, sp, #32
 8004a8a:	6163      	str	r3, [r4, #20]
 8004a8c:	3320      	adds	r3, #32
 8004a8e:	7663      	strb	r3, [r4, #25]
 8004a90:	3310      	adds	r3, #16
 8004a92:	76a3      	strb	r3, [r4, #26]
 8004a94:	9507      	str	r5, [sp, #28]
 8004a96:	0035      	movs	r5, r6
 8004a98:	782b      	ldrb	r3, [r5, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <_svfiprintf_r+0x52>
 8004a9e:	2b25      	cmp	r3, #37	; 0x25
 8004aa0:	d147      	bne.n	8004b32 <_svfiprintf_r+0xe2>
 8004aa2:	1bab      	subs	r3, r5, r6
 8004aa4:	9305      	str	r3, [sp, #20]
 8004aa6:	42b5      	cmp	r5, r6
 8004aa8:	d00c      	beq.n	8004ac4 <_svfiprintf_r+0x74>
 8004aaa:	0032      	movs	r2, r6
 8004aac:	0039      	movs	r1, r7
 8004aae:	9803      	ldr	r0, [sp, #12]
 8004ab0:	f7ff ff6c 	bl	800498c <__ssputs_r>
 8004ab4:	1c43      	adds	r3, r0, #1
 8004ab6:	d100      	bne.n	8004aba <_svfiprintf_r+0x6a>
 8004ab8:	e0ae      	b.n	8004c18 <_svfiprintf_r+0x1c8>
 8004aba:	6962      	ldr	r2, [r4, #20]
 8004abc:	9b05      	ldr	r3, [sp, #20]
 8004abe:	4694      	mov	ip, r2
 8004ac0:	4463      	add	r3, ip
 8004ac2:	6163      	str	r3, [r4, #20]
 8004ac4:	782b      	ldrb	r3, [r5, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d100      	bne.n	8004acc <_svfiprintf_r+0x7c>
 8004aca:	e0a5      	b.n	8004c18 <_svfiprintf_r+0x1c8>
 8004acc:	2201      	movs	r2, #1
 8004ace:	2300      	movs	r3, #0
 8004ad0:	4252      	negs	r2, r2
 8004ad2:	6062      	str	r2, [r4, #4]
 8004ad4:	a904      	add	r1, sp, #16
 8004ad6:	3254      	adds	r2, #84	; 0x54
 8004ad8:	1852      	adds	r2, r2, r1
 8004ada:	1c6e      	adds	r6, r5, #1
 8004adc:	6023      	str	r3, [r4, #0]
 8004ade:	60e3      	str	r3, [r4, #12]
 8004ae0:	60a3      	str	r3, [r4, #8]
 8004ae2:	7013      	strb	r3, [r2, #0]
 8004ae4:	65a3      	str	r3, [r4, #88]	; 0x58
 8004ae6:	2205      	movs	r2, #5
 8004ae8:	7831      	ldrb	r1, [r6, #0]
 8004aea:	4854      	ldr	r0, [pc, #336]	; (8004c3c <_svfiprintf_r+0x1ec>)
 8004aec:	f000 fa32 	bl	8004f54 <memchr>
 8004af0:	1c75      	adds	r5, r6, #1
 8004af2:	2800      	cmp	r0, #0
 8004af4:	d11f      	bne.n	8004b36 <_svfiprintf_r+0xe6>
 8004af6:	6822      	ldr	r2, [r4, #0]
 8004af8:	06d3      	lsls	r3, r2, #27
 8004afa:	d504      	bpl.n	8004b06 <_svfiprintf_r+0xb6>
 8004afc:	2353      	movs	r3, #83	; 0x53
 8004afe:	a904      	add	r1, sp, #16
 8004b00:	185b      	adds	r3, r3, r1
 8004b02:	2120      	movs	r1, #32
 8004b04:	7019      	strb	r1, [r3, #0]
 8004b06:	0713      	lsls	r3, r2, #28
 8004b08:	d504      	bpl.n	8004b14 <_svfiprintf_r+0xc4>
 8004b0a:	2353      	movs	r3, #83	; 0x53
 8004b0c:	a904      	add	r1, sp, #16
 8004b0e:	185b      	adds	r3, r3, r1
 8004b10:	212b      	movs	r1, #43	; 0x2b
 8004b12:	7019      	strb	r1, [r3, #0]
 8004b14:	7833      	ldrb	r3, [r6, #0]
 8004b16:	2b2a      	cmp	r3, #42	; 0x2a
 8004b18:	d016      	beq.n	8004b48 <_svfiprintf_r+0xf8>
 8004b1a:	0035      	movs	r5, r6
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	200a      	movs	r0, #10
 8004b20:	68e3      	ldr	r3, [r4, #12]
 8004b22:	782a      	ldrb	r2, [r5, #0]
 8004b24:	1c6e      	adds	r6, r5, #1
 8004b26:	3a30      	subs	r2, #48	; 0x30
 8004b28:	2a09      	cmp	r2, #9
 8004b2a:	d94e      	bls.n	8004bca <_svfiprintf_r+0x17a>
 8004b2c:	2900      	cmp	r1, #0
 8004b2e:	d111      	bne.n	8004b54 <_svfiprintf_r+0x104>
 8004b30:	e017      	b.n	8004b62 <_svfiprintf_r+0x112>
 8004b32:	3501      	adds	r5, #1
 8004b34:	e7b0      	b.n	8004a98 <_svfiprintf_r+0x48>
 8004b36:	4b41      	ldr	r3, [pc, #260]	; (8004c3c <_svfiprintf_r+0x1ec>)
 8004b38:	6822      	ldr	r2, [r4, #0]
 8004b3a:	1ac0      	subs	r0, r0, r3
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	4083      	lsls	r3, r0
 8004b40:	4313      	orrs	r3, r2
 8004b42:	002e      	movs	r6, r5
 8004b44:	6023      	str	r3, [r4, #0]
 8004b46:	e7ce      	b.n	8004ae6 <_svfiprintf_r+0x96>
 8004b48:	9b07      	ldr	r3, [sp, #28]
 8004b4a:	1d19      	adds	r1, r3, #4
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	9107      	str	r1, [sp, #28]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	db01      	blt.n	8004b58 <_svfiprintf_r+0x108>
 8004b54:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b56:	e004      	b.n	8004b62 <_svfiprintf_r+0x112>
 8004b58:	425b      	negs	r3, r3
 8004b5a:	60e3      	str	r3, [r4, #12]
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	6023      	str	r3, [r4, #0]
 8004b62:	782b      	ldrb	r3, [r5, #0]
 8004b64:	2b2e      	cmp	r3, #46	; 0x2e
 8004b66:	d10a      	bne.n	8004b7e <_svfiprintf_r+0x12e>
 8004b68:	786b      	ldrb	r3, [r5, #1]
 8004b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8004b6c:	d135      	bne.n	8004bda <_svfiprintf_r+0x18a>
 8004b6e:	9b07      	ldr	r3, [sp, #28]
 8004b70:	3502      	adds	r5, #2
 8004b72:	1d1a      	adds	r2, r3, #4
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	9207      	str	r2, [sp, #28]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	db2b      	blt.n	8004bd4 <_svfiprintf_r+0x184>
 8004b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b7e:	4e30      	ldr	r6, [pc, #192]	; (8004c40 <_svfiprintf_r+0x1f0>)
 8004b80:	2203      	movs	r2, #3
 8004b82:	0030      	movs	r0, r6
 8004b84:	7829      	ldrb	r1, [r5, #0]
 8004b86:	f000 f9e5 	bl	8004f54 <memchr>
 8004b8a:	2800      	cmp	r0, #0
 8004b8c:	d006      	beq.n	8004b9c <_svfiprintf_r+0x14c>
 8004b8e:	2340      	movs	r3, #64	; 0x40
 8004b90:	1b80      	subs	r0, r0, r6
 8004b92:	4083      	lsls	r3, r0
 8004b94:	6822      	ldr	r2, [r4, #0]
 8004b96:	3501      	adds	r5, #1
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	6023      	str	r3, [r4, #0]
 8004b9c:	7829      	ldrb	r1, [r5, #0]
 8004b9e:	2206      	movs	r2, #6
 8004ba0:	4828      	ldr	r0, [pc, #160]	; (8004c44 <_svfiprintf_r+0x1f4>)
 8004ba2:	1c6e      	adds	r6, r5, #1
 8004ba4:	7621      	strb	r1, [r4, #24]
 8004ba6:	f000 f9d5 	bl	8004f54 <memchr>
 8004baa:	2800      	cmp	r0, #0
 8004bac:	d03c      	beq.n	8004c28 <_svfiprintf_r+0x1d8>
 8004bae:	4b26      	ldr	r3, [pc, #152]	; (8004c48 <_svfiprintf_r+0x1f8>)
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d125      	bne.n	8004c00 <_svfiprintf_r+0x1b0>
 8004bb4:	2207      	movs	r2, #7
 8004bb6:	9b07      	ldr	r3, [sp, #28]
 8004bb8:	3307      	adds	r3, #7
 8004bba:	4393      	bics	r3, r2
 8004bbc:	3308      	adds	r3, #8
 8004bbe:	9307      	str	r3, [sp, #28]
 8004bc0:	6963      	ldr	r3, [r4, #20]
 8004bc2:	9a04      	ldr	r2, [sp, #16]
 8004bc4:	189b      	adds	r3, r3, r2
 8004bc6:	6163      	str	r3, [r4, #20]
 8004bc8:	e765      	b.n	8004a96 <_svfiprintf_r+0x46>
 8004bca:	4343      	muls	r3, r0
 8004bcc:	0035      	movs	r5, r6
 8004bce:	2101      	movs	r1, #1
 8004bd0:	189b      	adds	r3, r3, r2
 8004bd2:	e7a6      	b.n	8004b22 <_svfiprintf_r+0xd2>
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	425b      	negs	r3, r3
 8004bd8:	e7d0      	b.n	8004b7c <_svfiprintf_r+0x12c>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	200a      	movs	r0, #10
 8004bde:	001a      	movs	r2, r3
 8004be0:	3501      	adds	r5, #1
 8004be2:	6063      	str	r3, [r4, #4]
 8004be4:	7829      	ldrb	r1, [r5, #0]
 8004be6:	1c6e      	adds	r6, r5, #1
 8004be8:	3930      	subs	r1, #48	; 0x30
 8004bea:	2909      	cmp	r1, #9
 8004bec:	d903      	bls.n	8004bf6 <_svfiprintf_r+0x1a6>
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0c5      	beq.n	8004b7e <_svfiprintf_r+0x12e>
 8004bf2:	9209      	str	r2, [sp, #36]	; 0x24
 8004bf4:	e7c3      	b.n	8004b7e <_svfiprintf_r+0x12e>
 8004bf6:	4342      	muls	r2, r0
 8004bf8:	0035      	movs	r5, r6
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	1852      	adds	r2, r2, r1
 8004bfe:	e7f1      	b.n	8004be4 <_svfiprintf_r+0x194>
 8004c00:	ab07      	add	r3, sp, #28
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	003a      	movs	r2, r7
 8004c06:	0021      	movs	r1, r4
 8004c08:	4b10      	ldr	r3, [pc, #64]	; (8004c4c <_svfiprintf_r+0x1fc>)
 8004c0a:	9803      	ldr	r0, [sp, #12]
 8004c0c:	e000      	b.n	8004c10 <_svfiprintf_r+0x1c0>
 8004c0e:	bf00      	nop
 8004c10:	9004      	str	r0, [sp, #16]
 8004c12:	9b04      	ldr	r3, [sp, #16]
 8004c14:	3301      	adds	r3, #1
 8004c16:	d1d3      	bne.n	8004bc0 <_svfiprintf_r+0x170>
 8004c18:	89bb      	ldrh	r3, [r7, #12]
 8004c1a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004c1c:	065b      	lsls	r3, r3, #25
 8004c1e:	d400      	bmi.n	8004c22 <_svfiprintf_r+0x1d2>
 8004c20:	e72d      	b.n	8004a7e <_svfiprintf_r+0x2e>
 8004c22:	2001      	movs	r0, #1
 8004c24:	4240      	negs	r0, r0
 8004c26:	e72a      	b.n	8004a7e <_svfiprintf_r+0x2e>
 8004c28:	ab07      	add	r3, sp, #28
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	003a      	movs	r2, r7
 8004c2e:	0021      	movs	r1, r4
 8004c30:	4b06      	ldr	r3, [pc, #24]	; (8004c4c <_svfiprintf_r+0x1fc>)
 8004c32:	9803      	ldr	r0, [sp, #12]
 8004c34:	f000 f87c 	bl	8004d30 <_printf_i>
 8004c38:	e7ea      	b.n	8004c10 <_svfiprintf_r+0x1c0>
 8004c3a:	46c0      	nop			; (mov r8, r8)
 8004c3c:	080053d9 	.word	0x080053d9
 8004c40:	080053df 	.word	0x080053df
 8004c44:	080053e3 	.word	0x080053e3
 8004c48:	00000000 	.word	0x00000000
 8004c4c:	0800498d 	.word	0x0800498d

08004c50 <_printf_common>:
 8004c50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c52:	0015      	movs	r5, r2
 8004c54:	9301      	str	r3, [sp, #4]
 8004c56:	688a      	ldr	r2, [r1, #8]
 8004c58:	690b      	ldr	r3, [r1, #16]
 8004c5a:	000c      	movs	r4, r1
 8004c5c:	9000      	str	r0, [sp, #0]
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	da00      	bge.n	8004c64 <_printf_common+0x14>
 8004c62:	0013      	movs	r3, r2
 8004c64:	0022      	movs	r2, r4
 8004c66:	602b      	str	r3, [r5, #0]
 8004c68:	3243      	adds	r2, #67	; 0x43
 8004c6a:	7812      	ldrb	r2, [r2, #0]
 8004c6c:	2a00      	cmp	r2, #0
 8004c6e:	d001      	beq.n	8004c74 <_printf_common+0x24>
 8004c70:	3301      	adds	r3, #1
 8004c72:	602b      	str	r3, [r5, #0]
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	069b      	lsls	r3, r3, #26
 8004c78:	d502      	bpl.n	8004c80 <_printf_common+0x30>
 8004c7a:	682b      	ldr	r3, [r5, #0]
 8004c7c:	3302      	adds	r3, #2
 8004c7e:	602b      	str	r3, [r5, #0]
 8004c80:	6822      	ldr	r2, [r4, #0]
 8004c82:	2306      	movs	r3, #6
 8004c84:	0017      	movs	r7, r2
 8004c86:	401f      	ands	r7, r3
 8004c88:	421a      	tst	r2, r3
 8004c8a:	d027      	beq.n	8004cdc <_printf_common+0x8c>
 8004c8c:	0023      	movs	r3, r4
 8004c8e:	3343      	adds	r3, #67	; 0x43
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	1e5a      	subs	r2, r3, #1
 8004c94:	4193      	sbcs	r3, r2
 8004c96:	6822      	ldr	r2, [r4, #0]
 8004c98:	0692      	lsls	r2, r2, #26
 8004c9a:	d430      	bmi.n	8004cfe <_printf_common+0xae>
 8004c9c:	0022      	movs	r2, r4
 8004c9e:	9901      	ldr	r1, [sp, #4]
 8004ca0:	9800      	ldr	r0, [sp, #0]
 8004ca2:	9e08      	ldr	r6, [sp, #32]
 8004ca4:	3243      	adds	r2, #67	; 0x43
 8004ca6:	47b0      	blx	r6
 8004ca8:	1c43      	adds	r3, r0, #1
 8004caa:	d025      	beq.n	8004cf8 <_printf_common+0xa8>
 8004cac:	2306      	movs	r3, #6
 8004cae:	6820      	ldr	r0, [r4, #0]
 8004cb0:	682a      	ldr	r2, [r5, #0]
 8004cb2:	68e1      	ldr	r1, [r4, #12]
 8004cb4:	2500      	movs	r5, #0
 8004cb6:	4003      	ands	r3, r0
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d103      	bne.n	8004cc4 <_printf_common+0x74>
 8004cbc:	1a8d      	subs	r5, r1, r2
 8004cbe:	43eb      	mvns	r3, r5
 8004cc0:	17db      	asrs	r3, r3, #31
 8004cc2:	401d      	ands	r5, r3
 8004cc4:	68a3      	ldr	r3, [r4, #8]
 8004cc6:	6922      	ldr	r2, [r4, #16]
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	dd01      	ble.n	8004cd0 <_printf_common+0x80>
 8004ccc:	1a9b      	subs	r3, r3, r2
 8004cce:	18ed      	adds	r5, r5, r3
 8004cd0:	2700      	movs	r7, #0
 8004cd2:	42bd      	cmp	r5, r7
 8004cd4:	d120      	bne.n	8004d18 <_printf_common+0xc8>
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	e010      	b.n	8004cfc <_printf_common+0xac>
 8004cda:	3701      	adds	r7, #1
 8004cdc:	68e3      	ldr	r3, [r4, #12]
 8004cde:	682a      	ldr	r2, [r5, #0]
 8004ce0:	1a9b      	subs	r3, r3, r2
 8004ce2:	42bb      	cmp	r3, r7
 8004ce4:	ddd2      	ble.n	8004c8c <_printf_common+0x3c>
 8004ce6:	0022      	movs	r2, r4
 8004ce8:	2301      	movs	r3, #1
 8004cea:	9901      	ldr	r1, [sp, #4]
 8004cec:	9800      	ldr	r0, [sp, #0]
 8004cee:	9e08      	ldr	r6, [sp, #32]
 8004cf0:	3219      	adds	r2, #25
 8004cf2:	47b0      	blx	r6
 8004cf4:	1c43      	adds	r3, r0, #1
 8004cf6:	d1f0      	bne.n	8004cda <_printf_common+0x8a>
 8004cf8:	2001      	movs	r0, #1
 8004cfa:	4240      	negs	r0, r0
 8004cfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004cfe:	2030      	movs	r0, #48	; 0x30
 8004d00:	18e1      	adds	r1, r4, r3
 8004d02:	3143      	adds	r1, #67	; 0x43
 8004d04:	7008      	strb	r0, [r1, #0]
 8004d06:	0021      	movs	r1, r4
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	3145      	adds	r1, #69	; 0x45
 8004d0c:	7809      	ldrb	r1, [r1, #0]
 8004d0e:	18a2      	adds	r2, r4, r2
 8004d10:	3243      	adds	r2, #67	; 0x43
 8004d12:	3302      	adds	r3, #2
 8004d14:	7011      	strb	r1, [r2, #0]
 8004d16:	e7c1      	b.n	8004c9c <_printf_common+0x4c>
 8004d18:	0022      	movs	r2, r4
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	9901      	ldr	r1, [sp, #4]
 8004d1e:	9800      	ldr	r0, [sp, #0]
 8004d20:	9e08      	ldr	r6, [sp, #32]
 8004d22:	321a      	adds	r2, #26
 8004d24:	47b0      	blx	r6
 8004d26:	1c43      	adds	r3, r0, #1
 8004d28:	d0e6      	beq.n	8004cf8 <_printf_common+0xa8>
 8004d2a:	3701      	adds	r7, #1
 8004d2c:	e7d1      	b.n	8004cd2 <_printf_common+0x82>
	...

08004d30 <_printf_i>:
 8004d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d32:	b08b      	sub	sp, #44	; 0x2c
 8004d34:	9206      	str	r2, [sp, #24]
 8004d36:	000a      	movs	r2, r1
 8004d38:	3243      	adds	r2, #67	; 0x43
 8004d3a:	9307      	str	r3, [sp, #28]
 8004d3c:	9005      	str	r0, [sp, #20]
 8004d3e:	9204      	str	r2, [sp, #16]
 8004d40:	7e0a      	ldrb	r2, [r1, #24]
 8004d42:	000c      	movs	r4, r1
 8004d44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d46:	2a78      	cmp	r2, #120	; 0x78
 8004d48:	d807      	bhi.n	8004d5a <_printf_i+0x2a>
 8004d4a:	2a62      	cmp	r2, #98	; 0x62
 8004d4c:	d809      	bhi.n	8004d62 <_printf_i+0x32>
 8004d4e:	2a00      	cmp	r2, #0
 8004d50:	d100      	bne.n	8004d54 <_printf_i+0x24>
 8004d52:	e0c1      	b.n	8004ed8 <_printf_i+0x1a8>
 8004d54:	2a58      	cmp	r2, #88	; 0x58
 8004d56:	d100      	bne.n	8004d5a <_printf_i+0x2a>
 8004d58:	e08c      	b.n	8004e74 <_printf_i+0x144>
 8004d5a:	0026      	movs	r6, r4
 8004d5c:	3642      	adds	r6, #66	; 0x42
 8004d5e:	7032      	strb	r2, [r6, #0]
 8004d60:	e022      	b.n	8004da8 <_printf_i+0x78>
 8004d62:	0010      	movs	r0, r2
 8004d64:	3863      	subs	r0, #99	; 0x63
 8004d66:	2815      	cmp	r0, #21
 8004d68:	d8f7      	bhi.n	8004d5a <_printf_i+0x2a>
 8004d6a:	f7fb f9d1 	bl	8000110 <__gnu_thumb1_case_shi>
 8004d6e:	0016      	.short	0x0016
 8004d70:	fff6001f 	.word	0xfff6001f
 8004d74:	fff6fff6 	.word	0xfff6fff6
 8004d78:	001ffff6 	.word	0x001ffff6
 8004d7c:	fff6fff6 	.word	0xfff6fff6
 8004d80:	fff6fff6 	.word	0xfff6fff6
 8004d84:	003600a8 	.word	0x003600a8
 8004d88:	fff6009a 	.word	0xfff6009a
 8004d8c:	00b9fff6 	.word	0x00b9fff6
 8004d90:	0036fff6 	.word	0x0036fff6
 8004d94:	fff6fff6 	.word	0xfff6fff6
 8004d98:	009e      	.short	0x009e
 8004d9a:	0026      	movs	r6, r4
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	3642      	adds	r6, #66	; 0x42
 8004da0:	1d11      	adds	r1, r2, #4
 8004da2:	6019      	str	r1, [r3, #0]
 8004da4:	6813      	ldr	r3, [r2, #0]
 8004da6:	7033      	strb	r3, [r6, #0]
 8004da8:	2301      	movs	r3, #1
 8004daa:	e0a7      	b.n	8004efc <_printf_i+0x1cc>
 8004dac:	6808      	ldr	r0, [r1, #0]
 8004dae:	6819      	ldr	r1, [r3, #0]
 8004db0:	1d0a      	adds	r2, r1, #4
 8004db2:	0605      	lsls	r5, r0, #24
 8004db4:	d50b      	bpl.n	8004dce <_printf_i+0x9e>
 8004db6:	680d      	ldr	r5, [r1, #0]
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	2d00      	cmp	r5, #0
 8004dbc:	da03      	bge.n	8004dc6 <_printf_i+0x96>
 8004dbe:	232d      	movs	r3, #45	; 0x2d
 8004dc0:	9a04      	ldr	r2, [sp, #16]
 8004dc2:	426d      	negs	r5, r5
 8004dc4:	7013      	strb	r3, [r2, #0]
 8004dc6:	4b61      	ldr	r3, [pc, #388]	; (8004f4c <_printf_i+0x21c>)
 8004dc8:	270a      	movs	r7, #10
 8004dca:	9303      	str	r3, [sp, #12]
 8004dcc:	e01b      	b.n	8004e06 <_printf_i+0xd6>
 8004dce:	680d      	ldr	r5, [r1, #0]
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	0641      	lsls	r1, r0, #25
 8004dd4:	d5f1      	bpl.n	8004dba <_printf_i+0x8a>
 8004dd6:	b22d      	sxth	r5, r5
 8004dd8:	e7ef      	b.n	8004dba <_printf_i+0x8a>
 8004dda:	680d      	ldr	r5, [r1, #0]
 8004ddc:	6819      	ldr	r1, [r3, #0]
 8004dde:	1d08      	adds	r0, r1, #4
 8004de0:	6018      	str	r0, [r3, #0]
 8004de2:	062e      	lsls	r6, r5, #24
 8004de4:	d501      	bpl.n	8004dea <_printf_i+0xba>
 8004de6:	680d      	ldr	r5, [r1, #0]
 8004de8:	e003      	b.n	8004df2 <_printf_i+0xc2>
 8004dea:	066d      	lsls	r5, r5, #25
 8004dec:	d5fb      	bpl.n	8004de6 <_printf_i+0xb6>
 8004dee:	680d      	ldr	r5, [r1, #0]
 8004df0:	b2ad      	uxth	r5, r5
 8004df2:	4b56      	ldr	r3, [pc, #344]	; (8004f4c <_printf_i+0x21c>)
 8004df4:	2708      	movs	r7, #8
 8004df6:	9303      	str	r3, [sp, #12]
 8004df8:	2a6f      	cmp	r2, #111	; 0x6f
 8004dfa:	d000      	beq.n	8004dfe <_printf_i+0xce>
 8004dfc:	3702      	adds	r7, #2
 8004dfe:	0023      	movs	r3, r4
 8004e00:	2200      	movs	r2, #0
 8004e02:	3343      	adds	r3, #67	; 0x43
 8004e04:	701a      	strb	r2, [r3, #0]
 8004e06:	6863      	ldr	r3, [r4, #4]
 8004e08:	60a3      	str	r3, [r4, #8]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	db03      	blt.n	8004e16 <_printf_i+0xe6>
 8004e0e:	2204      	movs	r2, #4
 8004e10:	6821      	ldr	r1, [r4, #0]
 8004e12:	4391      	bics	r1, r2
 8004e14:	6021      	str	r1, [r4, #0]
 8004e16:	2d00      	cmp	r5, #0
 8004e18:	d102      	bne.n	8004e20 <_printf_i+0xf0>
 8004e1a:	9e04      	ldr	r6, [sp, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00c      	beq.n	8004e3a <_printf_i+0x10a>
 8004e20:	9e04      	ldr	r6, [sp, #16]
 8004e22:	0028      	movs	r0, r5
 8004e24:	0039      	movs	r1, r7
 8004e26:	f7fb fa03 	bl	8000230 <__aeabi_uidivmod>
 8004e2a:	9b03      	ldr	r3, [sp, #12]
 8004e2c:	3e01      	subs	r6, #1
 8004e2e:	5c5b      	ldrb	r3, [r3, r1]
 8004e30:	7033      	strb	r3, [r6, #0]
 8004e32:	002b      	movs	r3, r5
 8004e34:	0005      	movs	r5, r0
 8004e36:	429f      	cmp	r7, r3
 8004e38:	d9f3      	bls.n	8004e22 <_printf_i+0xf2>
 8004e3a:	2f08      	cmp	r7, #8
 8004e3c:	d109      	bne.n	8004e52 <_printf_i+0x122>
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	07db      	lsls	r3, r3, #31
 8004e42:	d506      	bpl.n	8004e52 <_printf_i+0x122>
 8004e44:	6863      	ldr	r3, [r4, #4]
 8004e46:	6922      	ldr	r2, [r4, #16]
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	dc02      	bgt.n	8004e52 <_printf_i+0x122>
 8004e4c:	2330      	movs	r3, #48	; 0x30
 8004e4e:	3e01      	subs	r6, #1
 8004e50:	7033      	strb	r3, [r6, #0]
 8004e52:	9b04      	ldr	r3, [sp, #16]
 8004e54:	1b9b      	subs	r3, r3, r6
 8004e56:	6123      	str	r3, [r4, #16]
 8004e58:	9b07      	ldr	r3, [sp, #28]
 8004e5a:	0021      	movs	r1, r4
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	9805      	ldr	r0, [sp, #20]
 8004e60:	9b06      	ldr	r3, [sp, #24]
 8004e62:	aa09      	add	r2, sp, #36	; 0x24
 8004e64:	f7ff fef4 	bl	8004c50 <_printf_common>
 8004e68:	1c43      	adds	r3, r0, #1
 8004e6a:	d14c      	bne.n	8004f06 <_printf_i+0x1d6>
 8004e6c:	2001      	movs	r0, #1
 8004e6e:	4240      	negs	r0, r0
 8004e70:	b00b      	add	sp, #44	; 0x2c
 8004e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e74:	3145      	adds	r1, #69	; 0x45
 8004e76:	700a      	strb	r2, [r1, #0]
 8004e78:	4a34      	ldr	r2, [pc, #208]	; (8004f4c <_printf_i+0x21c>)
 8004e7a:	9203      	str	r2, [sp, #12]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	6821      	ldr	r1, [r4, #0]
 8004e80:	ca20      	ldmia	r2!, {r5}
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	0608      	lsls	r0, r1, #24
 8004e86:	d516      	bpl.n	8004eb6 <_printf_i+0x186>
 8004e88:	07cb      	lsls	r3, r1, #31
 8004e8a:	d502      	bpl.n	8004e92 <_printf_i+0x162>
 8004e8c:	2320      	movs	r3, #32
 8004e8e:	4319      	orrs	r1, r3
 8004e90:	6021      	str	r1, [r4, #0]
 8004e92:	2710      	movs	r7, #16
 8004e94:	2d00      	cmp	r5, #0
 8004e96:	d1b2      	bne.n	8004dfe <_printf_i+0xce>
 8004e98:	2320      	movs	r3, #32
 8004e9a:	6822      	ldr	r2, [r4, #0]
 8004e9c:	439a      	bics	r2, r3
 8004e9e:	6022      	str	r2, [r4, #0]
 8004ea0:	e7ad      	b.n	8004dfe <_printf_i+0xce>
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	6809      	ldr	r1, [r1, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	6022      	str	r2, [r4, #0]
 8004eaa:	0022      	movs	r2, r4
 8004eac:	2178      	movs	r1, #120	; 0x78
 8004eae:	3245      	adds	r2, #69	; 0x45
 8004eb0:	7011      	strb	r1, [r2, #0]
 8004eb2:	4a27      	ldr	r2, [pc, #156]	; (8004f50 <_printf_i+0x220>)
 8004eb4:	e7e1      	b.n	8004e7a <_printf_i+0x14a>
 8004eb6:	0648      	lsls	r0, r1, #25
 8004eb8:	d5e6      	bpl.n	8004e88 <_printf_i+0x158>
 8004eba:	b2ad      	uxth	r5, r5
 8004ebc:	e7e4      	b.n	8004e88 <_printf_i+0x158>
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	680d      	ldr	r5, [r1, #0]
 8004ec2:	1d10      	adds	r0, r2, #4
 8004ec4:	6949      	ldr	r1, [r1, #20]
 8004ec6:	6018      	str	r0, [r3, #0]
 8004ec8:	6813      	ldr	r3, [r2, #0]
 8004eca:	062e      	lsls	r6, r5, #24
 8004ecc:	d501      	bpl.n	8004ed2 <_printf_i+0x1a2>
 8004ece:	6019      	str	r1, [r3, #0]
 8004ed0:	e002      	b.n	8004ed8 <_printf_i+0x1a8>
 8004ed2:	066d      	lsls	r5, r5, #25
 8004ed4:	d5fb      	bpl.n	8004ece <_printf_i+0x19e>
 8004ed6:	8019      	strh	r1, [r3, #0]
 8004ed8:	2300      	movs	r3, #0
 8004eda:	9e04      	ldr	r6, [sp, #16]
 8004edc:	6123      	str	r3, [r4, #16]
 8004ede:	e7bb      	b.n	8004e58 <_printf_i+0x128>
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	1d11      	adds	r1, r2, #4
 8004ee4:	6019      	str	r1, [r3, #0]
 8004ee6:	6816      	ldr	r6, [r2, #0]
 8004ee8:	2100      	movs	r1, #0
 8004eea:	0030      	movs	r0, r6
 8004eec:	6862      	ldr	r2, [r4, #4]
 8004eee:	f000 f831 	bl	8004f54 <memchr>
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	d001      	beq.n	8004efa <_printf_i+0x1ca>
 8004ef6:	1b80      	subs	r0, r0, r6
 8004ef8:	6060      	str	r0, [r4, #4]
 8004efa:	6863      	ldr	r3, [r4, #4]
 8004efc:	6123      	str	r3, [r4, #16]
 8004efe:	2300      	movs	r3, #0
 8004f00:	9a04      	ldr	r2, [sp, #16]
 8004f02:	7013      	strb	r3, [r2, #0]
 8004f04:	e7a8      	b.n	8004e58 <_printf_i+0x128>
 8004f06:	6923      	ldr	r3, [r4, #16]
 8004f08:	0032      	movs	r2, r6
 8004f0a:	9906      	ldr	r1, [sp, #24]
 8004f0c:	9805      	ldr	r0, [sp, #20]
 8004f0e:	9d07      	ldr	r5, [sp, #28]
 8004f10:	47a8      	blx	r5
 8004f12:	1c43      	adds	r3, r0, #1
 8004f14:	d0aa      	beq.n	8004e6c <_printf_i+0x13c>
 8004f16:	6823      	ldr	r3, [r4, #0]
 8004f18:	079b      	lsls	r3, r3, #30
 8004f1a:	d415      	bmi.n	8004f48 <_printf_i+0x218>
 8004f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f1e:	68e0      	ldr	r0, [r4, #12]
 8004f20:	4298      	cmp	r0, r3
 8004f22:	daa5      	bge.n	8004e70 <_printf_i+0x140>
 8004f24:	0018      	movs	r0, r3
 8004f26:	e7a3      	b.n	8004e70 <_printf_i+0x140>
 8004f28:	0022      	movs	r2, r4
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	9906      	ldr	r1, [sp, #24]
 8004f2e:	9805      	ldr	r0, [sp, #20]
 8004f30:	9e07      	ldr	r6, [sp, #28]
 8004f32:	3219      	adds	r2, #25
 8004f34:	47b0      	blx	r6
 8004f36:	1c43      	adds	r3, r0, #1
 8004f38:	d098      	beq.n	8004e6c <_printf_i+0x13c>
 8004f3a:	3501      	adds	r5, #1
 8004f3c:	68e3      	ldr	r3, [r4, #12]
 8004f3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f40:	1a9b      	subs	r3, r3, r2
 8004f42:	42ab      	cmp	r3, r5
 8004f44:	dcf0      	bgt.n	8004f28 <_printf_i+0x1f8>
 8004f46:	e7e9      	b.n	8004f1c <_printf_i+0x1ec>
 8004f48:	2500      	movs	r5, #0
 8004f4a:	e7f7      	b.n	8004f3c <_printf_i+0x20c>
 8004f4c:	080053ea 	.word	0x080053ea
 8004f50:	080053fb 	.word	0x080053fb

08004f54 <memchr>:
 8004f54:	b2c9      	uxtb	r1, r1
 8004f56:	1882      	adds	r2, r0, r2
 8004f58:	4290      	cmp	r0, r2
 8004f5a:	d101      	bne.n	8004f60 <memchr+0xc>
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	4770      	bx	lr
 8004f60:	7803      	ldrb	r3, [r0, #0]
 8004f62:	428b      	cmp	r3, r1
 8004f64:	d0fb      	beq.n	8004f5e <memchr+0xa>
 8004f66:	3001      	adds	r0, #1
 8004f68:	e7f6      	b.n	8004f58 <memchr+0x4>

08004f6a <memcpy>:
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	b510      	push	{r4, lr}
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d100      	bne.n	8004f74 <memcpy+0xa>
 8004f72:	bd10      	pop	{r4, pc}
 8004f74:	5ccc      	ldrb	r4, [r1, r3]
 8004f76:	54c4      	strb	r4, [r0, r3]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	e7f8      	b.n	8004f6e <memcpy+0x4>

08004f7c <memmove>:
 8004f7c:	b510      	push	{r4, lr}
 8004f7e:	4288      	cmp	r0, r1
 8004f80:	d902      	bls.n	8004f88 <memmove+0xc>
 8004f82:	188b      	adds	r3, r1, r2
 8004f84:	4298      	cmp	r0, r3
 8004f86:	d303      	bcc.n	8004f90 <memmove+0x14>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	e007      	b.n	8004f9c <memmove+0x20>
 8004f8c:	5c8b      	ldrb	r3, [r1, r2]
 8004f8e:	5483      	strb	r3, [r0, r2]
 8004f90:	3a01      	subs	r2, #1
 8004f92:	d2fb      	bcs.n	8004f8c <memmove+0x10>
 8004f94:	bd10      	pop	{r4, pc}
 8004f96:	5ccc      	ldrb	r4, [r1, r3]
 8004f98:	54c4      	strb	r4, [r0, r3]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d1fa      	bne.n	8004f96 <memmove+0x1a>
 8004fa0:	e7f8      	b.n	8004f94 <memmove+0x18>
	...

08004fa4 <_free_r>:
 8004fa4:	b570      	push	{r4, r5, r6, lr}
 8004fa6:	0005      	movs	r5, r0
 8004fa8:	2900      	cmp	r1, #0
 8004faa:	d010      	beq.n	8004fce <_free_r+0x2a>
 8004fac:	1f0c      	subs	r4, r1, #4
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	da00      	bge.n	8004fb6 <_free_r+0x12>
 8004fb4:	18e4      	adds	r4, r4, r3
 8004fb6:	0028      	movs	r0, r5
 8004fb8:	f000 f918 	bl	80051ec <__malloc_lock>
 8004fbc:	4a1d      	ldr	r2, [pc, #116]	; (8005034 <_free_r+0x90>)
 8004fbe:	6813      	ldr	r3, [r2, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d105      	bne.n	8004fd0 <_free_r+0x2c>
 8004fc4:	6063      	str	r3, [r4, #4]
 8004fc6:	6014      	str	r4, [r2, #0]
 8004fc8:	0028      	movs	r0, r5
 8004fca:	f000 f917 	bl	80051fc <__malloc_unlock>
 8004fce:	bd70      	pop	{r4, r5, r6, pc}
 8004fd0:	42a3      	cmp	r3, r4
 8004fd2:	d908      	bls.n	8004fe6 <_free_r+0x42>
 8004fd4:	6821      	ldr	r1, [r4, #0]
 8004fd6:	1860      	adds	r0, r4, r1
 8004fd8:	4283      	cmp	r3, r0
 8004fda:	d1f3      	bne.n	8004fc4 <_free_r+0x20>
 8004fdc:	6818      	ldr	r0, [r3, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	1841      	adds	r1, r0, r1
 8004fe2:	6021      	str	r1, [r4, #0]
 8004fe4:	e7ee      	b.n	8004fc4 <_free_r+0x20>
 8004fe6:	001a      	movs	r2, r3
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <_free_r+0x4e>
 8004fee:	42a3      	cmp	r3, r4
 8004ff0:	d9f9      	bls.n	8004fe6 <_free_r+0x42>
 8004ff2:	6811      	ldr	r1, [r2, #0]
 8004ff4:	1850      	adds	r0, r2, r1
 8004ff6:	42a0      	cmp	r0, r4
 8004ff8:	d10b      	bne.n	8005012 <_free_r+0x6e>
 8004ffa:	6820      	ldr	r0, [r4, #0]
 8004ffc:	1809      	adds	r1, r1, r0
 8004ffe:	1850      	adds	r0, r2, r1
 8005000:	6011      	str	r1, [r2, #0]
 8005002:	4283      	cmp	r3, r0
 8005004:	d1e0      	bne.n	8004fc8 <_free_r+0x24>
 8005006:	6818      	ldr	r0, [r3, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	1841      	adds	r1, r0, r1
 800500c:	6011      	str	r1, [r2, #0]
 800500e:	6053      	str	r3, [r2, #4]
 8005010:	e7da      	b.n	8004fc8 <_free_r+0x24>
 8005012:	42a0      	cmp	r0, r4
 8005014:	d902      	bls.n	800501c <_free_r+0x78>
 8005016:	230c      	movs	r3, #12
 8005018:	602b      	str	r3, [r5, #0]
 800501a:	e7d5      	b.n	8004fc8 <_free_r+0x24>
 800501c:	6821      	ldr	r1, [r4, #0]
 800501e:	1860      	adds	r0, r4, r1
 8005020:	4283      	cmp	r3, r0
 8005022:	d103      	bne.n	800502c <_free_r+0x88>
 8005024:	6818      	ldr	r0, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	1841      	adds	r1, r0, r1
 800502a:	6021      	str	r1, [r4, #0]
 800502c:	6063      	str	r3, [r4, #4]
 800502e:	6054      	str	r4, [r2, #4]
 8005030:	e7ca      	b.n	8004fc8 <_free_r+0x24>
 8005032:	46c0      	nop			; (mov r8, r8)
 8005034:	200001fc 	.word	0x200001fc

08005038 <sbrk_aligned>:
 8005038:	b570      	push	{r4, r5, r6, lr}
 800503a:	4e0f      	ldr	r6, [pc, #60]	; (8005078 <sbrk_aligned+0x40>)
 800503c:	000d      	movs	r5, r1
 800503e:	6831      	ldr	r1, [r6, #0]
 8005040:	0004      	movs	r4, r0
 8005042:	2900      	cmp	r1, #0
 8005044:	d102      	bne.n	800504c <sbrk_aligned+0x14>
 8005046:	f000 f8bf 	bl	80051c8 <_sbrk_r>
 800504a:	6030      	str	r0, [r6, #0]
 800504c:	0029      	movs	r1, r5
 800504e:	0020      	movs	r0, r4
 8005050:	f000 f8ba 	bl	80051c8 <_sbrk_r>
 8005054:	1c43      	adds	r3, r0, #1
 8005056:	d00a      	beq.n	800506e <sbrk_aligned+0x36>
 8005058:	2303      	movs	r3, #3
 800505a:	1cc5      	adds	r5, r0, #3
 800505c:	439d      	bics	r5, r3
 800505e:	42a8      	cmp	r0, r5
 8005060:	d007      	beq.n	8005072 <sbrk_aligned+0x3a>
 8005062:	1a29      	subs	r1, r5, r0
 8005064:	0020      	movs	r0, r4
 8005066:	f000 f8af 	bl	80051c8 <_sbrk_r>
 800506a:	1c43      	adds	r3, r0, #1
 800506c:	d101      	bne.n	8005072 <sbrk_aligned+0x3a>
 800506e:	2501      	movs	r5, #1
 8005070:	426d      	negs	r5, r5
 8005072:	0028      	movs	r0, r5
 8005074:	bd70      	pop	{r4, r5, r6, pc}
 8005076:	46c0      	nop			; (mov r8, r8)
 8005078:	20000200 	.word	0x20000200

0800507c <_malloc_r>:
 800507c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800507e:	2203      	movs	r2, #3
 8005080:	1ccb      	adds	r3, r1, #3
 8005082:	4393      	bics	r3, r2
 8005084:	3308      	adds	r3, #8
 8005086:	0006      	movs	r6, r0
 8005088:	001f      	movs	r7, r3
 800508a:	2b0c      	cmp	r3, #12
 800508c:	d232      	bcs.n	80050f4 <_malloc_r+0x78>
 800508e:	270c      	movs	r7, #12
 8005090:	42b9      	cmp	r1, r7
 8005092:	d831      	bhi.n	80050f8 <_malloc_r+0x7c>
 8005094:	0030      	movs	r0, r6
 8005096:	f000 f8a9 	bl	80051ec <__malloc_lock>
 800509a:	4d32      	ldr	r5, [pc, #200]	; (8005164 <_malloc_r+0xe8>)
 800509c:	682b      	ldr	r3, [r5, #0]
 800509e:	001c      	movs	r4, r3
 80050a0:	2c00      	cmp	r4, #0
 80050a2:	d12e      	bne.n	8005102 <_malloc_r+0x86>
 80050a4:	0039      	movs	r1, r7
 80050a6:	0030      	movs	r0, r6
 80050a8:	f7ff ffc6 	bl	8005038 <sbrk_aligned>
 80050ac:	0004      	movs	r4, r0
 80050ae:	1c43      	adds	r3, r0, #1
 80050b0:	d11e      	bne.n	80050f0 <_malloc_r+0x74>
 80050b2:	682c      	ldr	r4, [r5, #0]
 80050b4:	0025      	movs	r5, r4
 80050b6:	2d00      	cmp	r5, #0
 80050b8:	d14a      	bne.n	8005150 <_malloc_r+0xd4>
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	0029      	movs	r1, r5
 80050be:	18e3      	adds	r3, r4, r3
 80050c0:	0030      	movs	r0, r6
 80050c2:	9301      	str	r3, [sp, #4]
 80050c4:	f000 f880 	bl	80051c8 <_sbrk_r>
 80050c8:	9b01      	ldr	r3, [sp, #4]
 80050ca:	4283      	cmp	r3, r0
 80050cc:	d143      	bne.n	8005156 <_malloc_r+0xda>
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	3703      	adds	r7, #3
 80050d2:	1aff      	subs	r7, r7, r3
 80050d4:	2303      	movs	r3, #3
 80050d6:	439f      	bics	r7, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	2f0c      	cmp	r7, #12
 80050dc:	d200      	bcs.n	80050e0 <_malloc_r+0x64>
 80050de:	270c      	movs	r7, #12
 80050e0:	0039      	movs	r1, r7
 80050e2:	0030      	movs	r0, r6
 80050e4:	f7ff ffa8 	bl	8005038 <sbrk_aligned>
 80050e8:	1c43      	adds	r3, r0, #1
 80050ea:	d034      	beq.n	8005156 <_malloc_r+0xda>
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	19df      	adds	r7, r3, r7
 80050f0:	6027      	str	r7, [r4, #0]
 80050f2:	e013      	b.n	800511c <_malloc_r+0xa0>
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	dacb      	bge.n	8005090 <_malloc_r+0x14>
 80050f8:	230c      	movs	r3, #12
 80050fa:	2500      	movs	r5, #0
 80050fc:	6033      	str	r3, [r6, #0]
 80050fe:	0028      	movs	r0, r5
 8005100:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005102:	6822      	ldr	r2, [r4, #0]
 8005104:	1bd1      	subs	r1, r2, r7
 8005106:	d420      	bmi.n	800514a <_malloc_r+0xce>
 8005108:	290b      	cmp	r1, #11
 800510a:	d917      	bls.n	800513c <_malloc_r+0xc0>
 800510c:	19e2      	adds	r2, r4, r7
 800510e:	6027      	str	r7, [r4, #0]
 8005110:	42a3      	cmp	r3, r4
 8005112:	d111      	bne.n	8005138 <_malloc_r+0xbc>
 8005114:	602a      	str	r2, [r5, #0]
 8005116:	6863      	ldr	r3, [r4, #4]
 8005118:	6011      	str	r1, [r2, #0]
 800511a:	6053      	str	r3, [r2, #4]
 800511c:	0030      	movs	r0, r6
 800511e:	0025      	movs	r5, r4
 8005120:	f000 f86c 	bl	80051fc <__malloc_unlock>
 8005124:	2207      	movs	r2, #7
 8005126:	350b      	adds	r5, #11
 8005128:	1d23      	adds	r3, r4, #4
 800512a:	4395      	bics	r5, r2
 800512c:	1aea      	subs	r2, r5, r3
 800512e:	429d      	cmp	r5, r3
 8005130:	d0e5      	beq.n	80050fe <_malloc_r+0x82>
 8005132:	1b5b      	subs	r3, r3, r5
 8005134:	50a3      	str	r3, [r4, r2]
 8005136:	e7e2      	b.n	80050fe <_malloc_r+0x82>
 8005138:	605a      	str	r2, [r3, #4]
 800513a:	e7ec      	b.n	8005116 <_malloc_r+0x9a>
 800513c:	6862      	ldr	r2, [r4, #4]
 800513e:	42a3      	cmp	r3, r4
 8005140:	d101      	bne.n	8005146 <_malloc_r+0xca>
 8005142:	602a      	str	r2, [r5, #0]
 8005144:	e7ea      	b.n	800511c <_malloc_r+0xa0>
 8005146:	605a      	str	r2, [r3, #4]
 8005148:	e7e8      	b.n	800511c <_malloc_r+0xa0>
 800514a:	0023      	movs	r3, r4
 800514c:	6864      	ldr	r4, [r4, #4]
 800514e:	e7a7      	b.n	80050a0 <_malloc_r+0x24>
 8005150:	002c      	movs	r4, r5
 8005152:	686d      	ldr	r5, [r5, #4]
 8005154:	e7af      	b.n	80050b6 <_malloc_r+0x3a>
 8005156:	230c      	movs	r3, #12
 8005158:	0030      	movs	r0, r6
 800515a:	6033      	str	r3, [r6, #0]
 800515c:	f000 f84e 	bl	80051fc <__malloc_unlock>
 8005160:	e7cd      	b.n	80050fe <_malloc_r+0x82>
 8005162:	46c0      	nop			; (mov r8, r8)
 8005164:	200001fc 	.word	0x200001fc

08005168 <_realloc_r>:
 8005168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800516a:	0007      	movs	r7, r0
 800516c:	000e      	movs	r6, r1
 800516e:	0014      	movs	r4, r2
 8005170:	2900      	cmp	r1, #0
 8005172:	d105      	bne.n	8005180 <_realloc_r+0x18>
 8005174:	0011      	movs	r1, r2
 8005176:	f7ff ff81 	bl	800507c <_malloc_r>
 800517a:	0005      	movs	r5, r0
 800517c:	0028      	movs	r0, r5
 800517e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005180:	2a00      	cmp	r2, #0
 8005182:	d103      	bne.n	800518c <_realloc_r+0x24>
 8005184:	f7ff ff0e 	bl	8004fa4 <_free_r>
 8005188:	0025      	movs	r5, r4
 800518a:	e7f7      	b.n	800517c <_realloc_r+0x14>
 800518c:	f000 f83e 	bl	800520c <_malloc_usable_size_r>
 8005190:	9001      	str	r0, [sp, #4]
 8005192:	4284      	cmp	r4, r0
 8005194:	d803      	bhi.n	800519e <_realloc_r+0x36>
 8005196:	0035      	movs	r5, r6
 8005198:	0843      	lsrs	r3, r0, #1
 800519a:	42a3      	cmp	r3, r4
 800519c:	d3ee      	bcc.n	800517c <_realloc_r+0x14>
 800519e:	0021      	movs	r1, r4
 80051a0:	0038      	movs	r0, r7
 80051a2:	f7ff ff6b 	bl	800507c <_malloc_r>
 80051a6:	1e05      	subs	r5, r0, #0
 80051a8:	d0e8      	beq.n	800517c <_realloc_r+0x14>
 80051aa:	9b01      	ldr	r3, [sp, #4]
 80051ac:	0022      	movs	r2, r4
 80051ae:	429c      	cmp	r4, r3
 80051b0:	d900      	bls.n	80051b4 <_realloc_r+0x4c>
 80051b2:	001a      	movs	r2, r3
 80051b4:	0031      	movs	r1, r6
 80051b6:	0028      	movs	r0, r5
 80051b8:	f7ff fed7 	bl	8004f6a <memcpy>
 80051bc:	0031      	movs	r1, r6
 80051be:	0038      	movs	r0, r7
 80051c0:	f7ff fef0 	bl	8004fa4 <_free_r>
 80051c4:	e7da      	b.n	800517c <_realloc_r+0x14>
	...

080051c8 <_sbrk_r>:
 80051c8:	2300      	movs	r3, #0
 80051ca:	b570      	push	{r4, r5, r6, lr}
 80051cc:	4d06      	ldr	r5, [pc, #24]	; (80051e8 <_sbrk_r+0x20>)
 80051ce:	0004      	movs	r4, r0
 80051d0:	0008      	movs	r0, r1
 80051d2:	602b      	str	r3, [r5, #0]
 80051d4:	f7fb fb42 	bl	800085c <_sbrk>
 80051d8:	1c43      	adds	r3, r0, #1
 80051da:	d103      	bne.n	80051e4 <_sbrk_r+0x1c>
 80051dc:	682b      	ldr	r3, [r5, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d000      	beq.n	80051e4 <_sbrk_r+0x1c>
 80051e2:	6023      	str	r3, [r4, #0]
 80051e4:	bd70      	pop	{r4, r5, r6, pc}
 80051e6:	46c0      	nop			; (mov r8, r8)
 80051e8:	20000204 	.word	0x20000204

080051ec <__malloc_lock>:
 80051ec:	b510      	push	{r4, lr}
 80051ee:	4802      	ldr	r0, [pc, #8]	; (80051f8 <__malloc_lock+0xc>)
 80051f0:	f000 f814 	bl	800521c <__retarget_lock_acquire_recursive>
 80051f4:	bd10      	pop	{r4, pc}
 80051f6:	46c0      	nop			; (mov r8, r8)
 80051f8:	20000208 	.word	0x20000208

080051fc <__malloc_unlock>:
 80051fc:	b510      	push	{r4, lr}
 80051fe:	4802      	ldr	r0, [pc, #8]	; (8005208 <__malloc_unlock+0xc>)
 8005200:	f000 f80d 	bl	800521e <__retarget_lock_release_recursive>
 8005204:	bd10      	pop	{r4, pc}
 8005206:	46c0      	nop			; (mov r8, r8)
 8005208:	20000208 	.word	0x20000208

0800520c <_malloc_usable_size_r>:
 800520c:	1f0b      	subs	r3, r1, #4
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	1f18      	subs	r0, r3, #4
 8005212:	2b00      	cmp	r3, #0
 8005214:	da01      	bge.n	800521a <_malloc_usable_size_r+0xe>
 8005216:	580b      	ldr	r3, [r1, r0]
 8005218:	18c0      	adds	r0, r0, r3
 800521a:	4770      	bx	lr

0800521c <__retarget_lock_acquire_recursive>:
 800521c:	4770      	bx	lr

0800521e <__retarget_lock_release_recursive>:
 800521e:	4770      	bx	lr

08005220 <_init>:
 8005220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005222:	46c0      	nop			; (mov r8, r8)
 8005224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005226:	bc08      	pop	{r3}
 8005228:	469e      	mov	lr, r3
 800522a:	4770      	bx	lr

0800522c <_fini>:
 800522c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522e:	46c0      	nop			; (mov r8, r8)
 8005230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005232:	bc08      	pop	{r3}
 8005234:	469e      	mov	lr, r3
 8005236:	4770      	bx	lr
